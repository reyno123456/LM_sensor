///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR   11/Dec/2009  23:24:31 /
// Copyright 1996-2009 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\avr\LM_Finial_Test\printer.c                         /
//    Command line =  D:\avr\LM_Finial_Test\printer.c --cpu=m644p -ms -o      /
//                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018   /
//                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Li /
//                    st\ -lA D:\avr\LM_Finial_Test\Release\List\             /
//                    --diag_suppress Pa082,Pe167,Pe186                       /
//                    --initializers_in_flash -z6 --no_inline                 /
//                    --no_cross_call --no_tbaa -DENABLE_BIT_DEFINITIONS -e   /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench     /
//                    5.3\avr\INC\" -I "C:\Program Files\IAR                  /
//                    Systems\Embedded Workbench 5.3\avr\INC\CLIB\"           /
//                    --eeprom_size 2048                                      /
//    List file    =  D:\avr\LM_Finial_Test\Release\List\printer.s90          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME printer

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega644P"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?CV_SWITCH_L06
        EXTERN ?EPILOGUE_B10_L09
        EXTERN ?EPILOGUE_B16_L09
        EXTERN ?EPILOGUE_B7_L09
        EXTERN ?EPILOGUE_B8_L09
        EXTERN ?L_EC_MUL_L03
        EXTERN ?ML_FLASH_SRAM_16EC_16_L07
        EXTERN ?PROLOGUE10_L09
        EXTERN ?PROLOGUE16_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE6_L09
        EXTERN ?PROLOGUE7_L09
        EXTERN ?PROLOGUE8_L09
        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R12_is_cg_reg
        EXTERN ?Register_R13_is_cg_reg
        EXTERN ?Register_R14_is_cg_reg
        EXTERN ?Register_R15_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?SS_DIVMOD_L02
        EXTERN ?SV_SWITCH_L06
        EXTERN ?S_EC_MUL_L02
        EXTERN ?S_SHL_L02
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?need_segment_init
        EXTERN __eeget16_16
        EXTERN __eeget8_16
        EXTERN __eeput16_16
        EXTERN __eeput8_16

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??TOUCH_INT??INTVEC 28`
        PUBLIC Delivery
        PUBLIC PnG_048820
        FUNCTION PnG_048820,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC TOUCH_INT
        FUNCTION TOUCH_INT,0233H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Test
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIMSK
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK3
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTC
        PUBWEAK _A_UBRR1
        PUBWEAK _A_UCSR1A
        PUBWEAK _A_UCSR1B
        PUBWEAK _A_UCSR1C
        PUBWEAK _A_UDR1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC calibration
        PUBLIC cur_x
        PUBLIC cur_y
        PUBLIC external_interrupt_initial
        FUNCTION external_interrupt_initial,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC g_buffer_tx
        PUBLIC g_touched
        PUBLIC get_touch_key
        FUNCTION get_touch_key,080203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC get_touch_menu_00
        FUNCTION get_touch_menu_00,080203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC id_setting
        FUNCTION id_setting,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC id_setting_ee
        FUNCTION id_setting_ee,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC input_screen
        FUNCTION input_screen,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC key_parameter_initial
        FUNCTION key_parameter_initial,080203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC label_1
        PUBLIC label_2
        PUBLIC label_3
        PUBLIC label_4
        PUBLIC label_5
        PUBLIC label_6
        PUBLIC label_7
        PUBLIC label_8
        PUBLIC label_9
        PUBLIC menu_00
        FUNCTION menu_00,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC menu_01
        FUNCTION menu_01,0a1203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC menu_02
        FUNCTION menu_02,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 51, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC print_initial
        FUNCTION print_initial,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC print_label
        FUNCTION print_label,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC print_model
        FUNCTION print_model,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC print_out
        FUNCTION print_out,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC print_out_flash
        FUNCTION print_out_flash,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC setting_parameter
        FUNCTION setting_parameter,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC test_screen
        FUNCTION test_screen,0a1203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC touch_key_blink
        FUNCTION touch_key_blink,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC touch_key_blink_01
        FUNCTION touch_key_blink_01,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC touch_key_blink_02
        FUNCTION touch_key_blink_02,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC write_flash
        FUNCTION write_flash,0a1203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon1
        
        
        CFI Common cfiCommon2 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+2
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon2
        
        
        CFI Common cfiCommon3 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+38
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon3
        
TOUCH_INT           SYMBOL "TOUCH_INT"
`??TOUCH_INT??INTVEC 28` SYMBOL "??INTVEC 28", TOUCH_INT

        EXTERN StrToChar
        FUNCTION StrToChar,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN strncpy
        FUNCTION strncpy,010202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN send_frame_pp_ext_broad
        FUNCTION send_frame_pp_ext_broad,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN LCD_distring
        FUNCTION LCD_distring,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN delay_ms
        FUNCTION delay_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN LCD_distring_V2
        FUNCTION LCD_distring_V2,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN timer_flex2_initial
        FUNCTION timer_flex2_initial,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN light_adj
        FUNCTION light_adj,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN TOUCH_getdata
        FUNCTION TOUCH_getdata,0200H
        ARGFRAME RSTACK, 0, STACK
        EXTERN CharToStr
        FUNCTION CharToStr,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN LCD_distring_ee
        FUNCTION LCD_distring_ee,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN all_reception_buffer_clear
        FUNCTION all_reception_buffer_clear,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN decode_SCS
        FUNCTION decode_SCS,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking
        FUNCTION led_blinking,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking_disable
        FUNCTION led_blinking_disable,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN timer_flex_initial
        FUNCTION timer_flex_initial,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN LCD_Clr
        FUNCTION LCD_Clr,0200H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Buffer_Write_Byte
        FUNCTION Buffer_Write_Byte,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Buffer_To_Page
        FUNCTION Buffer_To_Page,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Cont_Flash_Read_Enable
        FUNCTION Cont_Flash_Read_Enable,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN DF_SPI_RW
        FUNCTION DF_SPI_RW,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Menu_status
        EXTERN Time_delay
        EXTERN avg_x
        EXTERN avg_y
        EXTERN ee_hard
        EXTERN ee_model
        EXTERN ee_page
        EXTERN ee_page_address
        EXTERN ee_printed_id
        EXTERN ee_soft
        EXTERN ee_week
        EXTERN ee_year
        EXTERN error_109
        EXTERN g_asc_reception_buffer
        EXTERN g_asc_short_buffer
        EXTERN g_dataflash_page_address
        EXTERN g_hard
        EXTERN g_lux
        EXTERN g_model
        EXTERN g_page_buffer
        EXTERN g_reception_buffer
        EXTERN g_short_buffer
        EXTERN g_soft
        EXTERN g_week
        EXTERN g_year
        EXTERN product_information
        EXTERN state

// D:\avr\LM_Finial_Test\printer.c
//    1 #include <ioavr.h>

        ASEGN ABSOLUTE:DATA:NOROOT,0ceH
// <__C2> volatile __io _A_UDR1
_A_UDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0ccH
// <__C6> volatile __io _A_UBRR1
_A_UBRR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,0caH
// <__C9> volatile __io _A_UCSR1C
_A_UCSR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0c9H
// <__C12> volatile __io _A_UCSR1B
_A_UCSR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0c8H
// <__C15> volatile __io _A_UCSR1A
_A_UCSR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,073H
// <__C108> volatile __io _A_PCMSK3
_A_PCMSK3:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,069H
// <__C129> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,068H
// <__C132> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03dH
// <__C210> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03bH
// <__C216> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,029H
// <__C234> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,028H
// <__C237> volatile __io _A_PORTC
_A_PORTC:
        DS8 1
//    2 #include <inavr.h>
//    3 #include <string.h>
//    4 #include "printer.h"
//    5 #include "global_variable.h"
//    6 #include "decode_scs_next.h"
//    7 #include "DRI_LCD.H"
//    8 #include "DRI_TOUCH.H"
//    9 #include "application.h"
//   10 #include <string.h>
//   11 #include "decode_scs.h"
//   12 #include "usart.h"
//   13 #include <math.h>
//   14 #include "dataflash.h"
//   15 /*
//   16 #include "board.h"
//   17 #include "usart.h"
//   18 #include "decode_scs.h"
//   19 #include "stdlib.h"
//   20 #include "moudle_SCS.h"
//   21 #include "PIR.h"
//   22 #include "configuration.h"
//   23 #include "global_variable.h"
//   24 #include "IR.h"
//   25 #include "application.h"
//   26 #include "decode_scs_next.h"
//   27 #include "moudle_scs.h"
//   28 #include "string.h"
//   29 #include <intrinsics.h>
//   30 #include "function_service.h"
//   31 #include "font.h"
//   32 #include "DRI_TOUCH.h"
//   33 #include "printer.h"
//   34 #include "DRI_LCD.H"
//   35 */
//   36 // 	1      2      3      A
//   37 //30 48  60 48  90 48  120 48
//   38 // 	4      5      6      B
//   39 //30 72  60 72  90 72  120 72
//   40 // 	7      8      9      C
//   41 //30 96  60 96  90 96  120 96
//   42 // 	E      0      F      D
//   43 //30 120 60 120 90 120 120 120
//   44 static struct S_location key_initial[16]=
//   45 {
//   46 	60,120,0,0, //0
//   47 	30,48,0,0,	//1	
//   48 	60,48,0,0,	//2
//   49 	90,48,0,0,	//3
//   50 	30,72,0,0,	//4
//   51 	60,72,0,0,	//5
//   52 	90,72,0,0,  //6
//   53 	30,96,0,0, 	//7
//   54 	60,96,0,0,	//8 
//   55 	90,96,0,0, 	//9 
//   56 	120,48,0,0,	//A
//   57 	120,72,0,0,	//B
//   58 	120,96,0,0,	//C
//   59 	120,120,0,0,//D
//   60 	30,120,0,0,	//E 
//   61 	90,120,0,0	//F 
//   62 };

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   63 unsigned char g_touched = 0;
g_touched:
        DS8 1
//   64 #pragma vector = PCINT3_vect

        RSEG CODE:CODE:NOROOT(1)
//   65 __interrupt void TOUCH_INT(void)
TOUCH_INT:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function TOUCH_INT
//   66 {
        ST      -Y, R16
        CFI R16 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
//   67 	g_touched = 1;
        LDI     R16, 1
        STS     g_touched, R16
//   68 }
        LD      R16, Y+
        CFI R16 SameValue
        CFI CFA_Y Y+0
        RETI
        CFI EndBlock cfiBlock0
//   69 

        RSEG CODE:CODE:NOROOT(1)
//   70 void print_initial(void)
print_initial:
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function print_initial
//   71 {
//   72 	// USART1 initialization
//   73 	// Communication Parameters: 8 Data, 1 Stop, No Parity
//   74 	// USART1 Receiver: Off
//   75 	// USART1 Transmitter: On
//   76 	// USART1 Mode: Asynchronous
//   77 	// USART1 Baud Rate: 9600
//   78 	UCSR1A=0x00;
        LDI     R16, 0
        STS     _A_UCSR1A, R16
//   79 	UCSR1B=0x08;
        LDI     R16, 8
        STS     _A_UCSR1B, R16
//   80 	UCSR1C=0x06;
        LDI     R16, 6
        STS     _A_UCSR1C, R16
//   81 	UBRR1H=0x00;
        LDI     R16, 0
        STS     205, R16
//   82 	UBRR1L=0x2F;
        LDI     R16, 47
        STS     _A_UBRR1, R16
//   83 }
        RET
        CFI EndBlock cfiBlock1
        REQUIRE _A_UBRR1
        REQUIRE _A_UCSR1B
        REQUIRE _A_UCSR1C
        REQUIRE _A_UCSR1A
//   84 

        RSEG CODE:CODE:NOROOT(1)
//   85 void print_out(unsigned char *data)
print_out:
??print_out_0:
        CFI Block cfiBlock2 Using cfiCommon1
        CFI Function print_out
//   86 {
//   87 	do{
//   88 		while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
        LDS     R18, _A_UCSR1A
        MOV     R19, R18
        SBRS    R19, 5
        RJMP    ??print_out_0
//   89 		UDR1 = *data;
        MOVW    R31:R30, R17:R16
        LD      R18, Z
        STS     _A_UDR1, R18
//   90 	}while(*(++data));
        SUBI    R16, 255
        SBCI    R17, 255
        MOVW    R31:R30, R17:R16
        LD      R18, Z
        TST     R18
        BRNE    ??print_out_0
//   91 }
        RET
        CFI EndBlock cfiBlock2
        REQUIRE _A_UDR1
        REQUIRE _A_UCSR1A
//   92 

        RSEG CODE:CODE:NOROOT(1)
//   93 void print_out_flash(unsigned char __flash *data)
print_out_flash:
??print_out_flash_0:
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function print_out_flash
//   94 {
//   95 	do{
//   96 		while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
        LDS     R18, _A_UCSR1A
        MOV     R19, R18
        SBRS    R19, 5
        RJMP    ??print_out_flash_0
//   97 		UDR1 = *data;
        MOVW    R31:R30, R17:R16
        LPM     R18, Z
        STS     _A_UDR1, R18
//   98 	}while(*(++data));
        SUBI    R16, 255
        SBCI    R17, 255
        MOVW    R31:R30, R17:R16
        LPM     R18, Z
        TST     R18
        BRNE    ??print_out_flash_0
//   99 }
        RET
        CFI EndBlock cfiBlock3
        REQUIRE _A_UDR1
        REQUIRE _A_UCSR1A
//  100 
//  101 __flash unsigned char label_1[] = "^XA~TA0~JSO^LT0^MMT^MNW^MTT^PON^PMN^LH0,0^JMA^PR2,2^MD30^JUS^LRN^CI0^XZ~DG001.GRF,00768,012,,:::::::::::::U0C,T024,T0H4,T082,S0102,S0401,S0C01,N03FE010H080,L01C0H0160H080,K0180,K0C0O040,J020,J0C0P020,I020Q0E0,I040N0407,I080O030,H010O0180,H020H038008018,H040070H014040,H080180H0206,H08040I0H40,01030J0A,05040I010,0210,0220,0240,04C0,05,:06,04,,::::::::::::::::::^XA^LL0120^PW296^FT160,64^XG001.GRF,1,1^FS^BY36,36^FT250,59^BXN,2,200,0,0,1";
//  102 __flash unsigned char label_2[] = "^FS^FO,26^FS^FT165,66^A0N,21,19^FH\\^FD";
//  103 __flash unsigned char label_3[] = "^FS^FO,31^FS^FT165,96^A0N,25,24^FH\\^FDID:";
//  104 __flash unsigned char label_4[] = "^FS^BY48,48^FT55,98^BXB,2,200,0,0,1^FH\\^FD";
//  105 __flash unsigned char label_5[] = "^FS^FO,22^FS^FT126,98^A0B,18,16^FH\\^FDID:";
//  106 __flash unsigned char label_6[] = "^FS^FO,21^FS^FT109,98^A0B,17,16^FH\\^FD";
//  107 __flash unsigned char label_7[] = "^FS^FO,21^FS^FT76,98^A0B,17,16^FH\\^FD";
//  108 __flash unsigned char label_8[] = "^FS^FO,22^FS^FT93,98^A0B,17,16^FH\\^FD";
//  109 __flash unsigned char label_9[] = " 007^FS^PQ1,0,1,Y^XZ^XA^ID000.GRF^FS^XZ";

        RSEG CODE:CODE:NOROOT(1)
//  110 void print_label(unsigned char *id,unsigned char *model, unsigned char *date, unsigned char *fireware_version, unsigned char *hard_version)
print_label:
        CFI Block cfiBlock4 Using cfiCommon2
        CFI Function print_label
//  111 {
        FUNCALL print_label, StrToChar
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_model
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_model
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_model
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_model
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_label, print_out_flash
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE10_L09
        CFI R9 Frame(CFA_Y, -3)
        CFI R8 Frame(CFA_Y, -4)
        CFI R7 Frame(CFA_Y, -5)
        CFI R6 Frame(CFA_Y, -6)
        CFI R5 Frame(CFA_Y, -7)
        CFI R4 Frame(CFA_Y, -8)
        CFI R27 Frame(CFA_Y, -9)
        CFI R26 Frame(CFA_Y, -10)
        CFI R25 Frame(CFA_Y, -11)
        CFI R24 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        SBIW    R29:R28, 13
        CFI CFA_Y Y+25
        MOVW    R27:R26, R17:R16
        MOVW    R5:R4, R21:R20
        MOVW    R7:R6, R23:R22
        LDD     R8, Y+23
        LDD     R9, Y+24
//  112 	unsigned char buffer_mode[3];
//  113 	unsigned char buffer[10];
//  114 	unsigned char model_number;
//  115 	
//  116 	buffer_mode[0] = g_model[4];
        LDS     R16, (g_model + 4)
        ST      Y, R16
//  117 	buffer_mode[1] = g_model[5];
        LDS     R16, (g_model + 5)
        STD     Y+1, R16
//  118 	buffer_mode[2] = 0;
        LDI     R16, 0
        STD     Y+2, R16
//  119 	
//  120 	model_number = StrToChar(buffer_mode);
        MOVW    R17:R16, R29:R28
        CALL    StrToChar
        MOV     R24, R16
//  121 	
//  122 		buffer[9] = 0;
        LDI     R16, 0
        STD     Y+12, R16
//  123 		buffer[0] = *(hard_version);
        MOVW    R31:R30, R9:R8
        LD      R16, Z
        STD     Y+3, R16
//  124 		buffer[1] = *(hard_version + 1);
        LDD     R16, Z+1
        STD     Y+4, R16
//  125 		
//  126 		buffer[2] = 32;
        LDI     R16, 32
        STD     Y+5, R16
//  127 		buffer[3] = *fireware_version;
        MOVW    R31:R30, R7:R6
        LD      R16, Z
        STD     Y+6, R16
//  128 		buffer[4] = *(fireware_version+1);
        LDD     R16, Z+1
        STD     Y+7, R16
//  129 		buffer[5] = *(fireware_version+2);
        LDD     R16, Z+2
        STD     Y+8, R16
//  130 		buffer[6] = *(fireware_version+3);
        LDD     R16, Z+3
        STD     Y+9, R16
//  131 		buffer[7] = *(fireware_version+4);
        LDD     R16, Z+4
        STD     Y+10, R16
//  132 		buffer[8] = *(fireware_version+5);
        LDD     R16, Z+5
        STD     Y+11, R16
//  133 	
//  134 		print_out_flash(label_1);
        LDI     R16, LOW(label_1)
        LDI     R17, (label_1) >> 8
        RCALL   print_out_flash
//  135 		print_out("^FH\\^FD");
        LDI     R16, LOW(`?<Constant "^FH\\\\^FD">`)
        LDI     R17, (`?<Constant "^FH\\\\^FD">`) >> 8
        RCALL   print_out
//  136 		
//  137 		print_model(model_number);
        MOV     R16, R24
        RCALL   print_model
//  138 		print_out("\\0D\\0AID:");
        LDI     R16, LOW((`?<Constant "^FH\\\\^FD">` + 8))
        LDI     R17, HIGH((`?<Constant "^FH\\\\^FD">` + 8))
        RCALL   print_out
//  139 		print_out(id); //ok
        MOVW    R17:R16, R27:R26
        RCALL   print_out
//  140 		///////////////////      1      /////////////////////////////////////////
//  141 		print_out_flash(label_2); //Reyno 2009 12 03
        LDI     R16, LOW((label_1 + 437))
        LDI     R17, HIGH((label_1 + 437))
        RCALL   print_out_flash
//  142 
//  143 		print_model(model_number);
        MOV     R16, R24
        RCALL   print_model
//  144 		///////////////////      2      ////////////////////////////////////////
//  145 		print_out_flash(label_3);//ok
        LDI     R16, LOW((label_1 + 476))
        LDI     R17, HIGH((label_1 + 476))
        RCALL   print_out_flash
//  146 	
//  147 		print_out(id);
        MOVW    R17:R16, R27:R26
        RCALL   print_out
//  148 		///////////////////      3      ////////////////////////////////////////
//  149 		print_out_flash(label_4); //ok
        LDI     R16, LOW((label_1 + 518))
        LDI     R17, HIGH((label_1 + 518))
        RCALL   print_out_flash
//  150 
//  151 		print_model(model_number);
        MOV     R16, R24
        RCALL   print_model
//  152 		print_out("\\0D\\0A");
        LDI     R16, LOW((`?<Constant "^FH\\\\^FD">` + 18))
        LDI     R17, HIGH((`?<Constant "^FH\\\\^FD">` + 18))
        RCALL   print_out
//  153 		print_out(date);
        MOVW    R17:R16, R5:R4
        RCALL   print_out
//  154 		print_out(" 007\\0D\\0A");
        LDI     R16, LOW((`?<Constant "^FH\\\\^FD">` + 25))
        LDI     R17, HIGH((`?<Constant "^FH\\\\^FD">` + 25))
        RCALL   print_out
//  155 
//  156 		print_out(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   print_out
//  157 		print_out("\\0D\\0AID:");
        LDI     R16, LOW((`?<Constant "^FH\\\\^FD">` + 8))
        LDI     R17, HIGH((`?<Constant "^FH\\\\^FD">` + 8))
        RCALL   print_out
//  158 		print_out(id);
        MOVW    R17:R16, R27:R26
        RCALL   print_out
//  159 		print_out_flash(label_5);
        LDI     R16, LOW((label_1 + 561))
        LDI     R17, HIGH((label_1 + 561))
        RCALL   print_out_flash
//  160 		print_out(id);
        MOVW    R17:R16, R27:R26
        RCALL   print_out
//  161 		print_out_flash(label_6);
        LDI     R16, LOW((label_1 + 603))
        LDI     R17, HIGH((label_1 + 603))
        RCALL   print_out_flash
//  162 		print_out(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   print_out
//  163 		print_out_flash(label_7);
        LDI     R16, LOW((label_1 + 642))
        LDI     R17, HIGH((label_1 + 642))
        RCALL   print_out_flash
//  164 		print_model(model_number);
        MOV     R16, R24
        RCALL   print_model
//  165 		print_out_flash(label_8);
        LDI     R16, LOW((label_1 + 680))
        LDI     R17, HIGH((label_1 + 680))
        RCALL   print_out_flash
//  166 		print_out(date);
        MOVW    R17:R16, R5:R4
        RCALL   print_out
//  167 		print_out_flash(label_9);
        LDI     R16, LOW((label_1 + 718))
        LDI     R17, HIGH((label_1 + 718))
        RCALL   print_out_flash
//  168 }
        ADIW    R29:R28, 13
        CFI CFA_Y Y+12
        LDI     R30, 12
        JMP     ?EPILOGUE_B10_L09
        CFI EndBlock cfiBlock4
//  169 	

        RSEG CODE:CODE:NOROOT(1)
//  170 void print_model(unsigned char data)
print_model:
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function print_model
//  171 {
//  172 	unsigned char brand;
//  173 
//  174 	switch(g_model[2])
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL print_model, print_out
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDS     R17, (g_model + 2)
        CPI     R17, 49
        BRNE    ??print_model_0
//  175 	{
//  176 		case '1':
//  177 			brand = 1;
        LDI     R17, 1
        RJMP    ??print_model_1
//  178 		break;
//  179 		
//  180 		case '2':
//  181 			brand = 2;
??print_model_0:
        LDI     R17, 2
//  182 		break;
//  183 		
//  184 		default: 
//  185 			brand = 2;
//  186 		break;
//  187 	}
//  188 	
//  189 		if(brand == 2)
??print_model_1:
        CPI     R17, 2
        BRNE    ??print_model_2
//  190 		{
//  191 			switch(data)
        SUBI    R16, 32
        BREQ    ??print_model_3
        DEC     R16
        BREQ    ??print_model_4
        DEC     R16
        BREQ    ??print_model_5
        DEC     R16
        BREQ    ??print_model_6
        DEC     R16
        BREQ    ??print_model_7
        DEC     R16
        BREQ    ??print_model_8
        DEC     R16
        BREQ    ??print_model_9
        DEC     R16
        BREQ    ??print_model_10
        DEC     R16
        BREQ    ??print_model_11
        DEC     R16
        BREQ    ??print_model_12
        SUBI    R16, 7
        BREQ    ??print_model_13
        RET
//  192 			{
//  193 				case 0x20:
//  194 					print_out("048820");
??print_model_3:
        LDI     R16, LOW(`?<Constant "048820">`)
        LDI     R17, (`?<Constant "048820">`) >> 8
        RJMP    ??print_model_14
//  195 				break;
//  196 				
//  197 				case 0x21:
//  198 					print_out("048821");
??print_model_4:
        LDI     R16, LOW((`?<Constant "048820">` + 7))
        LDI     R17, HIGH((`?<Constant "048820">` + 7))
??print_model_14:
        RCALL   print_out
        RET
//  199 				break;
//  200 				
//  201 				case 0x22:
//  202 					print_out("048822");
??print_model_5:
        LDI     R16, LOW((`?<Constant "048820">` + 14))
        LDI     R17, HIGH((`?<Constant "048820">` + 14))
        RJMP    ??print_model_14
//  203 				break;
//  204 				
//  205 				case 0x23:
//  206 					print_out("048823");
??print_model_6:
        LDI     R16, LOW((`?<Constant "048820">` + 21))
        LDI     R17, HIGH((`?<Constant "048820">` + 21))
        RJMP    ??print_model_14
//  207 				break;
//  208 				
//  209 				case 0x24:
//  210 					print_out("048824");
??print_model_7:
        LDI     R16, LOW((`?<Constant "048820">` + 28))
        LDI     R17, HIGH((`?<Constant "048820">` + 28))
        RJMP    ??print_model_14
//  211 				break;
//  212 				
//  213 				case 0x25:
//  214 					print_out("048825");
??print_model_8:
        LDI     R16, LOW((`?<Constant "048820">` + 35))
        LDI     R17, HIGH((`?<Constant "048820">` + 35))
        RJMP    ??print_model_14
//  215 				break;
//  216 				
//  217 				case 0x26:
//  218 					print_out("048826");
??print_model_9:
        LDI     R16, LOW((`?<Constant "048820">` + 42))
        LDI     R17, HIGH((`?<Constant "048820">` + 42))
        RJMP    ??print_model_14
//  219 				break;
//  220 				
//  221 				case 0x27:
//  222 					print_out("048829");
??print_model_10:
        LDI     R16, LOW((`?<Constant "048820">` + 49))
        LDI     R17, HIGH((`?<Constant "048820">` + 49))
        RJMP    ??print_model_14
//  223 				break;
//  224 				
//  225 				case 0x28:
//  226 					print_out("048828");
??print_model_11:
        LDI     R16, LOW((`?<Constant "048820">` + 56))
        LDI     R17, HIGH((`?<Constant "048820">` + 56))
        RJMP    ??print_model_14
//  227 				break;
//  228 				
//  229 				case 0x29:
//  230 					print_out("048831");
??print_model_12:
        LDI     R16, LOW((`?<Constant "048820">` + 63))
        LDI     R17, HIGH((`?<Constant "048820">` + 63))
        RJMP    ??print_model_14
//  231 				break;
//  232 				
//  233 				case 0x30:
//  234 					print_out("048830");
??print_model_13:
        LDI     R16, LOW((`?<Constant "048820">` + 70))
        LDI     R17, HIGH((`?<Constant "048820">` + 70))
        RJMP    ??print_model_14
//  235 				break;
//  236 				
//  237 				default:break;
//  238 			}
//  239 		}
//  240 		else if(brand == 1)
??print_model_2:
        CPI     R17, 1
        BRNE    ??print_model_15
//  241 		{
//  242 			switch(data)
        SUBI    R16, 32
        BREQ    ??print_model_16
        DEC     R16
        BREQ    ??print_model_17
        DEC     R16
        BREQ    ??print_model_18
        DEC     R16
        BREQ    ??print_model_19
        DEC     R16
        BREQ    ??print_model_20
        DEC     R16
        BREQ    ??print_model_21
        DEC     R16
        BREQ    ??print_model_22
        DEC     R16
        BREQ    ??print_model_23
        DEC     R16
        BREQ    ??print_model_24
        DEC     R16
        BREQ    ??print_model_25
        SUBI    R16, 7
        BREQ    ??print_model_26
        RET
//  243 			{
//  244 				case 0x20:
//  245 					print_out("BMSE3001");
??print_model_16:
        LDI     R16, LOW((`?<Constant "048820">` + 77))
        LDI     R17, HIGH((`?<Constant "048820">` + 77))
        RJMP    ??print_model_14
//  246 				break;
//  247 				
//  248 				case 0x21:
//  249 					print_out("BMSE3002");
??print_model_17:
        LDI     R16, LOW((`?<Constant "048820">` + 86))
        LDI     R17, HIGH((`?<Constant "048820">` + 86))
        RJMP    ??print_model_14
//  250 				break;
//  251 				
//  252 				case 0x22:
//  253 					print_out("BMSE3003");
??print_model_18:
        LDI     R16, LOW((`?<Constant "048820">` + 95))
        LDI     R17, HIGH((`?<Constant "048820">` + 95))
        RJMP    ??print_model_14
//  254 				break;
//  255 				
//  256 				case 0x23:
//  257 					print_out("BMSE2005");
??print_model_19:
        LDI     R16, LOW((`?<Constant "048820">` + 104))
        LDI     R17, HIGH((`?<Constant "048820">` + 104))
        RJMP    ??print_model_14
//  258 				break;
//  259 				
//  260 				case 0x24:
//  261 					print_out("BMSE2001");
??print_model_20:
        LDI     R16, LOW((`?<Constant "048820">` + 113))
        LDI     R17, HIGH((`?<Constant "048820">` + 113))
        RJMP    ??print_model_14
//  262 				break;
//  263 				
//  264 				case 0x25:
//  265 					print_out("BMSE2002");
??print_model_21:
        LDI     R16, LOW((`?<Constant "048820">` + 122))
        LDI     R17, HIGH((`?<Constant "048820">` + 122))
        RJMP    ??print_model_14
//  266 				break;
//  267 				
//  268 				case 0x26:
//  269 					print_out("BMSE2003");
??print_model_22:
        LDI     R16, LOW((`?<Constant "048820">` + 131))
        LDI     R17, HIGH((`?<Constant "048820">` + 131))
        RJMP    ??print_model_14
//  270 				break;
//  271 				
//  272 				case 0x27:
//  273 					print_out("BMSE2004");
??print_model_23:
        LDI     R16, LOW((`?<Constant "048820">` + 140))
        LDI     R17, HIGH((`?<Constant "048820">` + 140))
        RJMP    ??print_model_14
//  274 				break;
//  275 				
//  276 				case 0x28:
//  277 					print_out("BMSE3005");
??print_model_24:
        LDI     R16, LOW((`?<Constant "048820">` + 149))
        LDI     R17, HIGH((`?<Constant "048820">` + 149))
        RJMP    ??print_model_14
//  278 				break;
//  279 				
//  280 				case 0x29:
//  281 					print_out("BMSE2007");
??print_model_25:
        LDI     R16, LOW((`?<Constant "048820">` + 158))
        LDI     R17, HIGH((`?<Constant "048820">` + 158))
        RJMP    ??print_model_14
//  282 				break;
//  283 				
//  284 				case 0x30:
//  285 					print_out("BMSE2006");
??print_model_26:
        LDI     R16, LOW((`?<Constant "048820">` + 167))
        LDI     R17, HIGH((`?<Constant "048820">` + 167))
        RCALL   print_out
//  286 				break;
//  287 				
//  288 				default:break;
//  289 			}
//  290 		}
//  291 }
??print_model_15:
        RET
        CFI EndBlock cfiBlock5
//  292 
//  293 	

        RSEG CODE:CODE:NOROOT(1)
//  294 void external_interrupt_initial(void)
external_interrupt_initial:
        CFI Block cfiBlock6 Using cfiCommon1
        CFI Function external_interrupt_initial
//  295 {
//  296 	// External Interrupt(s) initialization
//  297 	// INT0: Off
//  298 	// INT1: Off
//  299 	// INT2: Off
//  300 	// Interrupt on any change on pins PCINT0-7: Off
//  301 	// Interrupt on any change on pins PCINT8-15: Off
//  302 	// Interrupt on any change on pins PCINT16-23: Off
//  303 	// Interrupt on any change on pins PCINT24-31: On
//  304 	EICRA=0x00;
        LDI     R16, 0
        STS     _A_EICRA, R16
//  305 	EIMSK=0x00;
        OUT     0x1D, R16
//  306 	PCMSK3=0x20;
        LDI     R16, 32
        STS     _A_PCMSK3, R16
//  307 	PCICR=0x08;
        LDI     R16, 8
        STS     _A_PCICR, R16
//  308 	PCIFR=0x08;
        OUT     0x1B, R16
//  309 }
        RET
        CFI EndBlock cfiBlock6
        REQUIRE _A_PCMSK3
        REQUIRE _A_EICRA
        REQUIRE _A_PCICR
        REQUIRE _A_EIMSK
        REQUIRE _A_PCIFR
//  310 
//  311 static unsigned long int base = 150, top = 1880;

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//  312 static struct S_location key[16];
key:
        DS8 256

        RSEG CODE:CODE:NOROOT(1)
//  313 void key_parameter_initial(void)
key_parameter_initial:
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function key_parameter_initial
//  314 {
        CALL    ?PROLOGUE16_L09
        CFI R15 Frame(CFA_Y, -1)
        CFI R14 Frame(CFA_Y, -2)
        CFI R13 Frame(CFA_Y, -3)
        CFI R12 Frame(CFA_Y, -4)
        CFI R11 Frame(CFA_Y, -5)
        CFI R10 Frame(CFA_Y, -6)
        CFI R9 Frame(CFA_Y, -7)
        CFI R8 Frame(CFA_Y, -8)
        CFI R7 Frame(CFA_Y, -9)
        CFI R6 Frame(CFA_Y, -10)
        CFI R5 Frame(CFA_Y, -11)
        CFI R4 Frame(CFA_Y, -12)
        CFI R27 Frame(CFA_Y, -13)
        CFI R26 Frame(CFA_Y, -14)
        CFI R25 Frame(CFA_Y, -15)
        CFI R24 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 1
        CFI CFA_Y Y+17
//  315 	unsigned char i;
//  316 	static unsigned long int weigth;
//  317 	static unsigned long int height;
//  318 	
//  319 	weigth = (top - base) * 30 /160;
//  320 	height = (top - base) * 34 /160;
//  321 	
//  322 	weigth -= 150;
        LDI     R30, LOW(base)
        LDI     R31, (base) >> 8
        LDD     R12, Z+4
        LDD     R13, Z+5
        LDD     R14, Z+6
        LDD     R15, Z+7
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        SUB     R12, R16
        SBC     R13, R17
        SBC     R14, R18
        SBC     R15, R19
        LDI     R20, 30
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R13:R12
        MOVW    R19:R18, R15:R14
        CALL    ?L_EC_MUL_L03
        LDI     R20, 160
        CALL    ?UL_DIVMOD_L03
        MOVW    R9:R8, R17:R16
        MOVW    R11:R10, R19:R18
        LDI     R16, 106
        ADD     R8, R16
        ADC     R9, R30
        ADC     R10, R30
        ADC     R11, R30
        LDI     R30, LOW((key_initial + 256))
        LDI     R31, HIGH((key_initial + 256))
        ST      Z, R8
        STD     Z+1, R9
        STD     Z+2, R10
        STD     Z+3, R11
//  323 	height -= 150;
        LDI     R20, 34
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        MOVW    R17:R16, R13:R12
        MOVW    R19:R18, R15:R14
        CALL    ?L_EC_MUL_L03
        LDI     R20, 160
        CALL    ?UL_DIVMOD_L03
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        SUBI    R24, 150
        SBCI    R25, 0
        SBCI    R26, 0
        SBCI    R27, 0
        LDI     R30, LOW((key_initial + 260))
        LDI     R31, HIGH((key_initial + 260))
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
//  324 	
//  325 	for(i=0;i<16;i++)
        LDI     R16, 0
        RJMP    ??key_parameter_initial_0
//  326 	{
//  327 		key[i].x1 = (top - base) * (key_initial[i].x1+3) / 160 - weigth/2;
??key_parameter_initial_1:
        LD      R16, Y
        LDI     R17, 0
        LDI     R20, 4
        CALL    ?S_SHL_L02
        MOVW    R19:R18, R17:R16
        LDI     R16, LOW(key)
        MOV     R4, R16
        LDI     R16, (key) >> 8
        MOV     R5, R16
        ADD     R4, R18
        ADC     R5, R17
        LDI     R16, LOW(key_initial)
        MOV     R6, R16
        LDI     R16, (key_initial) >> 8
        MOV     R7, R16
        ADD     R6, R18
        ADC     R7, R17
        MOVW    R31:R30, R7:R6
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        SUBI    R20, 253
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        MOVW    R17:R16, R13:R12
        MOVW    R19:R18, R15:R14
        CALL    ?L_EC_MUL_L03
        LDI     R20, 160
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        MOVW    R21:R20, R9:R8
        MOVW    R23:R22, R11:R10
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        SBC     R19, R23
        MOVW    R31:R30, R5:R4
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
//  328 		key[i].y1 = (top - base) * (key_initial[i].y1+5) / 160 - height/2;
        MOVW    R31:R30, R7:R6
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        SUBI    R20, 251
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        MOVW    R17:R16, R13:R12
        MOVW    R19:R18, R15:R14
        CALL    ?L_EC_MUL_L03
        LDI     R20, 160
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?UL_DIVMOD_L03
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        SBC     R19, R23
        MOVW    R31:R30, R5:R4
        STD     Z+4, R16
        STD     Z+5, R17
        STD     Z+6, R18
        STD     Z+7, R19
//  329 		key[i].x2 = key[i].x1 + weigth;
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        ADD     R16, R8
        ADC     R17, R9
        ADC     R18, R10
        ADC     R19, R11
        STD     Z+8, R16
        STD     Z+9, R17
        STD     Z+10, R18
        STD     Z+11, R19
//  330 		key[i].y2 = key[i].y1 + height;
        LDD     R16, Z+4
        LDD     R17, Z+5
        LDD     R18, Z+6
        LDD     R19, Z+7
        ADD     R16, R24
        ADC     R17, R25
        ADC     R18, R26
        ADC     R19, R27
        STD     Z+12, R16
        STD     Z+13, R17
        STD     Z+14, R18
        STD     Z+15, R19
//  331 	}
        LD      R16, Y
        INC     R16
??key_parameter_initial_0:
        ST      Y, R16
        LD      R16, Y
        CPI     R16, 16
        BRCC    $+2+2
        RJMP    ??key_parameter_initial_1
//  332 	asm("nop");
        nop
//  333 }
        ADIW    R29:R28, 1
        CFI CFA_Y Y+16
        LDI     R30, 16
        JMP     ?EPILOGUE_B16_L09
        CFI EndBlock cfiBlock7

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "^FH\\\\^FD">`:
        DS8 8
        REQUIRE `?<Initializer for <Constant "^FH\\\\^FD">>`
        DS8 10
        REQUIRE `?<Initializer for <Constant "\\\\0D\\\\0AID:">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "\\\\0D\\\\0A">>`
        DS8 11
        REQUIRE `?<Initializer for <Constant " 007\\\\0D\\\\0A">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "048820">`:
        DS8 7
        REQUIRE `?<Initializer for <Constant "048820">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048821">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048822">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048823">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048824">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048825">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048826">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048829">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048828">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048831">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "048830">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE3001">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE3002">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE3003">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2005">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2001">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2002">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2003">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2004">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE3005">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2007">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "BMSE2006">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "0">`:
        DS8 2
        REQUIRE `?<Initializer for <Constant "0">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "1">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "2">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "3">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "4">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "5">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "6">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "7">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "8">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "9">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "A">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "B">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "C">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "D">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "E">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "F">>`
        DS8 8
        REQUIRE `?<Initializer for <Constant "Confirm">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "Delete">>`
        DS8 5
        REQUIRE `?<Initializer for <Constant "Next">>`
        DS8 7
        REQUIRE `?<Initializer for <Constant "  PnG ">>`
        DS8 10
        REQUIRE `?<Initializer for <Constant "     Lux:">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "1    2    3     "`
        DS8 17
        REQUIRE `?<Initializer for <Constant "4    5    6     "`
        DS8 17
        REQUIRE `?<Initializer for <Constant "7    8    9     "`
        DS8 17
        REQUIRE `?<Initializer for <Constant "     0          "`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200014214000001"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200014210000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D2000142140000FF"`
        DS8 6
        REQUIRE `?<Initializer for <Constant "     ">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant " ">>`
        DS8 2
        REQUIRE `?<Initializer for <Constant "_">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "Delivery Station"`
        DS8 10
        REQUIRE `?<Initializer for <Constant "Input ID:">>`
        DS8 10
        REQUIRE `?<Initializer for <Constant "   Infor:">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "1    2    3    A"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "4    5    6    B"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "7    8    9    C"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "E    0    F    D"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200014280000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200014282000000"`
        DS8 14
        REQUIRE `?<Initializer for <Constant "ID Programmed">>`
        DS8 14
        REQUIRE `?<Initializer for <Constant "             ">>`
        DS8 10
        REQUIRE `?<Initializer for <Constant "   Input:">>`
        DS8 11
        REQUIRE `?<Initializer for <Constant "          ">>`
        DS8 10
        REQUIRE `?<Initializer for <Constant "   Frame:">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "        ">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D000010600000000"`
        DS8 9
        REQUIRE `?<Initializer for <Constant "FFFFFFFF">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D000010300000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20101428C0000FF"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20101428B00A801"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20101428C0000AA"`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "Dec 11 2009">`:
        DS8 12
        REQUIRE `?<Initializer for <Constant "Dec 11 2009">>`
        DS8 9
        REQUIRE `?<Initializer for <Constant "23:24:26">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D20101428D020101">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20101428D020101"`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
key_initial:
        DS8 256
        REQUIRE `?<Initializer for key_initial>`
        DS8 4
        REQUIRE `?<Initializer for weigth>`
        DS8 4
        REQUIRE `?<Initializer for height>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
base:
        DS8 4
        REQUIRE `?<Initializer for base>`
        DS8 4
        REQUIRE `?<Initializer for top>`
//  334 
//  335 unsigned int cur_x,cur_y;
cur_x:
        DS8 2
        REQUIRE `?<Initializer for cur_x>`
cur_y:
        DS8 2
        REQUIRE `?<Initializer for cur_y>`

        RSEG CODE:CODE:NOROOT(1)
//  336 unsigned char get_touch_key(void)
get_touch_key:
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function get_touch_key
//  337 {
        CALL    ?PROLOGUE8_L09
        CFI R7 Frame(CFA_Y, -1)
        CFI R6 Frame(CFA_Y, -2)
        CFI R5 Frame(CFA_Y, -3)
        CFI R4 Frame(CFA_Y, -4)
        CFI R27 Frame(CFA_Y, -5)
        CFI R26 Frame(CFA_Y, -6)
        CFI R25 Frame(CFA_Y, -7)
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
//  338 	unsigned char i;
//  339 
//  340 	if((avg_x > base && avg_x <top) && (avg_y > base && avg_y < top))
        LDS     R16, avg_x
        LDS     R17, (avg_x + 1)
        LDI     R18, 0
        LDI     R19, 0
        LDI     R26, LOW(base)
        LDI     R27, (base) >> 8
        LD      R20, X+
        LD      R21, X+
        LD      R22, X+
        LD      R23, X
        SBIW    R27:R26, 3
        CP      R20, R16
        CPC     R21, R17
        CPC     R22, R18
        CPC     R23, R18
        BRCC    ??get_touch_key_0
        MOVW    R31:R30, R27:R26
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??get_touch_key_0
        LDS     R16, avg_y
        LDS     R17, (avg_y + 1)
        LD      R0, X+
        LD      R1, X+
        LD      R2, X+
        LD      R3, X
        SBIW    R27:R26, 3
        CP      R0, R16
        CPC     R1, R17
        CPC     R2, R18
        CPC     R3, R18
        BRCC    ??get_touch_key_0
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??get_touch_key_0
//  341 	{
//  342 		cur_x = top - avg_x;
        MOVW    R17:R16, R21:R20
        LDS     R18, avg_x
        LDS     R19, (avg_x + 1)
        SUB     R16, R18
        SBC     R17, R19
        STD     Z+8, R16
        STD     Z+9, R17
//  343 		cur_y = top - avg_y;
        LDS     R16, avg_y
        LDS     R17, (avg_y + 1)
        SUB     R20, R16
        SBC     R21, R17
        STD     Z+10, R20
        STD     Z+11, R21
//  344 		asm("nop");
        nop
//  345 	}
//  346 	
//  347 	for(i=0;i<16;i++)
??get_touch_key_0:
        LDI     R21, 0
        RJMP    ??get_touch_key_1
??get_touch_key_2:
        INC     R21
??get_touch_key_1:
        MOVW    R31:R30, R27:R26
        LDD     R0, Z+8
        LDD     R1, Z+9
        CLR     R2
        CLR     R3
        LDI     R18, LOW(key)
        LDI     R19, (key) >> 8
        CPI     R21, 16
        BRCC    ??get_touch_key_3
//  348 	{
//  349 		if(cur_x > key[i].x1 && cur_x < key[i].x2)
        MOV     R16, R21
        LDI     R17, 0
        LDI     R20, 4
        CALL    ?S_SHL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R31:R30, R19:R18
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CP      R16, R0
        CPC     R17, R1
        CPC     R18, R2
        CPC     R19, R2
        BRCC    ??get_touch_key_2
        LDD     R16, Z+8
        LDD     R17, Z+9
        LDD     R18, Z+10
        LDD     R19, Z+11
        CP      R0, R16
        CPC     R1, R17
        CPC     R2, R18
        CPC     R3, R19
        BRCC    ??get_touch_key_2
        ADIW    R27:R26, 10
        LD      R16, X+
        LD      R17, X
        SBIW    R27:R26, 11
        LDI     R18, 0
        LDI     R19, 0
        LDD     R0, Z+4
        LDD     R1, Z+5
        LDD     R2, Z+6
        LDD     R3, Z+7
        CP      R0, R16
        CPC     R1, R17
        CPC     R2, R18
        CPC     R3, R18
        BRCC    ??get_touch_key_2
        LDD     R0, Z+12
        LDD     R1, Z+13
        LDD     R2, Z+14
        LDD     R3, Z+15
        CP      R16, R0
        CPC     R17, R1
        CPC     R18, R2
        CPC     R19, R3
        BRCC    ??get_touch_key_2
//  350 		{
//  351 			if(cur_y > key[i].y1 && cur_y <key[i].y2)
//  352 			{
//  353 				return i;
        MOV     R16, R21
        RJMP    ??get_touch_key_4
//  354 			}
//  355 		}
//  356 	}
//  357 	
//  358 	if(cur_x > key[13].x1 && cur_y > key[13].y2)
??get_touch_key_3:
        LDI     R30, ((key + 208) & 0xff) & 0xFF
        LDI     R31, (((key + 208) >> 8) & 0xff) & 0xFF
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R20, R0
        CPC     R21, R1
        CPC     R22, R2
        CPC     R23, R2
        BRCC    ??get_touch_key_5
        LDD     R20, Z+12
        LDD     R21, Z+13
        LDD     R22, Z+14
        LDD     R23, Z+15
        MOVW    R31:R30, R27:R26
        LDD     R4, Z+10
        LDD     R5, Z+11
        CP      R20, R4
        CPC     R21, R5
        CPC     R22, R2
        CPC     R23, R2
        BRCC    ??get_touch_key_5
//  359 		return 16;
        LDI     R16, 16
        RJMP    ??get_touch_key_4
//  360 	
//  361 	if(cur_x < key[14].x2 && cur_y > key[14].y2)
??get_touch_key_5:
        LDI     R30, ((key + 208) & 0xff) & 0xFF
        LDI     R31, (((key + 208) >> 8) & 0xff) & 0xFF
        LDD     R20, Z+24
        LDD     R21, Z+25
        LDD     R22, Z+26
        LDD     R23, Z+27
        CP      R0, R20
        CPC     R1, R21
        CPC     R2, R22
        CPC     R3, R23
        BRCC    ??get_touch_key_6
        LDD     R20, Z+28
        LDD     R21, Z+29
        LDD     R22, Z+30
        LDD     R23, Z+31
        MOVW    R31:R30, R27:R26
        LDD     R4, Z+10
        LDD     R5, Z+11
        CP      R20, R4
        CPC     R21, R5
        CPC     R22, R2
        CPC     R23, R2
        BRCC    ??get_touch_key_6
//  362 		return 17;
        LDI     R16, 17
        RJMP    ??get_touch_key_4
//  363 	
//  364 	//if(cur_x > key[0].x1 && cur_x < key[0].x2 && cur_y > key[0].y2 && Menu_status == 0x02)		//alan
//  365 	//	return 18;
//  366 	
//  367 	if(cur_x > (key[0].x1+key[0].x2)/2 && cur_x < (key[15].x1+key[15].x2)/2 && cur_y > key[15].y2 && Menu_status == 0x02)	//alan
??get_touch_key_6:
        MOVW    R31:R30, R19:R18
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        LDD     R4, Z+8
        LDD     R5, Z+9
        LDD     R6, Z+10
        LDD     R7, Z+11
        ADD     R20, R4
        ADC     R21, R5
        ADC     R22, R6
        ADC     R23, R7
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        CP      R20, R0
        CPC     R21, R1
        CPC     R22, R2
        CPC     R23, R2
        BRCC    ??get_touch_key_7
        LDI     R30, ((key + 208) & 0xff) & 0xFF
        LDI     R31, (((key + 208) >> 8) & 0xff) & 0xFF
        LDD     R20, Z+32
        LDD     R21, Z+33
        LDD     R22, Z+34
        LDD     R23, Z+35
        LDD     R4, Z+40
        LDD     R5, Z+41
        LDD     R6, Z+42
        LDD     R7, Z+43
        ADD     R20, R4
        ADC     R21, R5
        ADC     R22, R6
        ADC     R23, R7
        LSR     R23
        ROR     R22
        ROR     R21
        ROR     R20
        CP      R0, R20
        CPC     R1, R21
        CPC     R2, R22
        CPC     R3, R23
        BRCC    ??get_touch_key_7
        LDD     R20, Z+44
        LDD     R21, Z+45
        LDD     R22, Z+46
        LDD     R23, Z+47
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+10
        LDD     R17, Z+11
        CP      R20, R16
        CPC     R21, R17
        CPC     R22, R2
        CPC     R23, R2
        BRCC    ??get_touch_key_7
        LDS     R16, Menu_status
        CPI     R16, 2
        BRNE    ??get_touch_key_7
//  368 		return 19;
        LDI     R16, 19
        RJMP    ??get_touch_key_4
//  369 	
//  370 	return 0xFF;
??get_touch_key_7:
        LDI     R16, 255
??get_touch_key_4:
        LDI     R30, 8
        JMP     ?EPILOGUE_B8_L09
        CFI EndBlock cfiBlock8
//  371 }
//  372 
//  373 

        RSEG CODE:CODE:NOROOT(1)
//  374 unsigned char get_touch_menu_00(void)
get_touch_menu_00:
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function get_touch_menu_00
//  375 {
//  376 	if((avg_x > base && avg_x <top) && (avg_y > base && avg_y < top))
        LDS     R16, avg_x
        LDS     R17, (avg_x + 1)
        LDI     R18, 0
        LDI     R19, 0
        LDI     R30, LOW(base)
        LDI     R31, (base) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R20, R16
        CPC     R21, R17
        CPC     R22, R18
        CPC     R23, R18
        BRCC    ??get_touch_menu_00_0
        LDD     R20, Z+4
        LDD     R21, Z+5
        LDD     R22, Z+6
        LDD     R23, Z+7
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??get_touch_menu_00_0
        LDS     R16, avg_y
        LDS     R17, (avg_y + 1)
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        CP      R0, R16
        CPC     R1, R17
        CPC     R2, R18
        CPC     R3, R18
        BRCC    ??get_touch_menu_00_0
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??get_touch_menu_00_0
//  377 	{
//  378 		cur_x = top - avg_x;
        MOVW    R17:R16, R21:R20
        LDS     R18, avg_x
        LDS     R19, (avg_x + 1)
        SUB     R16, R18
        SBC     R17, R19
        STD     Z+8, R16
        STD     Z+9, R17
//  379 		cur_y = top - avg_y;
        LDS     R16, avg_y
        LDS     R17, (avg_y + 1)
        SUB     R20, R16
        SBC     R21, R17
        STD     Z+10, R20
        STD     Z+11, R21
//  380 		asm("nop");
        nop
//  381 	}
//  382 	
//  383 	if(cur_y > 108 * 5 && cur_y < 108 * 6)
??get_touch_menu_00_0:
        LDD     R16, Z+10
        LDD     R17, Z+11
        CPI     R16, 29
        LDI     R18, 2
        CPC     R17, R18
        BRCS    ??get_touch_menu_00_1
        CPI     R16, 136
        CPC     R17, R18
        BRCC    ??get_touch_menu_00_1
//  384 	{
//  385 		return 0;
        LDI     R16, 0
        RET
//  386 	}
//  387 	else if(cur_y > 108 * 8 && cur_y < 108 * 9)
??get_touch_menu_00_1:
        CPI     R16, 97
        LDI     R18, 3
        CPC     R17, R18
        BRCS    ??get_touch_menu_00_2
        CPI     R16, 204
        CPC     R17, R18
        BRCC    ??get_touch_menu_00_2
//  388 	{
//  389 		return 1;
        LDI     R16, 1
        RET
//  390 	}
//  391 	else if(cur_y > 108 * 11 && cur_y < 108 * 12)
??get_touch_menu_00_2:
        CPI     R16, 165
        LDI     R18, 4
        CPC     R17, R18
        BRCS    ??get_touch_menu_00_3
        CPI     R16, 16
        LDI     R18, 5
        CPC     R17, R18
        BRCC    ??get_touch_menu_00_3
//  392 	{
//  393 		return 2;
        LDI     R16, 2
        RET
//  394 	}
//  395 	
//  396 	return 0xFF;
??get_touch_menu_00_3:
        LDI     R16, 255
        RET
        CFI EndBlock cfiBlock9
//  397 }
//  398 

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//  399 volatile unsigned char g_buffer_tx[17] = "D000010200000000";
g_buffer_tx:
        DS8 17
        REQUIRE `?<Initializer for g_buffer_tx>`

        RSEG CODE:CODE:NOROOT(1)
//  400 void id_setting(unsigned char *data)
id_setting:
        CFI Block cfiBlock10 Using cfiCommon1
        CFI Function id_setting
//  401 {
//  402 	//volatile unsigned char buffer_tx[17] = "D000010200000000";
//  403 	//volatile unsigned char buffer2_tx[17] = "D000010500000000";
//  404 	g_buffer_tx[7] = '2';
        FUNCALL id_setting, strncpy
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_setting, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_setting, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R18, 50
        STS     (g_buffer_tx + 7), R18
//  405 	strncpy(&g_buffer_tx[8],data,9);
        LDI     R20, 9
        LDI     R21, 0
        MOVW    R19:R18, R17:R16
        LDI     R16, LOW((g_buffer_tx + 8))
        LDI     R17, HIGH((g_buffer_tx + 8))
        CALL    strncpy
//  406 	//strncpy(&buffer2_tx[8],data,9);
//  407 	
//  408 	send_frame_pp_ext_broad(g_buffer_tx,500);
        LDI     R18, 244
        LDI     R19, 1
        LDI     R16, LOW(g_buffer_tx)
        LDI     R17, (g_buffer_tx) >> 8
        CALL    send_frame_pp_ext_broad
//  409 	
//  410 	g_buffer_tx[7] = '5';
        LDI     R16, 53
        STS     (g_buffer_tx + 7), R16
//  411 	send_frame_pp_ext_broad(g_buffer_tx,200);
        LDI     R18, 200
        LDI     R19, 0
        LDI     R16, LOW(g_buffer_tx)
        LDI     R17, (g_buffer_tx) >> 8
        CALL    send_frame_pp_ext_broad
//  412 }
        RET
        CFI EndBlock cfiBlock10
//  413 

        RSEG CODE:CODE:NOROOT(1)
//  414 void id_setting_ee(unsigned char __eeprom *data)
id_setting_ee:
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function id_setting_ee
//  415 {
//  416 	//volatile unsigned char buffer_tx[17] = "D000010200000000";
//  417 	//volatile unsigned char buffer2_tx[17] = "D000010500000000";
//  418 	g_buffer_tx[7] = '2';
        FUNCALL id_setting_ee, strncpy
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_setting_ee, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_setting_ee, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R18, 50
        STS     (g_buffer_tx + 7), R18
//  419 	strncpy(&g_buffer_tx[8],data,9);
        LDI     R20, 9
        LDI     R21, 0
        MOVW    R19:R18, R17:R16
        LDI     R16, LOW((g_buffer_tx + 8))
        LDI     R17, HIGH((g_buffer_tx + 8))
        CALL    strncpy
//  420 	//strncpy(&buffer2_tx[8],data,9);
//  421 	
//  422 	send_frame_pp_ext_broad(g_buffer_tx,500);
        LDI     R18, 244
        LDI     R19, 1
        LDI     R16, LOW(g_buffer_tx)
        LDI     R17, (g_buffer_tx) >> 8
        CALL    send_frame_pp_ext_broad
//  423 	
//  424 	g_buffer_tx[7] = '5';
        LDI     R16, 53
        STS     (g_buffer_tx + 7), R16
//  425 	send_frame_pp_ext_broad(g_buffer_tx,200);
        LDI     R18, 200
        LDI     R19, 0
        LDI     R16, LOW(g_buffer_tx)
        LDI     R17, (g_buffer_tx) >> 8
        CALL    send_frame_pp_ext_broad
//  426 }
        RET
        CFI EndBlock cfiBlock11
//  427 

        RSEG CODE:CODE:NOROOT(1)
//  428 void touch_key_blink(unsigned char index,unsigned int ms)
touch_key_blink:
        CFI Block cfiBlock12 Using cfiCommon1
        CFI Function touch_key_blink
//  429 {
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        MOVW    R25:R24, R19:R18
//  430 	switch(index)
        LDI     R30, LOW(`?<Jumptable for touch_key_blink>_0`)
        LDI     R31, (`?<Jumptable for touch_key_blink>_0`) >> 8
        JMP     ?CV_SWITCH_L06
//  431 	{
//  432 	case 0:
//  433 		LCD_distring("0", 20, 120, 1);
??touch_key_blink_0:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        CALL    LCD_distring
//  434 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  435 		LCD_distring("0", 20, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        RJMP    ??touch_key_blink_1
//  436 		break;
//  437 		
//  438 	case 1:
//  439 		LCD_distring("1", 10, 48, 1);
??touch_key_blink_2:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        CALL    LCD_distring
//  440 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  441 		LCD_distring("1", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        RJMP    ??touch_key_blink_1
//  442 		break;
//  443 		
//  444 	case 2:
//  445 		LCD_distring("2", 20, 48, 1);
??touch_key_blink_3:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        CALL    LCD_distring
//  446 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  447 		LCD_distring("2", 20, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        RJMP    ??touch_key_blink_1
//  448 		break;
//  449 		
//  450 	case 3:
//  451 		LCD_distring("3", 30, 48, 1);
??touch_key_blink_4:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        CALL    LCD_distring
//  452 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  453 		LCD_distring("3", 30, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        RJMP    ??touch_key_blink_1
//  454 		break;
//  455 		
//  456 	case 4:
//  457 		LCD_distring("4", 10, 72, 1);
??touch_key_blink_5:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        CALL    LCD_distring
//  458 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  459 		LCD_distring("4", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        RJMP    ??touch_key_blink_1
//  460 		break;
//  461 		
//  462 	case 5:
//  463 		LCD_distring("5", 20, 72, 1);
??touch_key_blink_6:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        CALL    LCD_distring
//  464 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  465 		LCD_distring("5", 20, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        RJMP    ??touch_key_blink_1
//  466 		break;
//  467 		
//  468 	case 6:
//  469 		LCD_distring("6", 30, 72, 1);
??touch_key_blink_7:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        CALL    LCD_distring
//  470 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  471 		LCD_distring("6", 30, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        RJMP    ??touch_key_blink_1
//  472 		break;
//  473 		
//  474 	case 7:
//  475 		LCD_distring("7", 10, 96, 1);
??touch_key_blink_8:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        CALL    LCD_distring
//  476 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  477 		LCD_distring("7", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        RJMP    ??touch_key_blink_1
//  478 		break;
//  479 		
//  480 	case 8:
//  481 		LCD_distring("8", 20, 96, 1);
??touch_key_blink_9:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        CALL    LCD_distring
//  482 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  483 		LCD_distring("8", 20, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        RJMP    ??touch_key_blink_1
//  484 		break;
//  485 		
//  486 	case 9:
//  487 		LCD_distring("9", 30, 96, 1);
??touch_key_blink_10:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        CALL    LCD_distring
//  488 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  489 		LCD_distring("9", 30, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        RJMP    ??touch_key_blink_1
//  490 		break;
//  491 		
//  492 	case 10:
//  493 		LCD_distring("A", 40, 48, 1);
??touch_key_blink_11:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 20))
        LDI     R17, HIGH((`?<Constant "0">` + 20))
        CALL    LCD_distring
//  494 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  495 		LCD_distring("A", 40, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 20))
        LDI     R17, HIGH((`?<Constant "0">` + 20))
        RJMP    ??touch_key_blink_1
//  496 		break;
//  497 		
//  498 	case 11:
//  499 		LCD_distring("B", 40, 72, 1);
??touch_key_blink_12:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 22))
        LDI     R17, HIGH((`?<Constant "0">` + 22))
        CALL    LCD_distring
//  500 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  501 		LCD_distring("B", 40, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 22))
        LDI     R17, HIGH((`?<Constant "0">` + 22))
        RJMP    ??touch_key_blink_1
//  502 		break;
//  503 		
//  504 	case 12:
//  505 		LCD_distring("C", 40, 96, 1);
??touch_key_blink_13:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 24))
        LDI     R17, HIGH((`?<Constant "0">` + 24))
        CALL    LCD_distring
//  506 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  507 		LCD_distring("C", 40, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 24))
        LDI     R17, HIGH((`?<Constant "0">` + 24))
        RJMP    ??touch_key_blink_1
//  508 		break;
//  509 		
//  510 	case 13:
//  511 		LCD_distring("D", 40, 120, 1);
??touch_key_blink_14:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 26))
        LDI     R17, HIGH((`?<Constant "0">` + 26))
        CALL    LCD_distring
//  512 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  513 		LCD_distring("D", 40, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 40
        LDI     R16, LOW((`?<Constant "0">` + 26))
        LDI     R17, HIGH((`?<Constant "0">` + 26))
        RJMP    ??touch_key_blink_1
//  514 		break;
//  515 		
//  516 	case 14:
//  517 		LCD_distring("E", 10, 120, 1);
??touch_key_blink_15:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 28))
        LDI     R17, HIGH((`?<Constant "0">` + 28))
        CALL    LCD_distring
//  518 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  519 		LCD_distring("E", 10, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 28))
        LDI     R17, HIGH((`?<Constant "0">` + 28))
        RJMP    ??touch_key_blink_1
//  520 		break;
//  521 		
//  522 	case 15:
//  523 		LCD_distring("F", 30, 120, 1);
??touch_key_blink_16:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 30))
        LDI     R17, HIGH((`?<Constant "0">` + 30))
        CALL    LCD_distring
//  524 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  525 		LCD_distring("F", 30, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 30))
        LDI     R17, HIGH((`?<Constant "0">` + 30))
        RJMP    ??touch_key_blink_1
//  526 		break;
//  527 		
//  528 	case 16:
//  529 		LCD_distring("Confirm", 36, 140, 1);
??touch_key_blink_17:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        CALL    LCD_distring
//  530 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  531 		LCD_distring("Confirm", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        RJMP    ??touch_key_blink_1
//  532 		break;
//  533 		
//  534 	case 17:
//  535 		LCD_distring("Delete", 2, 140, 1);
??touch_key_blink_18:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
//  536 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  537 		LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        RJMP    ??touch_key_blink_1
//  538 		break;
//  539 	//case 18:
//  540 	//	LCD_distring("Retry", 18, 140, 1);
//  541 	//	delay_ms(ms);
//  542 	//	LCD_distring("Retry", 18, 140, 0);
//  543 	//	break;
//  544 	case 19:
//  545 		LCD_distring("Next", 22, 140, 1);
??touch_key_blink_19:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
        CALL    LCD_distring
//  546 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  547 		LCD_distring("Next", 22, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
??touch_key_blink_1:
        CALL    LCD_distring
//  548 		break;	
//  549 		
//  550 	default:break;
//  551 	}
//  552 }
??touch_key_blink_20:
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock12
//  553 

        RSEG CODE:CODE:NOROOT(1)
//  554 void touch_key_blink_01(unsigned char index,unsigned int ms)
touch_key_blink_01:
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function touch_key_blink_01
//  555 {
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_01, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        MOVW    R25:R24, R19:R18
//  556 	switch(index)
        LDI     R30, LOW(`?<Jumptable for touch_key_blink_01>_0`)
        LDI     R31, (`?<Jumptable for touch_key_blink_01>_0`) >> 8
        JMP     ?CV_SWITCH_L06
//  557 	{
//  558 	case 0:
//  559 		LCD_distring("0", 20, 120, 1);
??touch_key_blink_01_0:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        CALL    LCD_distring
//  560 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  561 		LCD_distring("0", 20, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        RJMP    ??touch_key_blink_01_1
//  562 		break;
//  563 		
//  564 	case 1:
//  565 		LCD_distring("1", 10, 48, 1);
??touch_key_blink_01_2:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        CALL    LCD_distring
//  566 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  567 		LCD_distring("1", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        RJMP    ??touch_key_blink_01_1
//  568 		break;
//  569 		
//  570 	case 2:
//  571 		LCD_distring("2", 20, 48, 1);
??touch_key_blink_01_3:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        CALL    LCD_distring
//  572 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  573 		LCD_distring("2", 20, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        RJMP    ??touch_key_blink_01_1
//  574 		break;
//  575 		
//  576 	case 3:
//  577 		LCD_distring("3", 30, 48, 1);
??touch_key_blink_01_4:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        CALL    LCD_distring
//  578 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  579 		LCD_distring("3", 30, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        RJMP    ??touch_key_blink_01_1
//  580 		break;
//  581 		
//  582 	case 4:
//  583 		LCD_distring("4", 10, 72, 1);
??touch_key_blink_01_5:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        CALL    LCD_distring
//  584 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  585 		LCD_distring("4", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        RJMP    ??touch_key_blink_01_1
//  586 		break;
//  587 		
//  588 	case 5:
//  589 		LCD_distring("5", 20, 72, 1);
??touch_key_blink_01_6:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        CALL    LCD_distring
//  590 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  591 		LCD_distring("5", 20, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        RJMP    ??touch_key_blink_01_1
//  592 		break;
//  593 		
//  594 	case 6:
//  595 		LCD_distring("6", 30, 72, 1);
??touch_key_blink_01_7:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        CALL    LCD_distring
//  596 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  597 		LCD_distring("6", 30, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        RJMP    ??touch_key_blink_01_1
//  598 		break;
//  599 		
//  600 	case 7:
//  601 		LCD_distring("7", 10, 96, 1);
??touch_key_blink_01_8:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        CALL    LCD_distring
//  602 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  603 		LCD_distring("7", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        RJMP    ??touch_key_blink_01_1
//  604 		break;
//  605 		
//  606 	case 8:
//  607 		LCD_distring("8", 20, 96, 1);
??touch_key_blink_01_9:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        CALL    LCD_distring
//  608 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  609 		LCD_distring("8", 20, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        RJMP    ??touch_key_blink_01_1
//  610 		break;
//  611 		
//  612 	case 9:
//  613 		LCD_distring("9", 30, 96, 1);
??touch_key_blink_01_10:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        CALL    LCD_distring
//  614 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  615 		LCD_distring("9", 30, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        RJMP    ??touch_key_blink_01_1
//  616 		break;
//  617 		
//  618 	case 16:
//  619 		LCD_distring("Confirm", 36, 140, 1);
??touch_key_blink_01_11:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        CALL    LCD_distring
//  620 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  621 		LCD_distring("Confirm", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        RJMP    ??touch_key_blink_01_1
//  622 		break;
//  623 		
//  624 	case 17:
//  625 		LCD_distring("Delete", 2, 140, 1);
??touch_key_blink_01_12:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
//  626 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  627 		LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        RJMP    ??touch_key_blink_01_1
//  628 		break;
//  629 		
//  630 	//case 18:
//  631 	//	LCD_distring("Retry", 12, 140, 1);
//  632 	//	delay_ms(ms);
//  633 	//	LCD_distring("Retry", 12, 140, 0);
//  634 	//	break;
//  635 	case 19:
//  636 		LCD_distring("Next", 22, 140, 1);
??touch_key_blink_01_13:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
        CALL    LCD_distring
//  637 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  638 		LCD_distring("Next", 22, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
??touch_key_blink_01_1:
        CALL    LCD_distring
//  639 		break;	
//  640 		
//  641 	default:break;
//  642 	}
//  643 }
??touch_key_blink_01_14:
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock13
//  644 

        RSEG CODE:CODE:NOROOT(1)
//  645 void touch_key_blink_02(unsigned char index,unsigned int ms)
touch_key_blink_02:
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function touch_key_blink_02
//  646 {
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, delay_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL touch_key_blink_02, LCD_distring
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        MOVW    R25:R24, R19:R18
//  647 	switch(index)
        LDI     R30, LOW(`?<Jumptable for touch_key_blink_02>_0`)
        LDI     R31, (`?<Jumptable for touch_key_blink_02>_0`) >> 8
        JMP     ?CV_SWITCH_L06
//  648 	{
//  649 	case 0:
//  650 		LCD_distring("0", 20, 120, 1);
??touch_key_blink_02_0:
        LDI     R20, 1
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        CALL    LCD_distring
//  651 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  652 		LCD_distring("0", 20, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 20
        LDI     R16, LOW(`?<Constant "0">`)
        LDI     R17, (`?<Constant "0">`) >> 8
        RJMP    ??touch_key_blink_02_1
//  653 		break;
//  654 		
//  655 	case 1:
//  656 		LCD_distring("1", 10, 48, 1);
??touch_key_blink_02_2:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        CALL    LCD_distring
//  657 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  658 		LCD_distring("1", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 2))
        LDI     R17, HIGH((`?<Constant "0">` + 2))
        RJMP    ??touch_key_blink_02_1
//  659 		break;
//  660 		
//  661 	case 2:
//  662 		LCD_distring("2", 20, 48, 1);
??touch_key_blink_02_3:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        CALL    LCD_distring
//  663 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  664 		LCD_distring("2", 20, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 4))
        LDI     R17, HIGH((`?<Constant "0">` + 4))
        RJMP    ??touch_key_blink_02_1
//  665 		break;
//  666 		
//  667 	case 3:
//  668 		LCD_distring("3", 30, 48, 1);
??touch_key_blink_02_4:
        LDI     R20, 1
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        CALL    LCD_distring
//  669 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  670 		LCD_distring("3", 30, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 6))
        LDI     R17, HIGH((`?<Constant "0">` + 6))
        RJMP    ??touch_key_blink_02_1
//  671 		break;
//  672 		
//  673 	case 4:
//  674 		LCD_distring("4", 10, 72, 1);
??touch_key_blink_02_5:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        CALL    LCD_distring
//  675 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  676 		LCD_distring("4", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 8))
        LDI     R17, HIGH((`?<Constant "0">` + 8))
        RJMP    ??touch_key_blink_02_1
//  677 		break;
//  678 		
//  679 	case 5:
//  680 		LCD_distring("5", 20, 72, 1);
??touch_key_blink_02_6:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        CALL    LCD_distring
//  681 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  682 		LCD_distring("5", 20, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 10))
        LDI     R17, HIGH((`?<Constant "0">` + 10))
        RJMP    ??touch_key_blink_02_1
//  683 		break;
//  684 		
//  685 	case 6:
//  686 		LCD_distring("6", 30, 72, 1);
??touch_key_blink_02_7:
        LDI     R20, 1
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        CALL    LCD_distring
//  687 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  688 		LCD_distring("6", 30, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 12))
        LDI     R17, HIGH((`?<Constant "0">` + 12))
        RJMP    ??touch_key_blink_02_1
//  689 		break;
//  690 		
//  691 	case 7:
//  692 		LCD_distring("7", 10, 96, 1);
??touch_key_blink_02_8:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        CALL    LCD_distring
//  693 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  694 		LCD_distring("7", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 14))
        LDI     R17, HIGH((`?<Constant "0">` + 14))
        RJMP    ??touch_key_blink_02_1
//  695 		break;
//  696 		
//  697 	case 8:
//  698 		LCD_distring("8", 20, 96, 1);
??touch_key_blink_02_9:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        CALL    LCD_distring
//  699 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  700 		LCD_distring("8", 20, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 16))
        LDI     R17, HIGH((`?<Constant "0">` + 16))
        RJMP    ??touch_key_blink_02_1
//  701 		break;
//  702 		
//  703 	case 9:
//  704 		LCD_distring("9", 30, 96, 1);
??touch_key_blink_02_10:
        LDI     R20, 1
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        CALL    LCD_distring
//  705 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  706 		LCD_distring("9", 30, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 30
        LDI     R16, LOW((`?<Constant "0">` + 18))
        LDI     R17, HIGH((`?<Constant "0">` + 18))
        RJMP    ??touch_key_blink_02_1
//  707 		break;
//  708 		
//  709 	case 16:
//  710 		LCD_distring("  PnG ", 36, 140, 1);
??touch_key_blink_02_11:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 52))
        LDI     R17, HIGH((`?<Constant "0">` + 52))
        CALL    LCD_distring
//  711 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  712 		LCD_distring("  PnG ", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 52))
        LDI     R17, HIGH((`?<Constant "0">` + 52))
        RJMP    ??touch_key_blink_02_1
//  713 		break;
//  714 		
//  715 	case 17:
//  716 		LCD_distring("Delete", 2, 140, 1);
??touch_key_blink_02_12:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
//  717 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  718 		LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        RJMP    ??touch_key_blink_02_1
//  719 		break;
//  720 		
//  721 	//case 18:
//  722 	//	LCD_distring("Retry", 12, 140, 1);
//  723 	//	delay_ms(ms);
//  724 	//	LCD_distring("Retry", 12, 140, 0);
//  725 	//	break;
//  726 	case 19:
//  727 		LCD_distring("Next", 22, 140, 1);
??touch_key_blink_02_13:
        LDI     R20, 1
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
        CALL    LCD_distring
//  728 		delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  729 		LCD_distring("Next", 22, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
??touch_key_blink_02_1:
        CALL    LCD_distring
//  730 		break;	
//  731 		
//  732 	default:break;
//  733 	}
//  734 }
??touch_key_blink_02_14:
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock14
//  735 

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D200014210000000">_1`:
        DC8 "D200014210000000"
//  736 __flash const unsigned char calibration[] = "Calibration Station";
calibration:
        DC8 "Calibration Station"
//  737 __flash const unsigned char Delivery[] = "Delivery Station";
Delivery:
        DC8 "Delivery Station"
//  738 __flash const unsigned char Test[] = "Test Functionality";
Test:
        DC8 "Test Functionality"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "00W00">`:
        DC8 "00W00"

        RSEG NEAR_F:CODE:NOROOT(0)
label_1:
        DC8 5EH, 58H, 41H, 7EH, 54H, 41H, 30H, 7EH
        DC8 4AH, 53H, 4FH, 5EH, 4CH, 54H, 30H, 5EH
        DC8 4DH, 4DH, 54H, 5EH, 4DH, 4EH, 57H, 5EH
        DC8 4DH, 54H, 54H, 5EH, 50H, 4FH, 4EH, 5EH
        DC8 50H, 4DH, 4EH, 5EH, 4CH, 48H, 30H, 2CH
        DC8 30H, 5EH, 4AH, 4DH, 41H, 5EH, 50H, 52H
        DC8 32H, 2CH, 32H, 5EH, 4DH, 44H, 33H, 30H
        DC8 5EH, 4AH, 55H, 53H, 5EH, 4CH, 52H, 4EH
        DC8 5EH, 43H, 49H, 30H, 5EH, 58H, 5AH, 7EH
        DC8 44H, 47H, 30H, 30H, 31H, 2EH, 47H, 52H
        DC8 46H, 2CH, 30H, 30H, 37H, 36H, 38H, 2CH
        DC8 30H, 31H, 32H, 2CH, 2CH, 3AH, 3AH, 3AH
        DC8 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH
        DC8 3AH, 3AH, 55H, 30H, 43H, 2CH, 54H, 30H
        DC8 32H, 34H, 2CH, 54H, 30H, 48H, 34H, 2CH
        DC8 54H, 30H, 38H, 32H, 2CH, 53H, 30H, 31H
        DC8 30H, 32H, 2CH, 53H, 30H, 34H, 30H, 31H
        DC8 2CH, 53H, 30H, 43H, 30H, 31H, 2CH, 4EH
        DC8 30H, 33H, 46H, 45H, 30H, 31H, 30H, 48H
        DC8 30H, 38H, 30H, 2CH, 4CH, 30H, 31H, 43H
        DC8 30H, 48H, 30H, 31H, 36H, 30H, 48H, 30H
        DC8 38H, 30H, 2CH, 4BH, 30H, 31H, 38H, 30H
        DC8 2CH, 4BH, 30H, 43H, 30H, 4FH, 30H, 34H
        DC8 30H, 2CH, 4AH, 30H, 32H, 30H, 2CH, 4AH
        DC8 30H, 43H, 30H, 50H, 30H, 32H, 30H, 2CH
        DC8 49H, 30H, 32H, 30H, 51H, 30H, 45H, 30H
        DC8 2CH, 49H, 30H, 34H, 30H, 4EH, 30H, 34H
        DC8 30H, 37H, 2CH, 49H, 30H, 38H, 30H, 4FH
        DC8 30H, 33H, 30H, 2CH, 48H, 30H, 31H, 30H
        DC8 4FH, 30H, 31H, 38H, 30H, 2CH, 48H, 30H
        DC8 32H, 30H, 48H, 30H, 33H, 38H, 30H, 30H
        DC8 38H, 30H, 31H, 38H, 2CH, 48H, 30H, 34H
        DC8 30H, 30H, 37H, 30H, 48H, 30H, 31H, 34H
        DC8 30H, 34H, 30H, 2CH, 48H, 30H, 38H, 30H
        DC8 31H, 38H, 30H, 48H, 30H, 32H, 30H, 36H
        DC8 2CH, 48H, 30H, 38H, 30H, 34H, 30H, 49H
        DC8 30H, 48H, 34H, 30H, 2CH, 30H, 31H, 30H
        DC8 33H, 30H, 4AH, 30H, 41H, 2CH, 30H, 35H
        DC8 30H, 34H, 30H, 49H, 30H, 31H, 30H, 2CH
        DC8 30H, 32H, 31H, 30H, 2CH, 30H, 32H, 32H
        DC8 30H, 2CH, 30H, 32H, 34H, 30H, 2CH, 30H
        DC8 34H, 43H, 30H, 2CH, 30H, 35H, 2CH, 3AH
        DC8 30H, 36H, 2CH, 30H, 34H, 2CH, 2CH, 3AH
        DC8 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH
        DC8 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH, 3AH
        DC8 3AH, 5EH, 58H, 41H, 5EH, 4CH, 4CH, 30H
        DC8 31H, 32H, 30H, 5EH, 50H, 57H, 32H, 39H
        DC8 36H, 5EH, 46H, 54H, 31H, 36H, 30H, 2CH
        DC8 36H, 34H, 5EH, 58H, 47H, 30H, 30H, 31H
        DC8 2EH, 47H, 52H, 46H, 2CH, 31H, 2CH, 31H
        DC8 5EH, 46H, 53H, 5EH, 42H, 59H, 33H, 36H
        DC8 2CH, 33H, 36H, 5EH, 46H, 54H, 32H, 35H
        DC8 30H, 2CH, 35H, 39H, 5EH, 42H, 58H, 4EH
        DC8 2CH, 32H, 2CH, 32H, 30H, 30H, 2CH, 30H
        DC8 2CH, 30H, 2CH, 31H, 0
label_2:
        DC8 "^FS^FO,26^FS^FT165,66^A0N,21,19^FH\\^FD"
label_3:
        DC8 "^FS^FO,31^FS^FT165,96^A0N,25,24^FH\\^FDID:"
label_4:
        DC8 "^FS^BY48,48^FT55,98^BXB,2,200,0,0,1^FH\\^FD"
label_5:
        DC8 "^FS^FO,22^FS^FT126,98^A0B,18,16^FH\\^FDID:"
label_6:
        DC8 "^FS^FO,21^FS^FT109,98^A0B,17,16^FH\\^FD"
label_7:
        DC8 "^FS^FO,21^FS^FT76,98^A0B,17,16^FH\\^FD"
label_8:
        DC8 "^FS^FO,22^FS^FT93,98^A0B,17,16^FH\\^FD"
label_9:
        DC8 " 007^FS^PQ1,0,1,Y^XZ^XA^ID000.GRF^FS^XZ"

        RSEG CODE:CODE:NOROOT(1)
//  739 void menu_00(void)
menu_00:
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function menu_00
//  740 {
//  741 	LCD_distring(__DATE__, 28, 0, 0);
        FUNCALL menu_00, LCD_distring
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_00, LCD_distring
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_00, LCD_distring_V2
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_00, LCD_distring_V2
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_00, LCD_distring_V2
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R20, 0
        LDI     R19, 0
        LDI     R18, 28
        LDI     R16, LOW(`?<Constant "Dec 11 2009">`)
        LDI     R17, (`?<Constant "Dec 11 2009">`) >> 8
        CALL    LCD_distring
//  742 	LCD_distring(__TIME__, 28,12, 0);
        LDI     R20, 0
        LDI     R19, 12
        LDI     R18, 28
        LDI     R16, LOW((`?<Constant "Dec 11 2009">` + 12))
        LDI     R17, HIGH((`?<Constant "Dec 11 2009">` + 12))
        CALL    LCD_distring
//  743 	LCD_distring_V2(calibration, 8, 50, 0);
        LDI     R20, 0
        LDI     R19, 50
        LDI     R18, 8
        LDI     R16, LOW((`?<Constant "D200014210000000">_1` + 17))
        LDI     R17, HIGH((`?<Constant "D200014210000000">_1` + 17))
        CALL    LCD_distring_V2
//  744 	LCD_distring_V2(Delivery, 10, 80, 0);
        LDI     R20, 0
        LDI     R19, 80
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "D200014210000000">_1` + 37))
        LDI     R17, HIGH((`?<Constant "D200014210000000">_1` + 37))
        CALL    LCD_distring_V2
//  745 	LCD_distring_V2(Test, 8, 110, 0);
        LDI     R20, 0
        LDI     R19, 110
        LDI     R18, 8
        LDI     R16, LOW((`?<Constant "D200014210000000">_1` + 54))
        LDI     R17, HIGH((`?<Constant "D200014210000000">_1` + 54))
        CALL    LCD_distring_V2
//  746 }
        RET
        CFI EndBlock cfiBlock15
//  747 

        RSEG CODE:CODE:NOROOT(1)
//  748 void menu_01(void)
menu_01:
        CFI Block cfiBlock16 Using cfiCommon1
        CFI Function menu_01
//  749 {
        FUNCALL menu_01, LCD_distring_V2
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, timer_flex2_initial
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, light_adj
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, TOUCH_getdata
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, get_touch_key
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, touch_key_blink_01
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, timer_flex2_initial
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_01, LCD_distring
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 20
        CFI CFA_Y Y+24
//  750 	unsigned char temp = 0;
        LDI     R25, 0
//  751 	unsigned char col = 24;
        LDI     R24, 24
//  752 	unsigned char buffer[3];
//  753 	static unsigned int ui_lux;
//  754 	static unsigned char lux_high;
//  755 	static unsigned char lux_low;
//  756 	unsigned char buffer_tx[17] = "D200014210000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D200014210000000">_1`)
        LDI     R31, (`?<Constant "D200014210000000">_1`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
//  757 	unsigned int temp_int;
//  758 	
//  759 	LCD_distring_V2(calibration, 8, 4, 0);
        LDI     R19, 4
        LDI     R18, 8
        LDI     R16, LOW((`?<Constant "D200014210000000">_1` + 17))
        LDI     R17, HIGH((`?<Constant "D200014210000000">_1` + 17))
        CALL    LCD_distring_V2
//  760 	LCD_distring("     Lux:", 0, 24, 0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 59))
        LDI     R17, HIGH((`?<Constant "0">` + 59))
        CALL    LCD_distring
//  761 	//LCD_distring("123456789012345678901234567", 0, 38, 0);
//  762 	LCD_distring("1    2    3     ", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 69))
        LDI     R17, HIGH((`?<Constant "0">` + 69))
        CALL    LCD_distring
//  763 	LCD_distring("4    5    6     ", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 86))
        LDI     R17, HIGH((`?<Constant "0">` + 86))
        CALL    LCD_distring
//  764 	LCD_distring("7    8    9     ", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 103))
        LDI     R17, HIGH((`?<Constant "0">` + 103))
        CALL    LCD_distring
//  765 	LCD_distring("     0          ", 10, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 120))
        LDI     R17, HIGH((`?<Constant "0">` + 120))
        CALL    LCD_distring
//  766 	LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
//  767 	LCD_distring("Confirm", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        CALL    LCD_distring
//  768 	
//  769 	timer_flex2_initial(500);
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
        LDI     R16, 48
        STS     g_lux, R16
//  770 	g_lux[0] = '0';
//  771 	g_lux[1] = '0';
        STS     (g_lux + 1), R16
//  772 	g_lux[2] = '0';
        STS     (g_lux + 2), R16
//  773 	g_lux[3] = '0';
        STS     (g_lux + 3), R16
//  774 	g_lux[4] = 0;
        STS     (g_lux + 4), R25
        RJMP    ??menu_01_0
//  775 	
//  776 	while(1)
//  777 	{
//  778 		if(IS_PEN == 0)
//  779 		{
//  780 			TOUCH_getdata();
//  781 			temp_int = get_touch_key();
//  782 			touch_key_blink_01(temp_int,100);
//  783 			
//  784 			if(temp_int <= 9 || temp_int == 16 || temp_int == 17)
//  785 			{
//  786 				if(temp_int <= 9)
//  787 				{
//  788 					if(col >= 24 & col< 24 + 8)
//  789 					{
//  790 						buffer[0] = 48 + temp_int;
//  791 						buffer[1] = 0;
//  792 						LCD_distring(buffer,col,24,0);
//  793 						switch(col)
//  794 						{
//  795 							case 24:
//  796 								g_lux[0] = temp_int;
//  797 							break;
//  798 							
//  799 							case 26:
//  800 								g_lux[1] = temp_int;
//  801 							break;
//  802 							
//  803 							case 28:
//  804 								g_lux[2] = temp_int;
//  805 							break;
//  806 							
//  807 							case 30:
//  808 								g_lux[3] = temp_int;
//  809 							break;
//  810 							
//  811 							default:break;
//  812 						}
//  813 						
//  814 						col += 2;
//  815 					}
//  816 				}
//  817 				else if(temp_int == 16)		// "Confirm"
//  818 				{
//  819 					if(col == 32)
//  820 					{
//  821 						
//  822 						ui_lux = 1000 * (unsigned int)g_lux[0] + 100 * (unsigned int)g_lux[1] + 10 * (unsigned int)g_lux[2] + g_lux[3];
//  823 						lux_high = ui_lux >> 8;
//  824 						lux_low = ui_lux;
//  825 						
//  826 						send_frame_pp_ext_broad("D200014214000001",2000);
//  827 						strncpy(buffer_tx,"D200014210000000",17);
//  828 						CharToStr(lux_high,buffer);
//  829 						buffer_tx[12] = buffer[0];
//  830 						buffer_tx[13] = buffer[1];
//  831 						CharToStr(lux_low,buffer);
//  832 						buffer_tx[14] = buffer[0];
//  833 						buffer_tx[15] = buffer[1];
//  834 						send_frame_pp_ext_broad(buffer_tx,200);
//  835 						send_frame_pp_ext_broad("D2000142140000FF",200);
//  836 						
//  837 						col = 24;
//  838 						g_lux[0] = 0;
//  839 						g_lux[1] = 0;
//  840 						g_lux[2] = 0;
//  841 						g_lux[3] = 0;
//  842 						LCD_distring("     ",col,24,0);
//  843 						asm("nop");
//  844 					}
//  845 				}
//  846 				else if(temp_int == 17)		// "Delete"
//  847 				{
//  848 					if(col >24)
//  849 					{
//  850 						LCD_distring(" ",col,24,0);
//  851 						col -= 2;
//  852 					}
//  853 				}
//  854 			}
//  855 		}
//  856 		
//  857 		if(Time_delay.timer_flex2.time_out == 1)
//  858 		{
//  859 			temp = ~temp;
//  860 			timer_flex2_initial(500);
//  861 			if(temp)
//  862 				LCD_distring("_",col,24,0);
//  863 			else
//  864 				LCD_distring(" ",col,24,0);
??menu_01_1:
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
??menu_01_2:
        CALL    LCD_distring
//  865 		}
//  866 		
//  867 		light_adj();
??menu_01_3:
        CALL    light_adj
??menu_01_0:
        SBIC    0x09, 0x05
        RJMP    ??menu_01_4
        CALL    TOUCH_getdata
        RCALL   get_touch_key
        MOV     R26, R16
        LDI     R27, 0
        LDI     R18, 100
        LDI     R19, 0
        RCALL   touch_key_blink_01
        CPI     R26, 10
        CPC     R27, R27
        BRCS    ??menu_01_5
        CPI     R26, 16
        CPC     R27, R27
        BREQ    ??menu_01_5
        CPI     R26, 17
        CPC     R27, R27
        BREQ    $+2+2
        RJMP    ??menu_01_4
??menu_01_5:
        CPI     R26, 10
        CPC     R27, R27
        BRCC    ??menu_01_6
        CPI     R24, 24
        BRCC    $+2+2
        RJMP    ??menu_01_4
        CPI     R24, 32
        BRCS    $+2+2
        RJMP    ??menu_01_4
        MOV     R16, R26
        SUBI    R16, 208
        ST      Y, R16
        STD     Y+1, R27
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        MOVW    R17:R16, R29:R28
        CALL    LCD_distring
        MOV     R16, R24
        SUBI    R16, 24
        BREQ    ??menu_01_7
        SUBI    R16, 2
        BREQ    ??menu_01_8
        SUBI    R16, 2
        BREQ    ??menu_01_9
        SUBI    R16, 2
        BREQ    ??menu_01_10
        RJMP    ??menu_01_11
??menu_01_7:
        STS     g_lux, R26
        RJMP    ??menu_01_11
??menu_01_8:
        STS     (g_lux + 1), R26
        RJMP    ??menu_01_11
??menu_01_9:
        STS     (g_lux + 2), R26
        RJMP    ??menu_01_11
??menu_01_10:
        STS     (g_lux + 3), R26
??menu_01_11:
        SUBI    R24, 254
        RJMP    ??menu_01_4
??menu_01_6:
        CPI     R26, 16
        CPC     R27, R27
        BREQ    $+2+2
        RJMP    ??menu_01_12
        CPI     R24, 32
        BREQ    $+2+2
        RJMP    ??menu_01_4
        LDI     R30, LOW(??ui_lux)
        LDI     R31, (??ui_lux) >> 8
        LDS     R20, g_lux
        LDI     R21, 0
        LDI     R16, 232
        LDI     R17, 3
        CALL    ?S_EC_MUL_L02
        MOVW    R19:R18, R17:R16
        LDS     R20, (g_lux + 1)
        LDI     R16, 100
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        LDS     R20, (g_lux + 2)
        LDI     R16, 10
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        LDS     R16, (g_lux + 3)
        ADD     R18, R16
        ADC     R19, R27
        ST      Z, R18
        STD     Z+1, R19
        LDD     R17, Z+1
        STS     (??ui_lux + 2), R17
        LD      R16, Z
        STS     (??ui_lux + 3), R16
        LDI     R18, 208
        LDI     R19, 7
        LDI     R16, LOW((`?<Constant "0">` + 137))
        LDI     R17, HIGH((`?<Constant "0">` + 137))
        CALL    send_frame_pp_ext_broad
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "0">` + 154))
        LDI     R19, HIGH((`?<Constant "0">` + 154))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
        MOVW    R19:R18, R29:R28
        LDS     R16, (??ui_lux + 2)
        CALL    CharToStr
        LD      R16, Y
        STD     Y+15, R16
        LDD     R16, Y+1
        STD     Y+16, R16
        MOVW    R19:R18, R29:R28
        LDS     R16, (??ui_lux + 3)
        CALL    CharToStr
        LD      R16, Y
        STD     Y+17, R16
        LDD     R16, Y+1
        STD     Y+18, R16
        LDI     R18, 200
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        LDI     R18, 200
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 171))
        LDI     R17, HIGH((`?<Constant "0">` + 171))
        CALL    send_frame_pp_ext_broad
        LDI     R24, 24
        STS     g_lux, R27
        STS     (g_lux + 1), R27
        STS     (g_lux + 2), R27
        STS     (g_lux + 3), R27
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW((`?<Constant "0">` + 188))
        LDI     R17, HIGH((`?<Constant "0">` + 188))
        CALL    LCD_distring
        nop
        RJMP    ??menu_01_4
??menu_01_12:
        CPI     R26, 17
        CPC     R27, R27
        BRNE    ??menu_01_4
        CPI     R24, 25
        BRCS    ??menu_01_4
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
        CALL    LCD_distring
        SUBI    R24, 2
??menu_01_4:
        LDS     R16, (Time_delay + 212)
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??menu_01_3
        COM     R25
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
        TST     R25
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        BRNE    $+2+2
        RJMP    ??menu_01_1
        LDI     R16, LOW((`?<Constant "0">` + 196))
        LDI     R17, HIGH((`?<Constant "0">` + 196))
        RJMP    ??menu_01_2
        CFI EndBlock cfiBlock16
        REQUIRE _A_PIND
//  868 	}
//  869 }

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??ui_lux:
        DS8 2
        DS8 1
        DS8 1
//  870 
//  871 //extern char	  Menu_status;	//alan

        RSEG CODE:CODE:NOROOT(1)
//  872 void menu_02(void)
menu_02:
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function menu_02
//  873 {
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, timer_flex2_initial
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring_ee
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, all_reception_buffer_clear
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, light_adj
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, decode_SCS
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, id_setting
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, strncpy
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, strcmp
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, delay_ms
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, strncpy
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, strncpy
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, delay_ms
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, strncpy
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, print_label
        LOCFRAME CSTACK, 51, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, led_blinking
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring_V2
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, TOUCH_getdata
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, get_touch_key
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, touch_key_blink
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, led_blinking_disable
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, timer_flex_initial
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, StrToChar
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, StrToChar
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, StrToChar
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, StrToChar
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, CharToStr
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, CharToStr
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, CharToStr
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, CharToStr
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, timer_flex2_initial
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL menu_02, LCD_distring
        LOCFRAME CSTACK, 49, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE6_L09
        CFI R5 Frame(CFA_Y, -1)
        CFI R4 Frame(CFA_Y, -2)
        CFI R27 Frame(CFA_Y, -3)
        CFI R26 Frame(CFA_Y, -4)
        CFI R25 Frame(CFA_Y, -5)
        CFI R24 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        SBIW    R29:R28, 43
        CFI CFA_Y Y+49
//  874 	unsigned char i;
//  875 	unsigned char temp = 0;
        CLR     R5
//  876 	unsigned char col = 24;
//  877 	unsigned char buffer[2];
//  878 	unsigned int temp_int;
//  879 	unsigned char g_id[9];
//  880 	unsigned char year_week[6] = "00W00";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 245
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "00W00">`)
        LDI     R31, (`?<Constant "00W00">`) >> 8
        LDI     R20, 6
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
//  881 	unsigned char buffer_tx[17];
//  882 	unsigned char buffer_received[9];
//  883 	unsigned long int id_long;
//  884 	
//  885 	buffer_received[8] = 0;
        STD     Y+42, R20
//  886 	
//  887 	
//  888 	Menu_status = 0x02;		//alan
        LDI     R16, 2
        STS     Menu_status, R16
        LDS     R16, g_year
        STD     Y+11, R16
//  889 	
//  890 	year_week[0] = g_year[0];
//  891 	year_week[1] = g_year[1];
        LDS     R16, (g_year + 1)
        STD     Y+12, R16
        LDS     R16, g_week
        STD     Y+14, R16
//  892 	
//  893 	year_week[3] = g_week[0];
//  894 	year_week[4] = g_week[1];
        LDS     R16, (g_week + 1)
        STD     Y+15, R16
//  895 	
//  896 	LCD_distring("Delivery Station", 12, 4, 0);
        LDI     R19, 4
        LDI     R18, 12
        LDI     R16, LOW((`?<Constant "0">` + 198))
        LDI     R17, HIGH((`?<Constant "0">` + 198))
        CALL    LCD_distring
//  897 	LCD_distring("Input ID:", 0, 24, 0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 215))
        LDI     R17, HIGH((`?<Constant "0">` + 215))
        CALL    LCD_distring
//  898 	LCD_distring("   Infor:", 0, 36, 0);
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 225))
        LDI     R17, HIGH((`?<Constant "0">` + 225))
        CALL    LCD_distring
//  899 	//LCD_distring("123456789012345678901234567", 0, 38, 0);
//  900 	LCD_distring("1    2    3    A", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 235))
        LDI     R17, HIGH((`?<Constant "0">` + 235))
        CALL    LCD_distring
//  901 	LCD_distring("4    5    6    B", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 252))
        LDI     R17, HIGH((`?<Constant "0">` + 252))
        CALL    LCD_distring
//  902 	LCD_distring("7    8    9    C", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 269))
        LDI     R17, HIGH((`?<Constant "0">` + 269))
        CALL    LCD_distring
//  903 	LCD_distring("E    0    F    D", 10, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 286))
        LDI     R17, HIGH((`?<Constant "0">` + 286))
        CALL    LCD_distring
//  904 	LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
//  905 	//LCD_distring("Retry", 12, 140, 0);		//alan		18
//  906 	LCD_distring("Next", 22, 140, 0);			//alan		19
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 22
        LDI     R16, LOW((`?<Constant "0">` + 47))
        LDI     R17, HIGH((`?<Constant "0">` + 47))
        CALL    LCD_distring
//  907 	LCD_distring("Confirm", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        CALL    LCD_distring
//  908 	
//  909 	timer_flex2_initial(500);
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
//  910 	
//  911 	ee_printed_id[8] = 0;
        LDI     R16, 0
        LDI     R20, LOW((ee_printed_id + 8))
        LDI     R21, HIGH((ee_printed_id + 8))
        CALL    __eeput8_16
//  912 	for(i=0;i<8;i++)
        LDI     R18, 0
        RJMP    ??menu_02_0
//  913 	{
//  914 		g_id[i] = ee_printed_id[i];
??menu_02_1:
        LDI     R20, LOW(ee_printed_id)
        LDI     R21, (ee_printed_id) >> 8
        ADD     R20, R18
        ADC     R21, R5
        CALL    __eeget8_16
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 2
        ADD     R30, R18
        ADC     R31, R5
        ST      Z, R16
//  915 	}
        INC     R18
??menu_02_0:
        CPI     R18, 8
        BRCS    ??menu_02_1
//  916 	LCD_distring_ee(ee_printed_id,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_printed_id)
        LDI     R17, (ee_printed_id) >> 8
        CALL    LCD_distring_ee
//  917 	col = 40;
        LDI     R16, 40
        MOV     R4, R16
        RJMP    ??menu_02_2
//  918 	
//  919 	while(1)
//  920 	{
//  921 		while(decode_SCS());
//  922 		
//  923 		switch(state.main_state)
//  924 		{
//  925 			case FINAL_ID_STEP1:
//  926 				id_setting(g_id);
//  927 				state.main_state = FINAL_ID_STEP2;
//  928 			break;
//  929 			
//  930 			case FINAL_ID_STEP2:
//  931 				if(g_asc_reception_buffer[0] == 0xD0 && g_asc_reception_buffer[3] == 0x04)
//  932 				{
//  933 					strncpy(&g_reception_buffer[8],buffer_received,8);
//  934 					buffer_received[8] = 0;
//  935 					if(strcmp(buffer_received,g_id))
//  936 					{
//  937 						state.main_state = FINAL_ID_STEP3;
//  938 					}
//  939 				}
//  940 			break;
//  941 			
//  942 			case FINAL_ID_STEP3:
//  943 				delay_ms(200);
//  944 				strncpy(buffer_tx,"D200014280000000",17);
//  945 				strncpy(&buffer_tx[10],g_model,6);
//  946 				if(g_model[4] == '3' && g_model[5] == '0')
//  947 				{
//  948 					buffer_tx[14] = '2';
//  949 					buffer_tx[15] = 'A';
//  950 				}
//  951 				send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY); //brand & production line
//  952 				state.main_state = FINAL_ID_STEP4;
//  953 			break;
//  954 			
//  955 			case FINAL_ID_STEP4:
//  956 				if(g_asc_reception_buffer[0]  == 0xD2 && g_asc_reception_buffer[3] == 0x34)
//  957 				{
//  958 					if(g_asc_reception_buffer[4] == 0x80)
//  959 					{
//  960 						if(g_reception_buffer[10] == g_model[0] && g_reception_buffer[14] == g_model[4] && g_reception_buffer[15] == g_model[5])
//  961 						{
//  962 							if(g_reception_buffer[12] == g_model[2] && g_reception_buffer[13] == g_model[3])
//  963 							{
//  964 								state.main_state = FINAL_ID_STEP5;
//  965 							}
//  966 						}
//  967 						else
//  968 						{
//  969 							if(g_reception_buffer[10] == g_model[0])
//  970 							{
//  971 								if(g_asc_reception_buffer[7] == 0x2A && g_model[4] == '3' && g_model[5] == '0')
//  972 								{
//  973 									state.main_state = FINAL_ID_STEP5;
//  974 								}
//  975 							}
//  976 						}
//  977 					}
//  978 				}
//  979 			break;
//  980 			
//  981 			case FINAL_ID_STEP5:
//  982 				delay_ms(200);
//  983 				strncpy(buffer_tx,"D200014282000000",17);
//  984 				buffer_tx[10] = g_hard[0];
//  985 				buffer_tx[11] = g_hard[1];
//  986 				buffer_tx[12] = g_year[0];
//  987 				buffer_tx[13] = g_year[1];
//  988 				buffer_tx[14] = g_week[0];
//  989 				buffer_tx[15] = g_week[1];
//  990 				send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  991 				state.main_state = FINAL_ID_STEP6;
//  992 			break;
//  993 			
//  994 			case FINAL_ID_STEP6:
//  995 				if(g_asc_reception_buffer[0]  == 0xD2 && g_asc_reception_buffer[3] == 0x34)
//  996 				{
//  997 					if(g_asc_reception_buffer[4] == 0x82)
//  998 					{
//  999 						if(g_reception_buffer[10] == g_hard[0] && g_reception_buffer[11] == g_hard[1])
// 1000 						{
// 1001 							if(g_reception_buffer[12] == g_year[0] && g_reception_buffer[13] == g_year[1] && g_reception_buffer[14] == g_week[0] && g_reception_buffer[15] == g_week[1])
// 1002 							{
// 1003 								state.main_state = FINAL_ID_STEP7;
// 1004 							}
// 1005 						}
// 1006 					}
// 1007 				}
// 1008 			break;
// 1009 			
// 1010 			case FINAL_ID_STEP7:
// 1011 				print_label(g_id,g_model,year_week,g_soft,g_hard);
// 1012 				for(i=0;i<8;i++)
// 1013 				{
// 1014 					ee_printed_id[i] = g_id[i];
// 1015 				}
// 1016 				LCD_distring(g_id,24,24,0);		// display the ID sent last time
// 1017 				LCD_distring("ID Programmed",20,36,0);
// 1018 				led_blinking(120,0);
// 1019 				state.main_state = NORMAL;
// 1020 			break;
// 1021 			
// 1022 			default:break;
// 1023 		}
// 1024 		
// 1025 		if(state.main_state != NORMAL)
// 1026 		{
// 1027 			if(Time_delay.timer_flex.time_out == 1)
// 1028 			{
// 1029 				LCD_distring_V2(error_109,20,36,0);
// 1030 			}
// 1031 		}
// 1032 		
// 1033 		if(IS_PEN == 0)
// 1034 		{
// 1035 			TOUCH_getdata();
// 1036 			temp_int = get_touch_key();
// 1037 			
// 1038 			touch_key_blink(temp_int,100);
// 1039 			
// 1040 			//if(temp_int <= 0x11)
// 1041 			if(temp_int <= 19)		//alan
// 1042 			{
// 1043 				if(temp_int <= 9)
// 1044 				{
// 1045 					if(col >= 24 & col< 24 + 16)
// 1046 					{
// 1047 						buffer[0] = 48 + temp_int;
// 1048 						buffer[1] = 0;
// 1049 						LCD_distring(buffer,col,24,0);
// 1050 			
// 1051 						switch(col)
// 1052 						{
// 1053 						case 24:
// 1054 								g_id[0] = buffer[0];
// 1055 							break;
// 1056 							
// 1057 						case 26:
// 1058 								g_id[1] = buffer[0];
// 1059 							break;
// 1060 							
// 1061 						case 28:
// 1062 								g_id[2] = buffer[0];
// 1063 							break;
// 1064 							
// 1065 						case 30:
// 1066 								g_id[3] = buffer[0];
// 1067 							break;
// 1068 							
// 1069 						case 32:
// 1070 								g_id[4] = buffer[0];
// 1071 							break;
// 1072 							
// 1073 						case 34:
// 1074 								g_id[5] = buffer[0];
// 1075 							break;
// 1076 							
// 1077 						case 36:
// 1078 								g_id[6] = buffer[0];
// 1079 							break;
// 1080 							
// 1081 						case 38:
// 1082 								g_id[7] = buffer[0];
// 1083 							break;
// 1084 							
// 1085 						default:break;
// 1086 						}
// 1087 						
// 1088 						col += 2;
// 1089 					}
// 1090 				}
// 1091 				else if(temp_int <= 15)
// 1092 				{
// 1093 					if(col >= 24 & col< 24 + 16)
// 1094 					{
// 1095 						buffer[0] = 65 - 10 + temp_int;
// 1096 						buffer[1] = 0;
// 1097 						LCD_distring(buffer,col,24,0);
// 1098 						switch(col)
// 1099 						{
// 1100 						case 24:
// 1101 								g_id[0] = buffer[0];
// 1102 							break;
// 1103 							
// 1104 						case 26:
// 1105 								g_id[1] = buffer[0];
// 1106 							break;
// 1107 							
// 1108 						case 28:
// 1109 								g_id[2] = buffer[0];
// 1110 							break;
// 1111 							
// 1112 						case 30:
// 1113 								g_id[3] = buffer[0];
// 1114 							break;
// 1115 							
// 1116 						case 32:
// 1117 								g_id[4] = buffer[0];
// 1118 							break;
// 1119 							
// 1120 						case 34:
// 1121 								g_id[5] = buffer[0];
// 1122 							break;
// 1123 							
// 1124 						case 36:
// 1125 								g_id[6] = buffer[0];
// 1126 							break;
// 1127 							
// 1128 						case 38:
// 1129 								g_id[7] = buffer[0];
// 1130 							break;
// 1131 							
// 1132 						default:break;
// 1133 						}
// 1134 						col += 2;
// 1135 					}
// 1136 				}
// 1137 				else if((temp_int == 16)||(temp_int == 18))		//"confirm"
// 1138 				{
// 1139 					if(col == 40)
// 1140 					{
// 1141 						g_id[8] = 0;
// 1142 						LCD_distring(g_id,24,24,1);		// display the ID sent last time
// 1143 						LCD_distring("             ",20,36,0);
// 1144 						led_blinking_disable(0);
// 1145 						timer_flex_initial(5000);
// 1146 						state.main_state = FINAL_ID_STEP1;
// 1147 						/*
// 1148 						id_setting(g_id);
// 1149 						
// 1150 						strncpy(buffer_tx,"D200014280000000",17);
// 1151 						strncpy(&buffer_tx[10],g_model,6);
// 1152 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY); //brand & production line
// 1153 						
// 1154 						delay_ms(500);
// 1155 						
// 1156 						strncpy(buffer_tx,"D200014282000000",17);
// 1157 						buffer_tx[10] = g_hard[0];
// 1158 						buffer_tx[11] = g_hard[1];
// 1159 						buffer_tx[12] = g_year[0];
// 1160 						buffer_tx[13] = g_year[1];
// 1161 						buffer_tx[14] = g_week[0];
// 1162 						buffer_tx[15] = g_week[1];
// 1163 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1164 						
// 1165 						print_label(g_id,g_model,year_week,g_soft,g_hard);
// 1166 						LCD_distring(g_id,24,24,0);		// display the ID sent last time
// 1167 						*/
// 1168 					}
// 1169 				}
// 1170 				else if(temp_int == 17)		// "delete"
// 1171 				{
// 1172 					if(col >24)
// 1173 					{
// 1174 						LCD_distring(" ",col,24,0);
// 1175 						col -= 2;
// 1176 					}
// 1177 				}
// 1178 				else if(temp_int == 19)		//"Next" alan
// 1179 				{
// 1180 					
// 1181 					id_long = 0;
// 1182 					id_long = StrToChar(g_id);
// 1183 					id_long = (id_long << 8) + StrToChar(&g_id[2]);
// 1184 					id_long = (id_long << 8) + StrToChar(&g_id[4]);
// 1185 					id_long = (id_long << 8) + StrToChar(&g_id[6]);
// 1186 					id_long++;
// 1187 					CharToStr((unsigned char)id_long,buffer);
// 1188 					g_id[6] = buffer[0];
// 1189 					g_id[7] = buffer[1]; 
// 1190 					CharToStr((id_long & 0x0000FF00) >> 8,buffer);
// 1191 					g_id[4] = buffer[0];
// 1192 					g_id[5] = buffer[1]; 
// 1193 					CharToStr((id_long & 0x00FF0000) >> 16,buffer);
// 1194 					g_id[2] = buffer[0];
// 1195 					g_id[3] = buffer[1]; 
// 1196 					CharToStr((id_long & 0xFF000000) >> 24,buffer);
// 1197 					g_id[0] = buffer[0];
// 1198 					g_id[1] = buffer[1]; 
// 1199 
// 1200 					if(col == 40)
// 1201 					{
// 1202 						g_id[8] = 0;
// 1203 						LCD_distring(g_id,24,24,1);		// alan,display the ID sent last time
// 1204 						LCD_distring("             ",20,36,0);
// 1205 						led_blinking_disable(0);
// 1206 						timer_flex_initial(5000);
// 1207 						state.main_state = FINAL_ID_STEP1;
// 1208 					}
// 1209 				}
// 1210 			}
// 1211 		}
// 1212 		
// 1213 		if(Time_delay.timer_flex2.time_out == 1)
// 1214 		{
// 1215 			temp = ~temp;
// 1216 			timer_flex2_initial(500);
// 1217 			if(temp)
// 1218 				LCD_distring("_",col,24,0);
// 1219 			else
// 1220 				LCD_distring(" ",col,24,0);
??menu_02_3:
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
??menu_02_4:
        CALL    LCD_distring
// 1221 		}
// 1222 		
// 1223 		all_reception_buffer_clear();
??menu_02_5:
        CALL    all_reception_buffer_clear
// 1224 		light_adj();
        CALL    light_adj
??menu_02_2:
        CALL    decode_SCS
        TST     R16
        BRNE    ??menu_02_2
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        LDI     R30, LOW(`?<Jumptable for menu_02>_0`)
        LDI     R31, (`?<Jumptable for menu_02>_0`) >> 8
        JMP     ?SV_SWITCH_L06
??menu_02_6:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 254
        SBCI    R17, 255
        RCALL   id_setting
        LDI     R16, 79
??menu_02_7:
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??menu_02_8
??menu_02_9:
        LDS     R16, g_asc_reception_buffer
        CPI     R16, 208
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 3)
        CPI     R16, 4
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDI     R20, 8
        LDI     R21, 0
        MOVW    R19:R18, R29:R28
        SUBI    R18, 222
        SBCI    R19, 255
        LDI     R16, LOW((g_reception_buffer + 8))
        LDI     R17, HIGH((g_reception_buffer + 8))
        CALL    strncpy
        LDI     R16, 0
        STD     Y+42, R16
        MOVW    R19:R18, R29:R28
        SUBI    R18, 254
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 222
        SBCI    R17, 255
        CALL    strcmp
        OR      R16, R17
        BRNE    $+2+2
        RJMP    ??menu_02_8
        LDI     R16, 80
        RJMP    ??menu_02_7
??menu_02_10:
        LDI     R16, 200
        LDI     R17, 0
        CALL    delay_ms
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "0">` + 303))
        LDI     R19, HIGH((`?<Constant "0">` + 303))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 239
        SBCI    R17, 255
        CALL    strncpy
        LDI     R20, 6
        LDI     R21, 0
        LDI     R18, LOW(g_model)
        LDI     R19, (g_model) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 229
        SBCI    R17, 255
        CALL    strncpy
        LDS     R16, (g_model + 4)
        CPI     R16, 51
        BRNE    ??menu_02_11
        LDS     R16, (g_model + 5)
        CPI     R16, 48
        BRNE    ??menu_02_11
        LDI     R16, 50
        STD     Y+31, R16
        LDI     R16, 65
        STD     Y+32, R16
??menu_02_11:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 239
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        LDI     R16, 81
        RJMP    ??menu_02_7
??menu_02_12:
        LDS     R16, g_asc_reception_buffer
        CPI     R16, 210
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 3)
        CPI     R16, 52
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 128
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 10)
        LDS     R17, g_model
        CP      R16, R17
        BRNE    ??menu_02_13
        LDS     R16, (g_reception_buffer + 14)
        LDS     R17, (g_model + 4)
        CP      R16, R17
        BRNE    ??menu_02_13
        LDS     R16, (g_reception_buffer + 15)
        LDS     R17, (g_model + 5)
        CP      R16, R17
        BRNE    ??menu_02_13
        LDS     R16, (g_reception_buffer + 12)
        LDS     R17, (g_model + 2)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 13)
        LDS     R17, (g_model + 3)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
??menu_02_14:
        LDI     R16, 82
        RJMP    ??menu_02_7
??menu_02_13:
        LDS     R16, (g_reception_buffer + 10)
        LDS     R17, g_model
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 42
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_model + 4)
        CPI     R16, 51
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_model + 5)
        CPI     R16, 48
        BREQ    $+2+2
        RJMP    ??menu_02_8
        RJMP    ??menu_02_14
??menu_02_15:
        LDI     R16, 200
        LDI     R17, 0
        CALL    delay_ms
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "0">` + 320))
        LDI     R19, HIGH((`?<Constant "0">` + 320))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 239
        SBCI    R17, 255
        CALL    strncpy
        LDS     R16, g_hard
        STD     Y+27, R16
        LDS     R16, (g_hard + 1)
        STD     Y+28, R16
        LDS     R16, g_year
        STD     Y+29, R16
        LDS     R16, (g_year + 1)
        STD     Y+30, R16
        LDS     R16, g_week
        STD     Y+31, R16
        LDS     R16, (g_week + 1)
        STD     Y+32, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 239
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        LDI     R16, 83
        RJMP    ??menu_02_7
??menu_02_16:
        LDS     R16, g_asc_reception_buffer
        CPI     R16, 210
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 3)
        CPI     R16, 52
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 130
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 10)
        LDS     R17, g_hard
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 11)
        LDS     R17, (g_hard + 1)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 12)
        LDS     R17, g_year
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 13)
        LDS     R17, (g_year + 1)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 14)
        LDS     R17, g_week
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDS     R16, (g_reception_buffer + 15)
        LDS     R17, (g_week + 1)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??menu_02_8
        LDI     R16, 84
        RJMP    ??menu_02_7
??menu_02_17:
        LDI     R16, LOW(g_hard)
        LDI     R17, (g_hard) >> 8
        ST      -Y, R17
        CFI CFA_Y Y+50
        ST      -Y, R16
        CFI CFA_Y Y+51
        LDI     R22, LOW(g_soft)
        LDI     R23, (g_soft) >> 8
        MOVW    R21:R20, R29:R28
        SUBI    R20, 243
        SBCI    R21, 255
        LDI     R18, LOW(g_model)
        LDI     R19, (g_model) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
        CALL    print_label
        CFI CFA_Y Y+49
        LDI     R18, 0
        RJMP    ??menu_02_18
??menu_02_19:
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 2
        LDI     R19, 0
        ADD     R30, R18
        ADC     R31, R19
        LD      R16, Z
        LDI     R20, LOW(ee_printed_id)
        LDI     R21, (ee_printed_id) >> 8
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeput8_16
        INC     R18
??menu_02_18:
        CPI     R18, 8
        BRCS    ??menu_02_19
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 254
        SBCI    R17, 255
        CALL    LCD_distring
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 337))
        LDI     R17, HIGH((`?<Constant "0">` + 337))
        CALL    LCD_distring
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 120
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        CALL    led_blinking
        LDI     R16, 0
        STS     (state + 2), R16
        STS     (state + 3), R16
??menu_02_8:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        OR      R16, R17
        BREQ    ??menu_02_20
        LDS     R16, (Time_delay + 157)
        CPI     R16, 1
        BRNE    ??menu_02_20
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 20
        LDI     R16, LOW(error_109)
        LDI     R17, (error_109) >> 8
        CALL    LCD_distring_V2
??menu_02_20:
        SBIC    0x09, 0x05
        RJMP    ??menu_02_21
        CALL    TOUCH_getdata
        RCALL   get_touch_key
        MOV     R24, R16
        LDI     R25, 0
        LDI     R18, 100
        LDI     R19, 0
        RCALL   touch_key_blink
        CPI     R24, 20
        CPC     R25, R25
        BRCS    $+2+2
        RJMP    ??menu_02_21
        CPI     R24, 10
        CPC     R25, R25
        BRCC    ??menu_02_22
        LDI     R16, 24
        CP      R4, R16
        BRCC    $+2+2
        RJMP    ??menu_02_21
        LDI     R16, 40
        CP      R4, R16
        BRCS    $+2+2
        RJMP    ??menu_02_21
        SUBI    R24, 208
??menu_02_23:
        ST      Y, R24
        STD     Y+1, R25
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R4
        MOVW    R17:R16, R29:R28
        CALL    LCD_distring
        MOV     R16, R4
        SUBI    R16, 24
        BREQ    ??menu_02_24
        SUBI    R16, 2
        BREQ    ??menu_02_25
        SUBI    R16, 2
        BREQ    ??menu_02_26
        SUBI    R16, 2
        BREQ    ??menu_02_27
        SUBI    R16, 2
        BREQ    ??menu_02_28
        SUBI    R16, 2
        BREQ    ??menu_02_29
        SUBI    R16, 2
        BREQ    ??menu_02_30
        SUBI    R16, 2
        BREQ    ??menu_02_31
        RJMP    ??menu_02_32
??menu_02_24:
        LD      R16, Y
        STD     Y+2, R16
        RJMP    ??menu_02_32
??menu_02_26:
        LD      R16, Y
        STD     Y+4, R16
        RJMP    ??menu_02_32
??menu_02_27:
        LD      R16, Y
        STD     Y+5, R16
        RJMP    ??menu_02_32
??menu_02_28:
        LD      R16, Y
        STD     Y+6, R16
        RJMP    ??menu_02_32
??menu_02_29:
        LD      R16, Y
        STD     Y+7, R16
        RJMP    ??menu_02_32
??menu_02_30:
        LD      R16, Y
        STD     Y+8, R16
        RJMP    ??menu_02_32
??menu_02_31:
        LD      R16, Y
        STD     Y+9, R16
??menu_02_32:
        LDI     R16, 2
??menu_02_33:
        ADD     R4, R16
        RJMP    ??menu_02_21
??menu_02_22:
        CPI     R24, 16
        CPC     R25, R25
        BRCC    ??menu_02_34
        LDI     R16, 24
        CP      R4, R16
        BRCC    $+2+2
        RJMP    ??menu_02_21
        LDI     R16, 40
        CP      R4, R16
        BRCS    $+2+2
        RJMP    ??menu_02_21
        SUBI    R24, 201
        RJMP    ??menu_02_23
??menu_02_25:
        LD      R16, Y
        STD     Y+3, R16
        RJMP    ??menu_02_32
??menu_02_34:
        CPI     R24, 16
        CPC     R25, R25
        BREQ    ??menu_02_35
        CPI     R24, 18
        CPC     R25, R25
        BRNE    ??menu_02_36
??menu_02_35:
        LDI     R16, 40
        CP      R4, R16
        BREQ    $+2+2
        RJMP    ??menu_02_21
??menu_02_37:
        LDI     R16, 0
        STD     Y+10, R16
        LDI     R20, 1
        LDI     R19, 24
        LDI     R18, 24
        MOVW    R17:R16, R29:R28
        SUBI    R16, 254
        SBCI    R17, 255
        CALL    LCD_distring
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 20
        LDI     R16, LOW((`?<Constant "0">` + 351))
        LDI     R17, HIGH((`?<Constant "0">` + 351))
        CALL    LCD_distring
        LDI     R16, 0
        CALL    led_blinking_disable
        LDI     R16, 136
        LDI     R17, 19
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
        LDI     R16, 78
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??menu_02_21
??menu_02_36:
        CPI     R24, 17
        CPC     R25, R25
        BRNE    ??menu_02_38
        LDI     R16, 25
        CP      R4, R16
        BRCC    $+2+2
        RJMP    ??menu_02_21
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R4
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
        CALL    LCD_distring
        LDI     R16, 254
        RJMP    ??menu_02_33
??menu_02_38:
        CPI     R24, 19
        CPC     R25, R25
        BREQ    $+2+2
        RJMP    ??menu_02_21
        MOVW    R17:R16, R29:R28
        SUBI    R16, 254
        SBCI    R17, 255
        CALL    StrToChar
        MOV     R24, R16
        MOV     R25, R24
        LDI     R24, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 252
        SBCI    R17, 255
        CALL    StrToChar
        ADD     R24, R16
        MOV     R26, R25
        MOV     R25, R24
        LDI     R24, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 250
        SBCI    R17, 255
        CALL    StrToChar
        ADD     R24, R16
        MOV     R27, R26
        MOV     R26, R25
        MOV     R25, R24
        LDI     R24, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 248
        SBCI    R17, 255
        CALL    StrToChar
        ADD     R24, R16
        SUBI    R24, 255
        SBCI    R25, 255
        SBCI    R26, 255
        SBCI    R27, 255
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
        CALL    CharToStr
        LD      R16, Y
        STD     Y+8, R16
        LDD     R16, Y+1
        STD     Y+9, R16
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R25:R24
        MOV     R16, R17
        CALL    CharToStr
        LD      R16, Y
        STD     Y+6, R16
        LDD     R16, Y+1
        STD     Y+7, R16
        MOVW    R19:R18, R29:R28
        MOVW    R23:R22, R27:R26
        MOV     R20, R22
        MOV     R16, R20
        CALL    CharToStr
        LD      R16, Y
        STD     Y+4, R16
        LDD     R16, Y+1
        STD     Y+5, R16
        MOVW    R19:R18, R29:R28
        MOV     R24, R27
        MOV     R16, R24
        CALL    CharToStr
        LD      R16, Y
        STD     Y+2, R16
        LDD     R16, Y+1
        STD     Y+3, R16
        LDI     R16, 40
        CP      R4, R16
        BRNE    $+2+2
        RJMP    ??menu_02_37
??menu_02_21:
        LDS     R16, (Time_delay + 212)
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??menu_02_5
        COM     R5
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
        TST     R5
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R4
        BRNE    $+2+2
        RJMP    ??menu_02_3
        LDI     R16, LOW((`?<Constant "0">` + 196))
        LDI     R17, HIGH((`?<Constant "0">` + 196))
        RJMP    ??menu_02_4
        CFI EndBlock cfiBlock17
        REQUIRE _A_PIND
// 1225 	}
// 1226 }
// 1227 

        RSEG CODE:CODE:NOROOT(1)
// 1228 unsigned char input_screen(unsigned char *title,unsigned char *input_result,unsigned char flag)
input_screen:
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function input_screen
// 1229 {
        FUNCALL input_screen, strlen
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_Clr
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, timer_flex2_initial
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring_ee
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring_ee
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring_ee
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring_ee
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring_ee
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, light_adj
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, TOUCH_getdata
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, get_touch_key
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, touch_key_blink_01
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, timer_flex2_initial
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL input_screen, LCD_distring
        LOCFRAME CSTACK, 10, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE7_L09
        CFI R6 Frame(CFA_Y, -1)
        CFI R5 Frame(CFA_Y, -2)
        CFI R4 Frame(CFA_Y, -3)
        CFI R27 Frame(CFA_Y, -4)
        CFI R26 Frame(CFA_Y, -5)
        CFI R25 Frame(CFA_Y, -6)
        CFI R24 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        SBIW    R29:R28, 3
        CFI CFA_Y Y+10
        MOVW    R27:R26, R17:R16
        MOVW    R5:R4, R19:R18
        MOV     R6, R20
// 1230 	unsigned char temp = 0;
        LDI     R25, 0
// 1231 	unsigned char col = 24;
// 1232 	unsigned char buffer[3];
// 1233 	unsigned int temp_int;
// 1234 	
// 1235 	unsigned char i;
// 1236 	static unsigned char len;
// 1237 	len = strlen(input_result);
        MOVW    R17:R16, R5:R4
        CALL    strlen
        STS     ??len, R16
// 1238 		
// 1239 	LCD_Clr();
        CALL    LCD_Clr
// 1240 	LCD_distring(title, 12, 4, 0);
        LDI     R20, 0
        LDI     R19, 4
        LDI     R18, 12
        MOVW    R17:R16, R27:R26
        CALL    LCD_distring
// 1241 	LCD_distring("   Input:", 0, 24, 0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 365))
        LDI     R17, HIGH((`?<Constant "0">` + 365))
        CALL    LCD_distring
// 1242 	//LCD_distring("123456789012345678901234567", 0, 38, 0);
// 1243 	LCD_distring("1    2    3     ", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 69))
        LDI     R17, HIGH((`?<Constant "0">` + 69))
        CALL    LCD_distring
// 1244 	LCD_distring("4    5    6     ", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 86))
        LDI     R17, HIGH((`?<Constant "0">` + 86))
        CALL    LCD_distring
// 1245 	LCD_distring("7    8    9     ", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 103))
        LDI     R17, HIGH((`?<Constant "0">` + 103))
        CALL    LCD_distring
// 1246 	LCD_distring("     0          ", 10, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 120))
        LDI     R17, HIGH((`?<Constant "0">` + 120))
        CALL    LCD_distring
// 1247 	LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
// 1248 	//LCD_distring("Again", 10, 140, 0);		//alan		18
// 1249 	//LCD_distring("Next", 24, 140, 0);			//alan		19
// 1250 	LCD_distring("Confirm", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 32))
        LDI     R17, HIGH((`?<Constant "0">` + 32))
        CALL    LCD_distring
// 1251 	
// 1252 	timer_flex2_initial(500);
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
// 1253 	g_lux[0] = '0';
        LDI     R30, LOW(g_lux)
        LDI     R31, (g_lux) >> 8
        LDI     R16, 48
        ST      Z, R16
// 1254 	g_lux[1] = '0';
        STD     Z+1, R16
// 1255 	g_lux[2] = '0';
        STD     Z+2, R16
// 1256 	g_lux[3] = '0';
        STD     Z+3, R16
// 1257 	g_lux[4] = 0;
        STD     Z+4, R25
// 1258 	
// 1259 	switch(flag)
        MOV     R16, R6
        SUBI    R16, 0
        BREQ    ??input_screen_0
        DEC     R16
        BREQ    ??input_screen_1
        DEC     R16
        BREQ    ??input_screen_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??input_screen_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??input_screen_4
        RJMP    ??input_screen_5
// 1260 	{
// 1261 		case INPUT_MODEL:
// 1262 			for(i=0;i<6;i++)
??input_screen_0:
        LDI     R18, 0
        RJMP    ??input_screen_6
// 1263 			{
// 1264 				g_model[i] = ee_model[i]; 
??input_screen_7:
        LDI     R19, 0
        LDI     R20, LOW(ee_model)
        LDI     R21, (ee_model) >> 8
        ADD     R20, R18
        ADC     R21, R25
        CALL    __eeget8_16
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_model) & 0xFFFF))
        SBCI    R31, (-(g_model) & 0xFFFF) >> 8
        ST      Z, R16
// 1265 			}
        INC     R18
??input_screen_6:
        CPI     R18, 6
        BRCS    ??input_screen_7
// 1266 			LCD_distring_ee(ee_model,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_model)
        LDI     R17, (ee_model) >> 8
        RJMP    ??input_screen_8
// 1267 		break;
// 1268 		
// 1269 		case INPUT_YEAR:
// 1270 			for(i=0;i<2;i++)
??input_screen_1:
        LDI     R18, 0
        RJMP    ??input_screen_9
// 1271 			{
// 1272 				g_year[i] = ee_year[i];
??input_screen_10:
        LDI     R19, 0
        LDI     R20, LOW(ee_year)
        LDI     R21, (ee_year) >> 8
        ADD     R20, R18
        ADC     R21, R25
        CALL    __eeget8_16
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_year) & 0xFFFF))
        SBCI    R31, (-(g_year) & 0xFFFF) >> 8
        ST      Z, R16
// 1273 			}
        INC     R18
??input_screen_9:
        CPI     R18, 2
        BRCS    ??input_screen_10
// 1274 			LCD_distring_ee(ee_year,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_year)
        LDI     R17, (ee_year) >> 8
        RJMP    ??input_screen_8
// 1275 		break;
// 1276 		
// 1277 		case INPUT_WEEK:
// 1278 			for(i=0;i<2;i++)
??input_screen_2:
        LDI     R18, 0
        RJMP    ??input_screen_11
// 1279 			{
// 1280 				g_week[i] = ee_week[i];
??input_screen_12:
        LDI     R19, 0
        LDI     R20, LOW(ee_week)
        LDI     R21, (ee_week) >> 8
        ADD     R20, R18
        ADC     R21, R25
        CALL    __eeget8_16
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_week) & 0xFFFF))
        SBCI    R31, (-(g_week) & 0xFFFF) >> 8
        ST      Z, R16
// 1281 			}
        INC     R18
??input_screen_11:
        CPI     R18, 2
        BRCS    ??input_screen_12
// 1282 			LCD_distring_ee(ee_week,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_week)
        LDI     R17, (ee_week) >> 8
        RJMP    ??input_screen_8
// 1283 		break;
// 1284 		
// 1285 		case INPUT_SOFTWARE_VERSION:
// 1286 			for(i=0;i<6;i++)
??input_screen_3:
        LDI     R18, 0
        RJMP    ??input_screen_13
// 1287 			{
// 1288 				g_soft[i] = ee_soft[i];
??input_screen_14:
        LDI     R19, 0
        LDI     R20, LOW(ee_soft)
        LDI     R21, (ee_soft) >> 8
        ADD     R20, R18
        ADC     R21, R25
        CALL    __eeget8_16
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_soft) & 0xFFFF))
        SBCI    R31, (-(g_soft) & 0xFFFF) >> 8
        ST      Z, R16
// 1289 			}
        INC     R18
??input_screen_13:
        CPI     R18, 6
        BRCS    ??input_screen_14
// 1290 			LCD_distring_ee(ee_soft,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_soft)
        LDI     R17, (ee_soft) >> 8
        RJMP    ??input_screen_8
// 1291 		break;
// 1292 		
// 1293 		case INPUT_HARDWARE_VERSION:
// 1294 			for(i=0;i<2;i++)
??input_screen_4:
        LDI     R18, 0
        RJMP    ??input_screen_15
// 1295 			{
// 1296 				g_hard[i] = ee_hard[i];
??input_screen_16:
        LDI     R19, 0
        LDI     R20, LOW(ee_hard)
        LDI     R21, (ee_hard) >> 8
        ADD     R20, R18
        ADC     R21, R25
        CALL    __eeget8_16
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_hard) & 0xFFFF))
        SBCI    R31, (-(g_hard) & 0xFFFF) >> 8
        ST      Z, R16
// 1297 			}
        INC     R18
??input_screen_15:
        CPI     R18, 2
        BRCS    ??input_screen_16
// 1298 			LCD_distring_ee(ee_hard,24,24,0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW(ee_hard)
        LDI     R17, (ee_hard) >> 8
??input_screen_8:
        CALL    LCD_distring_ee
// 1299 		break;
// 1300 		
// 1301 		default:break;
// 1302 	}
// 1303 	
// 1304 	col = 24 + 2 * len;
??input_screen_5:
        LDS     R24, ??len
        LSL     R24
        SUBI    R24, 232
        RJMP    ??input_screen_17
// 1305 	
// 1306 	while(1)
// 1307 	{
// 1308 		if(IS_PEN == 0)
// 1309 		{
// 1310 			TOUCH_getdata();
// 1311 			temp_int = get_touch_key();
// 1312 			touch_key_blink_01(temp_int,100);
// 1313 			
// 1314 			if(temp_int <= 9 || temp_int == 16 || temp_int == 17)
// 1315 			{
// 1316 				if(temp_int <= 9)
// 1317 				{
// 1318 					if(col >= 24 & col< 24 + 2 * len)
// 1319 					{
// 1320 						buffer[0] = 48 + temp_int;
// 1321 						buffer[1] = 0;
// 1322 						LCD_distring(buffer,col,24,0);
// 1323 						
// 1324 						i = (col - 24) / 2;
// 1325 						
// 1326 						*(input_result + i) = temp_int + 48;
// 1327 						col += 2;
// 1328 					}
// 1329 				}
// 1330 				else if(temp_int == 16)
// 1331 				{
// 1332 					if(col == 24 + 2 * len)
// 1333 					{
// 1334 						col = 24;
// 1335 						LCD_distring("          ",col,24,0);
// 1336 						switch(flag)
// 1337 						{
// 1338 							case INPUT_MODEL:
// 1339 								for(i=0;i<6;i++)
// 1340 								{
// 1341 									ee_model[i] = g_model[i]; 
// 1342 								}
// 1343 							break;
// 1344 							
// 1345 							case INPUT_YEAR:
// 1346 								for(i=0;i<2;i++)
// 1347 								{
// 1348 									ee_year[i] = g_year[i];
// 1349 								}
// 1350 							break;
// 1351 							
// 1352 							case INPUT_WEEK:
// 1353 								for(i=0;i<2;i++)
// 1354 								{
// 1355 									ee_week[i] = g_week[i];
// 1356 								}
// 1357 							break;
// 1358 							
// 1359 							case INPUT_SOFTWARE_VERSION:
// 1360 								for(i=0;i<6;i++)
// 1361 								{
// 1362 									ee_soft[i] = g_soft[i];
// 1363 								}
// 1364 							break;
// 1365 							
// 1366 							case INPUT_HARDWARE_VERSION:
// 1367 								for(i=0;i<2;i++)
// 1368 								{
// 1369 									ee_hard[i] = g_hard[i];
// 1370 								}
// 1371 							break;
// 1372 							
// 1373 							default:break;
// 1374 						}
// 1375 						return 0;
// 1376 					}
// 1377 				}
// 1378 				else if(temp_int == 17)
// 1379 				{
// 1380 					if(col >24)
// 1381 					{
// 1382 						LCD_distring(" ",col,24,0);
// 1383 						col -= 2;
// 1384 					}
// 1385 				}
// 1386 			}
// 1387 		}
// 1388 		
// 1389 		if(Time_delay.timer_flex2.time_out == 1)
// 1390 		{
// 1391 			temp = ~temp;
// 1392 			timer_flex2_initial(500);
// 1393 			if(temp)
// 1394 				LCD_distring("_",col,24,0);
// 1395 			else
// 1396 				LCD_distring(" ",col,24,0);
??input_screen_18:
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
??input_screen_19:
        CALL    LCD_distring
// 1397 		}
// 1398 		
// 1399 		light_adj();
??input_screen_20:
        CALL    light_adj
??input_screen_17:
        SBIC    0x09, 0x05
        RJMP    ??input_screen_21
        CALL    TOUCH_getdata
        CALL    get_touch_key
        MOV     R26, R16
        LDI     R27, 0
        LDI     R18, 100
        LDI     R19, 0
        RCALL   touch_key_blink_01
        CPI     R26, 10
        CPC     R27, R27
        BRCS    ??input_screen_22
        CPI     R26, 16
        CPC     R27, R27
        BREQ    ??input_screen_22
        CPI     R26, 17
        CPC     R27, R27
        BREQ    $+2+2
        RJMP    ??input_screen_21
??input_screen_22:
        CPI     R26, 10
        CPC     R27, R27
        BRCC    ??input_screen_23
        CPI     R24, 24
        BRCC    $+2+2
        RJMP    ??input_screen_21
        MOV     R18, R24
        LDI     R19, 0
        LDS     R16, ??len
        LDI     R17, 2
        MUL     R16, R17
        LDI     R16, 24
        ADD     R0, R16
        ADC     R1, R27
        CP      R18, R0
        CPC     R19, R1
        BRLT    $+2+2
        RJMP    ??input_screen_21
        SUBI    R26, 208
        ST      Y, R26
        STD     Y+1, R27
        LDI     R20, 0
        LDI     R19, 24
        MOVW    R17:R16, R29:R28
        CALL    LCD_distring
        MOV     R16, R24
        LDI     R17, 0
        SUBI    R16, 24
        SBCI    R17, 0
        LDI     R20, 2
        LDI     R21, 0
        CALL    ?SS_DIVMOD_L02
        MOVW    R31:R30, R5:R4
        ADD     R30, R16
        ADC     R31, R27
        ST      Z, R26
        SUBI    R24, 254
        RJMP    ??input_screen_21
??input_screen_23:
        CPI     R26, 16
        CPC     R27, R27
        BREQ    $+2+2
        RJMP    ??input_screen_24
        MOV     R18, R24
        LDI     R19, 0
        LDS     R16, ??len
        LDI     R17, 2
        MUL     R16, R17
        LDI     R16, 24
        ADD     R0, R16
        ADC     R1, R27
        CP      R18, R0
        CPC     R19, R1
        BREQ    $+2+2
        RJMP    ??input_screen_21
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 24
        LDI     R16, LOW((`?<Constant "0">` + 375))
        LDI     R17, HIGH((`?<Constant "0">` + 375))
        CALL    LCD_distring
        MOV     R16, R6
        SUBI    R16, 0
        BREQ    ??input_screen_25
        DEC     R16
        BREQ    ??input_screen_26
        DEC     R16
        BREQ    ??input_screen_27
        DEC     R16
        BREQ    ??input_screen_28
        DEC     R16
        BRNE    $+2+2
        RJMP    ??input_screen_29
        RJMP    ??input_screen_30
??input_screen_25:
        LDI     R18, 0
??input_screen_31:
        CPI     R18, 6
        BRCS    $+2+2
        RJMP    ??input_screen_30
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_model) & 0xFFFF))
        SBCI    R31, (-(g_model) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_model)
        LDI     R21, (ee_model) >> 8
        ADD     R20, R18
        ADC     R21, R27
        CALL    __eeput8_16
        INC     R18
        RJMP    ??input_screen_31
??input_screen_26:
        LDI     R18, 0
??input_screen_32:
        CPI     R18, 2
        BRCC    ??input_screen_30
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_year) & 0xFFFF))
        SBCI    R31, (-(g_year) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_year)
        LDI     R21, (ee_year) >> 8
        ADD     R20, R18
        ADC     R21, R27
        CALL    __eeput8_16
        INC     R18
        RJMP    ??input_screen_32
??input_screen_27:
        LDI     R18, 0
??input_screen_33:
        CPI     R18, 2
        BRCC    ??input_screen_30
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_week) & 0xFFFF))
        SBCI    R31, (-(g_week) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_week)
        LDI     R21, (ee_week) >> 8
        ADD     R20, R18
        ADC     R21, R27
        CALL    __eeput8_16
        INC     R18
        RJMP    ??input_screen_33
??input_screen_28:
        LDI     R18, 0
??input_screen_34:
        CPI     R18, 6
        BRCC    ??input_screen_30
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_soft) & 0xFFFF))
        SBCI    R31, (-(g_soft) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_soft)
        LDI     R21, (ee_soft) >> 8
        ADD     R20, R18
        ADC     R21, R27
        CALL    __eeput8_16
        INC     R18
        RJMP    ??input_screen_34
??input_screen_29:
        LDI     R18, 0
        RJMP    ??input_screen_35
??input_screen_36:
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_hard) & 0xFFFF))
        SBCI    R31, (-(g_hard) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_hard)
        LDI     R21, (ee_hard) >> 8
        ADD     R20, R18
        ADC     R21, R27
        CALL    __eeput8_16
        INC     R18
??input_screen_35:
        CPI     R18, 2
        BRCS    ??input_screen_36
??input_screen_30:
        LDI     R16, 0
        ADIW    R29:R28, 3
        CFI CFA_Y Y+7
        LDI     R30, 7
        JMP     ?EPILOGUE_B7_L09
        CFI CFA_Y Y+10
??input_screen_24:
        CPI     R26, 17
        CPC     R27, R27
        BRNE    ??input_screen_21
        CPI     R24, 25
        BRCS    ??input_screen_21
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
        CALL    LCD_distring
        SUBI    R24, 2
??input_screen_21:
        LDS     R16, (Time_delay + 212)
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??input_screen_20
        COM     R25
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
        TST     R25
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        BRNE    $+2+2
        RJMP    ??input_screen_18
        LDI     R16, LOW((`?<Constant "0">` + 196))
        LDI     R17, HIGH((`?<Constant "0">` + 196))
        RJMP    ??input_screen_19
        CFI EndBlock cfiBlock18
        REQUIRE _A_PIND
// 1400 	}
// 1401 }

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??len:
        DS8 1
// 1402 

        RSEG CODE:CODE:NOROOT(1)
// 1403 unsigned char test_screen(unsigned char *title,unsigned char *input_result)
test_screen:
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function test_screen
// 1404 {
        FUNCALL test_screen, strlen
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_Clr
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, timer_flex2_initial
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, led_blinking_disable
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, light_adj
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, all_reception_buffer_clear
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, decode_SCS
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, led_blinking_disable
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, led_blinking_disable
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, led_blinking
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strcmp
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strcmp
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, strncpy
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, timer_flex_initial
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, id_setting
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, timer_flex_initial
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, PnG_048820
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, TOUCH_getdata
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, get_touch_key
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, touch_key_blink_02
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, led_blinking_disable
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, StrToChar
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, timer_flex_initial
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, timer_flex2_initial
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL test_screen, LCD_distring
        LOCFRAME CSTACK, 63, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE8_L09
        CFI R7 Frame(CFA_Y, -1)
        CFI R6 Frame(CFA_Y, -2)
        CFI R5 Frame(CFA_Y, -3)
        CFI R4 Frame(CFA_Y, -4)
        CFI R27 Frame(CFA_Y, -5)
        CFI R26 Frame(CFA_Y, -6)
        CFI R25 Frame(CFA_Y, -7)
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        SBIW    R29:R28, 55
        CFI CFA_Y Y+63
        MOVW    R27:R26, R17:R16
        MOVW    R7:R6, R19:R18
// 1405 	unsigned char temp = 0;
        LDI     R25, 0
// 1406 	unsigned char col = 24;
        LDI     R24, 24
// 1407 	unsigned char buffer[3];
// 1408 	unsigned int temp_int;
// 1409 	unsigned char buffer_tx[17];
// 1410 	unsigned char buffer_tx_short[9];
// 1411 	unsigned char model;
// 1412 	unsigned char buffer_last_8[9];
// 1413 	unsigned char buffer_last_16[17];
// 1414 	
// 1415 	unsigned char i;
// 1416 	static unsigned char len;
// 1417 	len = strlen(input_result);
        MOVW    R17:R16, R7:R6
        CALL    strlen
        STS     ??len_1, R16
// 1418 		
// 1419 	LCD_Clr();
        CALL    LCD_Clr
// 1420 	LCD_distring(title, 12, 4, 0);
        LDI     R20, 0
        LDI     R19, 4
        LDI     R18, 12
        MOVW    R17:R16, R27:R26
        CALL    LCD_distring
// 1421 	LCD_distring("   Input:", 0, 24, 0);
        LDI     R20, 0
        LDI     R19, 24
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 365))
        LDI     R17, HIGH((`?<Constant "0">` + 365))
        CALL    LCD_distring
// 1422 	LCD_distring("   Frame:", 0, 36, 0);
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 0
        LDI     R16, LOW((`?<Constant "0">` + 386))
        LDI     R17, HIGH((`?<Constant "0">` + 386))
        CALL    LCD_distring
// 1423 	//LCD_distring("123456789012345678901234567", 0, 38, 0);
// 1424 	LCD_distring("1    2    3     ", 10, 48, 0);
        LDI     R20, 0
        LDI     R19, 48
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 69))
        LDI     R17, HIGH((`?<Constant "0">` + 69))
        CALL    LCD_distring
// 1425 	LCD_distring("4    5    6     ", 10, 72, 0);
        LDI     R20, 0
        LDI     R19, 72
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 86))
        LDI     R17, HIGH((`?<Constant "0">` + 86))
        CALL    LCD_distring
// 1426 	LCD_distring("7    8    9     ", 10, 96, 0);
        LDI     R20, 0
        LDI     R19, 96
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 103))
        LDI     R17, HIGH((`?<Constant "0">` + 103))
        CALL    LCD_distring
// 1427 	LCD_distring("     0          ", 10, 120, 0);
        LDI     R20, 0
        LDI     R19, 120
        LDI     R18, 10
        LDI     R16, LOW((`?<Constant "0">` + 120))
        LDI     R17, HIGH((`?<Constant "0">` + 120))
        CALL    LCD_distring
// 1428 	LCD_distring("Delete", 2, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 2
        LDI     R16, LOW((`?<Constant "0">` + 40))
        LDI     R17, HIGH((`?<Constant "0">` + 40))
        CALL    LCD_distring
// 1429 	//LCD_distring("Again", 10, 140, 0);		//alan		18
// 1430 	//LCD_distring("Next", 24, 140, 0);			//alan		19
// 1431 	LCD_distring("  PnG ", 36, 140, 0);
        LDI     R20, 0
        LDI     R19, 140
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 52))
        LDI     R17, HIGH((`?<Constant "0">` + 52))
        CALL    LCD_distring
// 1432 	
// 1433 	timer_flex2_initial(500);
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
// 1434 	g_lux[0] = '0';
        LDI     R30, LOW(g_lux)
        LDI     R31, (g_lux) >> 8
        LDI     R16, 48
        ST      Z, R16
// 1435 	g_lux[1] = '0';
        STD     Z+1, R16
// 1436 	g_lux[2] = '0';
        STD     Z+2, R16
// 1437 	g_lux[3] = '0';
        STD     Z+3, R16
// 1438 	g_lux[4] = 0;
        LDI     R16, 0
        STD     Z+4, R25
// 1439 	
// 1440 	for(i=0;i<16;i++)
        RJMP    ??test_screen_0
// 1441 	{
// 1442 		buffer_last_16[i] = 0x00;
??test_screen_1:
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 38
        ADD     R30, R16
        ADC     R31, R25
        ST      Z, R25
// 1443 	}
        INC     R16
??test_screen_0:
        CPI     R16, 16
        BRCS    ??test_screen_1
// 1444 	
// 1445 	for(i=0;i<8;i++)
        LDI     R16, 0
        RJMP    ??test_screen_2
// 1446 	{
// 1447 		buffer_last_8[i] = 0x00;
??test_screen_3:
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        ADD     R30, R16
        ADC     R31, R25
        ST      Z, R25
// 1448 	}
        INC     R16
??test_screen_2:
        CPI     R16, 8
        BRCS    ??test_screen_3
// 1449 	
// 1450 	buffer_tx[16] = 0;
        STD     Y+37, R25
// 1451 	buffer_last_16[16] = 0;
        STD     Y+54, R25
// 1452 	
// 1453 	buffer_tx_short[8] = 0;
        STD     Y+20, R25
// 1454 	
// 1455 	product_information.conf_type = ADVANCED;
        LDI     R16, 2
        STS     product_information, R16
// 1456 	led_blinking_disable(0);
        LDI     R16, 0
        CALL    led_blinking_disable
        RJMP    ??test_screen_4
// 1457 	
// 1458 	while(1)
// 1459 	{
// 1460 		while(decode_SCS());
// 1461 		
// 1462 		if(g_asc_short_buffer[2] == 0x12)
// 1463 		{
// 1464 			if(g_asc_short_buffer[3] == 0x00)
// 1465 			{
// 1466 				led_blinking_disable(1);
// 1467 			}
// 1468 			else if(g_asc_short_buffer[3] == 0x01)
// 1469 			{
// 1470 				led_blinking_disable(0);
// 1471 			}
// 1472 		}
// 1473 		else if(g_asc_short_buffer[2] == 0x1D)
// 1474 		{
// 1475 			if(g_asc_short_buffer[3] == 0x00)
// 1476 			{
// 1477 				led_blinking(500,500);
// 1478 			}
// 1479 		}
// 1480 		
// 1481 		strncpy(buffer_tx,g_reception_buffer,16);
// 1482 
// 1483 		strncpy(buffer_tx_short,g_short_buffer,8);
// 1484 		
// 1485 		if(strcmp(buffer_last_16,buffer_tx))
// 1486 		{
// 1487 			LCD_distring(buffer_last_16,20,36,0);
// 1488 			strncpy(buffer_last_16,buffer_tx,16);
// 1489 		}
// 1490 		else if(strcmp(buffer_last_8,buffer_tx_short))
// 1491 		{
// 1492 			LCD_distring(buffer_last_8,20,36,0);
// 1493 			LCD_distring("        ",20+16,36,0);
// 1494 			strncpy(buffer_last_8,buffer_tx_short,8);
// 1495 		}
// 1496 		
// 1497 		switch(state.main_state)
// 1498 		{
// 1499 			case AFTER_REQUEST_ID:
// 1500 				if(Time_delay.timer_flex.time_out == 0)
// 1501 				{
// 1502 					if(g_asc_reception_buffer[0] == 0xD0 && g_reception_buffer[7] == '4')
// 1503 					{
// 1504 						strncpy(buffer_tx,"D000010600000000",17);
// 1505 						strncpy(&buffer_tx[8],&g_reception_buffer[8],8);
// 1506 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1507 						timer_flex_initial(4000);
// 1508 						state.main_state = FINAL_STEP1;
// 1509 						asm("nop");
// 1510 					}
// 1511 				}
// 1512 				else
// 1513 				{
// 1514 					id_setting("FFFFFFFF");
// 1515 					send_frame_pp_ext_broad("D000010300000000",TRANS_DELAY);
// 1516 					timer_flex_initial(1000);
// 1517 					state.main_state = AFTER_REQUEST_ID;
// 1518 				}
// 1519 			break;
// 1520 			
// 1521 			case FINAL_STEP1:
// 1522 				if(Time_delay.timer_flex.time_out == 0)
// 1523 				{
// 1524 					if(g_asc_reception_buffer[3] == 0x34 && g_asc_reception_buffer[4] == 0x80)
// 1525 					{
// 1526 						model = g_asc_reception_buffer[7];
// 1527 						state.main_state = FINAL_STEP2;
// 1528 					}
// 1529 				}
// 1530 			break;
// 1531 			
// 1532 			case FINAL_STEP2:
// 1533 				if(Time_delay.timer_flex.time_out == 0)
// 1534 				{
// 1535 					if(g_asc_reception_buffer[3] == 0x34 && g_asc_reception_buffer[4] == 0x8B)
// 1536 					{
// 1537 						if(g_asc_reception_buffer[5] == 0x02 && g_asc_reception_buffer[6] == 0x03 && g_asc_reception_buffer[7] == 0x81)
// 1538 						{
// 1539 							state.main_state = FINAL_STEP3;
// 1540 						}
// 1541 					}
// 1542 				}
// 1543 				else if(Time_delay.timer_flex.time_out == 1)
// 1544 				{
// 1545 					send_frame_pp_ext_broad("D20101428C0000FF",TRANS_DELAY);
// 1546 					state.main_state = NORMAL;
// 1547 				}
// 1548 			break;
// 1549 			
// 1550 			case FINAL_STEP3:
// 1551 				//if(Time_delay.timer_flex.time_out)
// 1552 				if((g_asc_reception_buffer[3] == 0x34 && g_asc_reception_buffer[4] == 0x8C && g_asc_reception_buffer[7] == 0xAA) || Time_delay.timer_flex.time_out)
// 1553 				{
// 1554 					switch(model)
// 1555 					{
// 1556 						case 0x20:
// 1557 						case 0x21:
// 1558 						case 0x22:
// 1559 						case 0x23:
// 1560 						case 0x24:
// 1561 						case 0x25:
// 1562 						case 0x26:
// 1563 						case 0x29:
// 1564 						case 0x2A:
// 1565 							PnG_048820();
// 1566 							state.main_state = FINAL_STEP4;
// 1567 						break;
// 1568 						default:break;
// 1569 					}
// 1570 					asm("nop");
// 1571 				}
// 1572 			break;
// 1573 			
// 1574 			default:break;
// 1575 		}
// 1576 		
// 1577 		if(IS_PEN == 0)
// 1578 		{
// 1579 			TOUCH_getdata();
// 1580 			temp_int = get_touch_key();
// 1581 			touch_key_blink_02(temp_int,100);
// 1582 			
// 1583 			if(temp_int <= 9 || temp_int == 16 || temp_int == 17)
// 1584 			{
// 1585 				if(temp_int <= 9)
// 1586 				{
// 1587 					if(col >= 24 & col< 24 + 2 * len)
// 1588 					{
// 1589 						buffer[0] = 48 + temp_int;
// 1590 						buffer[1] = 0;
// 1591 						LCD_distring(buffer,col,24,0);
// 1592 						
// 1593 						i = (col - 24) / 2;
// 1594 						
// 1595 						*(input_result + i) = temp_int + 48;
// 1596 						col += 2;
// 1597 					}
// 1598 				}
// 1599 				else if(temp_int == 16)
// 1600 				{
// 1601 					led_blinking_disable(0);
// 1602 					
// 1603 					if(col == 24 + 2 * len)
// 1604 					{
// 1605 						//col = 24;
// 1606 						//LCD_distring("          ",col,24,0);
// 1607 						//return 0;
// 1608 						
// 1609 						if(g_model[0] == '0' && g_model[1] == '4' && g_model[2] == '8' && g_model[3] == '8')
// 1610 						{
// 1611 							buffer[0] = g_model[4];
// 1612 							buffer[1] = g_model[5];
// 1613 							buffer[2] = 0;
// 1614 							
// 1615 							switch(StrToChar(buffer))
// 1616 							{
// 1617 								case 0x20:
// 1618 								case 0x21:
// 1619 								case 0x22:
// 1620 								case 0x23:
// 1621 								case 0x24:
// 1622 								case 0x25:
// 1623 								case 0x26:
// 1624 								case 0x29:
// 1625 								case 0x30:
// 1626 									send_frame_pp_ext_broad("D000010300000000",TRANS_DELAY);
// 1627 									timer_flex_initial(1000);
// 1628 									state.main_state = AFTER_REQUEST_ID;
// 1629 								break;
// 1630 								default:break;
// 1631 							}
// 1632 						}
// 1633 					}
// 1634 				}
// 1635 				else if(temp_int == 17)
// 1636 				{
// 1637 					if(col >24)
// 1638 					{
// 1639 						LCD_distring(" ",col,24,0);
// 1640 						col -= 2;
// 1641 					}
// 1642 				}
// 1643 			}
// 1644 		}
// 1645 		
// 1646 		if(Time_delay.timer_flex2.time_out == 1)
// 1647 		{
// 1648 			temp = ~temp;
// 1649 			timer_flex2_initial(500);
// 1650 			if(temp)
// 1651 				LCD_distring("_",col,24,0);
// 1652 			else
// 1653 				LCD_distring(" ",col,24,0);
??test_screen_5:
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
??test_screen_6:
        CALL    LCD_distring
// 1654 		}
// 1655 		
// 1656 		light_adj();
??test_screen_7:
        CALL    light_adj
// 1657 		
// 1658 		//delay_ms(10);
// 1659 		all_reception_buffer_clear();
        CALL    all_reception_buffer_clear
??test_screen_4:
        CALL    decode_SCS
        TST     R16
        BRNE    ??test_screen_4
        LDI     R30, LOW(g_asc_short_buffer)
        LDI     R31, (g_asc_short_buffer) >> 8
        LDD     R16, Z+2
        CPI     R16, 18
        BRNE    ??test_screen_8
        LDD     R16, Z+3
        TST     R16
        BRNE    ??test_screen_9
        LDI     R16, 1
??test_screen_10:
        CALL    led_blinking_disable
        RJMP    ??test_screen_11
??test_screen_9:
        LDD     R16, Z+3
        CPI     R16, 1
        BRNE    ??test_screen_11
        LDI     R16, 0
        RJMP    ??test_screen_10
??test_screen_8:
        LDD     R16, Z+2
        CPI     R16, 29
        BRNE    ??test_screen_11
        LDD     R16, Z+3
        TST     R16
        BRNE    ??test_screen_11
        LDI     R20, 244
        LDI     R21, 1
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    led_blinking
??test_screen_11:
        LDI     R20, 16
        LDI     R21, 0
        LDI     R18, LOW(g_reception_buffer)
        LDI     R19, (g_reception_buffer) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 235
        SBCI    R17, 255
        CALL    strncpy
        LDI     R20, 8
        LDI     R21, 0
        LDI     R18, LOW(g_short_buffer)
        LDI     R19, (g_short_buffer) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 244
        SBCI    R17, 255
        CALL    strncpy
        MOVW    R19:R18, R29:R28
        SUBI    R18, 235
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 218
        SBCI    R17, 255
        CALL    strcmp
        OR      R16, R17
        BREQ    ??test_screen_12
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 20
        MOVW    R17:R16, R29:R28
        SUBI    R16, 218
        SBCI    R17, 255
        CALL    LCD_distring
        LDI     R20, 16
        LDI     R21, 0
        MOVW    R19:R18, R29:R28
        SUBI    R18, 235
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 218
        RJMP    ??test_screen_13
??test_screen_12:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 244
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strcmp
        OR      R16, R17
        BREQ    ??test_screen_14
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 20
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    LCD_distring
        LDI     R20, 0
        LDI     R19, 36
        LDI     R18, 36
        LDI     R16, LOW((`?<Constant "0">` + 396))
        LDI     R17, HIGH((`?<Constant "0">` + 396))
        CALL    LCD_distring
        LDI     R20, 8
        LDI     R21, 0
        MOVW    R19:R18, R29:R28
        SUBI    R18, 244
        SBCI    R19, 255
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
??test_screen_13:
        SBCI    R17, 255
        CALL    strncpy
??test_screen_14:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        LDI     R30, LOW(`?<Jumptable for test_screen>_0`)
        LDI     R31, (`?<Jumptable for test_screen>_0`) >> 8
        JMP     ?SV_SWITCH_L06
??test_screen_15:
        LDS     R16, (Time_delay + 157)
        TST     R16
        BRNE    ??test_screen_16
        LDS     R16, g_asc_reception_buffer
        CPI     R16, 208
        BREQ    $+2+2
        RJMP    ??test_screen_17
        LDS     R16, (g_reception_buffer + 7)
        CPI     R16, 52
        BREQ    $+2+2
        RJMP    ??test_screen_17
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "0">` + 405))
        LDI     R19, HIGH((`?<Constant "0">` + 405))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 235
        SBCI    R17, 255
        CALL    strncpy
        LDI     R20, 8
        LDI     R21, 0
        LDI     R18, LOW((g_reception_buffer + 8))
        LDI     R19, HIGH((g_reception_buffer + 8))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 227
        SBCI    R17, 255
        CALL    strncpy
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 235
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        LDI     R16, 160
        LDI     R17, 15
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
        LDI     R16, 72
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        nop
        RJMP    ??test_screen_17
??test_screen_16:
        LDI     R16, LOW((`?<Constant "0">` + 422))
        LDI     R17, HIGH((`?<Constant "0">` + 422))
        CALL    id_setting
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 431))
        LDI     R17, HIGH((`?<Constant "0">` + 431))
        CALL    send_frame_pp_ext_broad
        LDI     R16, 232
        LDI     R17, 3
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
        LDI     R16, 71
??test_screen_18:
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??test_screen_17
??test_screen_19:
        LDS     R16, (Time_delay + 157)
        TST     R16
        BREQ    $+2+2
        RJMP    ??test_screen_17
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+3
        CPI     R16, 52
        BREQ    $+2+2
        RJMP    ??test_screen_17
        LDD     R16, Z+4
        CPI     R16, 128
        BREQ    $+2+2
        RJMP    ??test_screen_17
        LDD     R4, Z+7
        LDI     R16, 73
        RJMP    ??test_screen_18
??test_screen_20:
        LDS     R16, (Time_delay + 157)
        TST     R16
        BRNE    ??test_screen_21
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+3
        CPI     R16, 52
        BRNE    ??test_screen_17
        LDD     R16, Z+4
        CPI     R16, 139
        BRNE    ??test_screen_17
        LDD     R16, Z+5
        CPI     R16, 2
        BRNE    ??test_screen_17
        LDD     R16, Z+6
        CPI     R16, 3
        BRNE    ??test_screen_17
        LDD     R16, Z+7
        CPI     R16, 129
        BRNE    ??test_screen_17
        LDI     R16, 74
        RJMP    ??test_screen_18
??test_screen_21:
        LDS     R16, (Time_delay + 157)
        CPI     R16, 1
        BRNE    ??test_screen_17
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 448))
        LDI     R17, HIGH((`?<Constant "0">` + 448))
        CALL    send_frame_pp_ext_broad
        LDI     R16, 0
        STS     (state + 2), R16
        STS     (state + 3), R16
        RJMP    ??test_screen_17
??test_screen_22:
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+3
        CPI     R16, 52
        BRNE    ??test_screen_23
        LDD     R16, Z+4
        CPI     R16, 140
        BRNE    ??test_screen_23
        LDD     R16, Z+7
        CPI     R16, 170
        BREQ    ??test_screen_24
??test_screen_23:
        LDS     R16, (Time_delay + 157)
        TST     R16
        BREQ    ??test_screen_17
??test_screen_24:
        MOV     R16, R4
        SUBI    R16, 32
        SUBI    R16, 7
        BRCS    ??test_screen_25
        SUBI    R16, 2
        BREQ    ??test_screen_25
        DEC     R16
        BRNE    ??test_screen_26
??test_screen_25:
        RCALL   PnG_048820
        LDI     R16, 75
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
??test_screen_26:
        nop
??test_screen_17:
        SBIC    0x09, 0x05
        RJMP    ??test_screen_27
        CALL    TOUCH_getdata
        CALL    get_touch_key
        MOV     R26, R16
        LDI     R27, 0
        LDI     R18, 100
        LDI     R19, 0
        CALL    touch_key_blink_02
        CPI     R26, 10
        LDI     R16, 0
        CPC     R27, R16
        BRCS    ??test_screen_28
        CPI     R26, 16
        CPC     R27, R16
        BREQ    ??test_screen_28
        CPI     R26, 17
        CPC     R27, R16
        BREQ    $+2+2
        RJMP    ??test_screen_27
??test_screen_28:
        CPI     R26, 10
        CPC     R27, R16
        BRCC    ??test_screen_29
        CPI     R24, 24
        BRCC    $+2+2
        RJMP    ??test_screen_27
        MOV     R18, R24
        LDI     R19, 0
        LDS     R16, ??len_1
        LDI     R17, 2
        MUL     R16, R17
        LDI     R16, 24
        ADD     R0, R16
        ADC     R1, R27
        CP      R18, R0
        CPC     R19, R1
        BRLT    $+2+2
        RJMP    ??test_screen_27
        SUBI    R26, 208
        ST      Y, R26
        STD     Y+1, R27
        LDI     R20, 0
        LDI     R19, 24
        MOVW    R17:R16, R29:R28
        CALL    LCD_distring
        MOV     R16, R24
        LDI     R17, 0
        SUBI    R16, 24
        SBCI    R17, 0
        LDI     R20, 2
        LDI     R21, 0
        CALL    ?SS_DIVMOD_L02
        MOVW    R31:R30, R7:R6
        ADD     R30, R16
        ADC     R31, R27
        ST      Z, R26
        SUBI    R24, 254
        RJMP    ??test_screen_27
??test_screen_29:
        CPI     R26, 16
        CPC     R27, R16
        BRNE    ??test_screen_30
        CALL    led_blinking_disable
        MOV     R18, R24
        LDI     R19, 0
        LDS     R16, ??len_1
        LDI     R17, 2
        MUL     R16, R17
        LDI     R16, 24
        ADD     R0, R16
        ADC     R1, R27
        CP      R18, R0
        CPC     R19, R1
        BRNE    ??test_screen_27
        LDI     R30, LOW(g_model)
        LDI     R31, (g_model) >> 8
        LD      R16, Z
        CPI     R16, 48
        BRNE    ??test_screen_27
        LDD     R16, Z+1
        CPI     R16, 52
        BRNE    ??test_screen_27
        LDD     R16, Z+2
        CPI     R16, 56
        BRNE    ??test_screen_27
        LDD     R16, Z+3
        CPI     R16, 56
        BRNE    ??test_screen_27
        LDD     R16, Z+4
        ST      Y, R16
        LDD     R16, Z+5
        STD     Y+1, R16
        STD     Y+2, R27
        MOVW    R17:R16, R29:R28
        CALL    StrToChar
        SUBI    R16, 32
        SUBI    R16, 7
        BRCS    ??test_screen_31
        SUBI    R16, 2
        BREQ    ??test_screen_31
        SUBI    R16, 7
        BRNE    ??test_screen_27
??test_screen_31:
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 431))
        LDI     R17, HIGH((`?<Constant "0">` + 431))
        CALL    send_frame_pp_ext_broad
        LDI     R16, 232
        LDI     R17, 3
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
        LDI     R16, 71
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??test_screen_27
??test_screen_30:
        CPI     R26, 17
        CPC     R27, R27
        BRNE    ??test_screen_27
        CPI     R24, 25
        BRCS    ??test_screen_27
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        LDI     R16, LOW((`?<Constant "0">` + 194))
        LDI     R17, HIGH((`?<Constant "0">` + 194))
        CALL    LCD_distring
        SUBI    R24, 2
??test_screen_27:
        LDS     R16, (Time_delay + 212)
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??test_screen_7
        COM     R25
        LDI     R16, 244
        LDI     R17, 1
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex2_initial
        TST     R25
        LDI     R20, 0
        LDI     R19, 24
        MOV     R18, R24
        BRNE    $+2+2
        RJMP    ??test_screen_5
        LDI     R16, LOW((`?<Constant "0">` + 196))
        LDI     R17, HIGH((`?<Constant "0">` + 196))
        RJMP    ??test_screen_6
        CFI EndBlock cfiBlock19
        REQUIRE _A_PIND
// 1660 	}
// 1661 }

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??len_1:
        DS8 1
// 1662 

        RSEG CODE:CODE:NOROOT(1)
// 1663 void PnG_048820(void)
PnG_048820:
        CFI Block cfiBlock20 Using cfiCommon1
        CFI Function PnG_048820
// 1664 {
// 1665 	send_frame_pp_ext_broad("D20101428B00A801",TRANS_DELAY +50);
        FUNCALL PnG_048820, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, setting_parameter
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL PnG_048820, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R18, 100
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 465))
        LDI     R17, HIGH((`?<Constant "0">` + 465))
        CALL    send_frame_pp_ext_broad
// 1666 	//send_frame_pp_ext_broad("D20101428D020101",TRANS_DELAY);
// 1667 	setting_parameter(0x02,0x01);
        LDI     R17, 1
        LDI     R16, 2
        RCALL   setting_parameter
// 1668 	//send_frame_pp_ext_broad("D20101428D020501",TRANS_DELAY);
// 1669 	setting_parameter(0x02,0x05);
        LDI     R17, 5
        LDI     R16, 2
        RCALL   setting_parameter
// 1670 	//send_frame_pp_ext_broad("D20101428D020601",TRANS_DELAY);
// 1671 	setting_parameter(0x02,0x06);
        LDI     R17, 6
        LDI     R16, 2
        RCALL   setting_parameter
// 1672 	//send_frame_pp_ext_broad("D20101428D000701",TRANS_DELAY);
// 1673 	setting_parameter(0x00,0x07);
        LDI     R17, 7
        LDI     R16, 0
        RCALL   setting_parameter
// 1674 	//send_frame_pp_ext_broad("D20101428D000801",TRANS_DELAY);
// 1675 	setting_parameter(0x00,0x08);
        LDI     R17, 8
        LDI     R16, 0
        RCALL   setting_parameter
// 1676 	//send_frame_pp_ext_broad("D20101428D010D01",TRANS_DELAY);
// 1677 	setting_parameter(0x01,0x0D);
        LDI     R17, 13
        LDI     R16, 1
        RCALL   setting_parameter
// 1678 	//send_frame_pp_ext_broad("D20101428D010E01",TRANS_DELAY);
// 1679 	setting_parameter(0x01,0x0E);
        LDI     R17, 14
        LDI     R16, 1
        RCALL   setting_parameter
// 1680 	//send_frame_pp_ext_broad("D20101428D011C01",TRANS_DELAY);
// 1681 	setting_parameter(0x01,0x1C);
        LDI     R17, 28
        LDI     R16, 1
        RCALL   setting_parameter
// 1682 	//send_frame_pp_ext_broad("D20101428D021D01",TRANS_DELAY);
// 1683 	setting_parameter(0x02,0x1D);
        LDI     R17, 29
        LDI     R16, 2
        RCALL   setting_parameter
// 1684 	send_frame_pp_ext_broad("D20101428C0000AA",TRANS_DELAY + 50);
        LDI     R18, 100
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 482))
        LDI     R17, HIGH((`?<Constant "0">` + 482))
        CALL    send_frame_pp_ext_broad
// 1685 	send_frame_pp_ext_broad("D20101428C0000FF",TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "0">` + 448))
        LDI     R17, HIGH((`?<Constant "0">` + 448))
        CALL    send_frame_pp_ext_broad
// 1686 }
        RET
        CFI EndBlock cfiBlock20
// 1687 

        RSEG CODE:CODE:NOROOT(1)
// 1688 void setting_parameter(unsigned char value, unsigned char index)
setting_parameter:
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function setting_parameter
// 1689 {
        FUNCALL setting_parameter, CharToStr
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL setting_parameter, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL setting_parameter, CharToStr
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL setting_parameter, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 20
        CFI CFA_Y Y+21
        MOV     R24, R17
// 1690 	unsigned char buffer[3];
// 1691 	unsigned char buffer_tx[17];
// 1692 	//CharToStr(KO_conf.PirSens,buffer);
// 1693 	CharToStr(value,buffer);
        MOVW    R19:R18, R29:R28
        CALL    CharToStr
// 1694 	strncpy(buffer_tx,"D20101428D020101",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D20101428D020101">`)
        LDI     R19, (`?<Constant "D20101428D020101">`) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 1695 	buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1696 	buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1697 	CharToStr(index,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 1698 	buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
// 1699 	buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
// 1700 	send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY + 50);
        LDI     R18, 100
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1701 }
        ADIW    R29:R28, 20
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock21
// 1702 /*
// 1703 void print_label(unsigned char *id,unsigned char *model, unsigned char *date, unsigned char *fireware_version, unsigned char *hardware_version)
// 1704 {
// 1705 	print_out("^XA~TA0~JSO^LT0^MMT^MNW^MTT^PON^PMN^LH0,0^JMA^PR2,2^MD30^JUS^LRN^CI0^XZ~DG001.GRF,00512,008,::::::::::::::::::::N020,N060,N0E0,M03B0,M0A28,J07FFC18,I0EA8A808,H01C0I01C,H0280J0A,H0601C007C,H0E2EA8AE8,018F071F,03B80BA8,03E00F,0A8008,07,0A,04,H8,,:::::::::::::::::::::::^XA^LL0120^PW296^BY32,32^FT247,54^BXN,2,200,0,0,1");
// 1706 	//modle & ID
// 1707 	print_out("^FH\\^FD048822 ID:00050162^FS"); 
// 1708 	print_out("^FO,31^FS");
// 1709 	print_out("^FT160,98^A0N,25,24^FH\\^FDID:00050162^FS");
// 1710 	print_out("^BY43,44^FT43,100^BXB,2,200,0,0,1");
// 1711 	print_out("^FH\\^FD048822 09W28 007 01 010000 ID:00050162^FS");
// 1712 	print_out("^FO,22^FS");
// 1713 	print_out("^FT124,100^A0B,18,16^FH\\^FDID:00050162^FS");
// 1714 	print_out("^FT160,64^XG001.GRF,1,1^FS");
// 1715 	print_out("^FO,26^FS");
// 1716 	print_out("^FT160,66^A0N,21,21^FH\\^FD048822^FS");
// 1717 	print_out("^FO,22^FS");
// 1718 	print_out("^FT101,100^A0B,18,16^FH\\^FD01 010000^FS");
// 1719 	print_out("^FO,22^FS");
// 1720 	print_out("^FT59,100^A0B,18,16^FH\\^FD048822^FS");
// 1721 	print_out("^FO,22^FS");
// 1722 	print_out("^FT79,100^A0B,18,16^FH\\^FD09W28 007^FS");
// 1723 	print_out("^PQ1,0,1,Y^XZ");
// 1724 	print_out("^XA^ID000.GRF^FS^XZ");
// 1725 }
// 1726 */
// 1727 

        RSEG CODE:CODE:NOROOT(1)
// 1728 unsigned char write_flash(unsigned char page, struct S_sensor_info sensor)
write_flash:
        CFI Block cfiBlock22 Using cfiCommon3
        CFI Function write_flash
// 1729 {
        FUNCALL write_flash, Buffer_Write_Byte
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL write_flash, Buffer_To_Page
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL write_flash, Cont_Flash_Read_Enable
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL write_flash, DF_SPI_RW
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL write_flash, DF_SPI_RW
        LOCFRAME CSTACK, 40, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -39)
        CFI CFA_Y Y+39
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -40)
        CFI CFA_Y Y+40
// 1730 	unsigned int i = 0;
        LDI     R24, 0
        LDI     R25, 0
// 1731 		
// 1732 	do
// 1733 	{
// 1734 		Buffer_Write_Byte(1,g_dataflash_page_address,sensor.date[i]);
??write_flash_0:
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 2
        ADD     R30, R24
        ADC     R31, R25
        LD      R17, Z
        LDS     R18, g_dataflash_page_address
        LDS     R19, (g_dataflash_page_address + 1)
        LDI     R16, 1
        CALL    Buffer_Write_Byte
// 1735 		i++;
        ADIW    R25:R24, 1
// 1736 		g_dataflash_page_address++;
        LDI     R30, LOW(g_dataflash_page_address)
        LDI     R31, (g_dataflash_page_address) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
// 1737 	}while(i < STRUCT_SENSOR_LENGTH_BYTE);
        CPI     R24, 38
        LDI     R16, 0
        CPC     R25, R16
        BRCS    ??write_flash_0
// 1738 	
// 1739 	if(g_dataflash_page_address >= STRUCT_SENSOR_LENGTH_BYTE * 6)
        LDS     R16, g_dataflash_page_address
        LDS     R17, (g_dataflash_page_address + 1)
        CPI     R16, 228
        LDI     R18, 0
        CPC     R17, R18
        BRCS    ??write_flash_1
// 1740 	{
// 1741 		ee_page++;
        LDI     R20, LOW(ee_page)
        LDI     R21, (ee_page) >> 8
        CALL    __eeget16_16
        SUBI    R16, 255
        SBCI    R17, 255
        LDI     R20, LOW(ee_page)
        LDI     R21, (ee_page) >> 8
        CALL    __eeput16_16
// 1742 		g_dataflash_page_address = 0;
        STS     g_dataflash_page_address, R18
        STS     (g_dataflash_page_address + 1), R18
// 1743 	}
// 1744 	
// 1745 	ee_page_address = g_dataflash_page_address;
??write_flash_1:
        LDS     R16, g_dataflash_page_address
        LDS     R17, (g_dataflash_page_address + 1)
        LDI     R20, LOW(ee_page_address)
        LDI     R21, (ee_page_address) >> 8
        CALL    __eeput16_16
// 1746 	/*
// 1747 	while(sensor.id[i] != 0x00)
// 1748 	{
// 1749 		Buffer_Write_Byte(1,i,sensor.id[i]);
// 1750 		++i;
// 1751 	}
// 1752 	*/
// 1753 	
// 1754 	//for(i=0;i<256;i++)
// 1755 		//Buffer_Write_Byte (1,i,0xA0);
// 1756 			
// 1757 	Buffer_To_Page (1,ee_page);             //transfer to DataFlash
        LDI     R20, LOW(ee_page)
        LDI     R21, (ee_page) >> 8
        CALL    __eeget16_16
        MOVW    R19:R18, R17:R16
        LDI     R16, 1
        CALL    Buffer_To_Page
// 1758 	Cont_Flash_Read_Enable (0,0);
        LDI     R18, 0
        LDI     R19, 0
        LDI     R16, 0
        LDI     R17, 0
        CALL    Cont_Flash_Read_Enable
// 1759 	
// 1760 	for (i=0;i<256;i++)
        LDI     R24, 0
        LDI     R25, 0
        RJMP    ??write_flash_2
// 1761 	{
// 1762 		g_page_buffer[i] = DF_SPI_RW(0x00);
??write_flash_3:
        LDI     R16, 0
        CALL    DF_SPI_RW
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_page_buffer) & 0xFFFF))
        SBCI    R31, (-(g_page_buffer) & 0xFFFF) >> 8
        ST      Z, R16
// 1763 	}
        ADIW    R25:R24, 1
??write_flash_2:
        CPI     R24, 0
        LDI     R16, 1
        CPC     R25, R16
        BRCS    ??write_flash_3
// 1764 	
// 1765 	if(g_page_buffer[0] != '0')
        LDS     R16, g_page_buffer
        CPI     R16, 48
        BREQ    ??write_flash_4
// 1766 	{
// 1767 		while(1);
??write_flash_5:
        RJMP    ??write_flash_5
// 1768 	}
// 1769 	
// 1770 	for(i=0;i<256;i++)
??write_flash_4:
        LDI     R24, 0
        LDI     R25, 0
        RJMP    ??write_flash_6
// 1771 	{
// 1772 			
// 1773 			if(i != DF_SPI_RW(0x00) )
??write_flash_7:
        LDI     R16, 0
        CALL    DF_SPI_RW
        LDI     R17, 0
        CP      R24, R16
        CPC     R25, R17
        BREQ    ??write_flash_8
// 1774 			{
// 1775 				asm("nop");       
        nop
// 1776 			}
// 1777 	}
??write_flash_8:
        ADIW    R25:R24, 1
??write_flash_6:
        CPI     R24, 0
        LDI     R16, 1
        CPC     R25, R16
        BRCS    ??write_flash_7
// 1778 	
// 1779 	asm("nop");
        nop
// 1780 	DF_CS_inactive;  
        SBI     0x08, 0x00
// 1781 	return 0;
        LDI     R16, 0
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+39
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+38
        ADIW    R29:R28, 38
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock22
        REQUIRE _A_PORTC
// 1782 }

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 28
`??TOUCH_INT??INTVEC 28`:
        JMP     TOUCH_INT

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "^FH\\\\^FD">>`:
        DC8 "^FH\\^FD"
`?<Initializer for <Constant "\\\\0D\\\\0AID:">>`:
        DC8 "\\0D\\0AID:"
`?<Initializer for <Constant "\\\\0D\\\\0A">>`:
        DC8 "\\0D\\0A"
`?<Initializer for <Constant " 007\\\\0D\\\\0A">>`:
        DC8 " 007\\0D\\0A"

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "048820">>`:
        DC8 "048820"
`?<Initializer for <Constant "048821">>`:
        DC8 "048821"
`?<Initializer for <Constant "048822">>`:
        DC8 "048822"
`?<Initializer for <Constant "048823">>`:
        DC8 "048823"
`?<Initializer for <Constant "048824">>`:
        DC8 "048824"
`?<Initializer for <Constant "048825">>`:
        DC8 "048825"
`?<Initializer for <Constant "048826">>`:
        DC8 "048826"
`?<Initializer for <Constant "048829">>`:
        DC8 "048829"
`?<Initializer for <Constant "048828">>`:
        DC8 "048828"
`?<Initializer for <Constant "048831">>`:
        DC8 "048831"
`?<Initializer for <Constant "048830">>`:
        DC8 "048830"
`?<Initializer for <Constant "BMSE3001">>`:
        DC8 "BMSE3001"
`?<Initializer for <Constant "BMSE3002">>`:
        DC8 "BMSE3002"
`?<Initializer for <Constant "BMSE3003">>`:
        DC8 "BMSE3003"
`?<Initializer for <Constant "BMSE2005">>`:
        DC8 "BMSE2005"
`?<Initializer for <Constant "BMSE2001">>`:
        DC8 "BMSE2001"
`?<Initializer for <Constant "BMSE2002">>`:
        DC8 "BMSE2002"
`?<Initializer for <Constant "BMSE2003">>`:
        DC8 "BMSE2003"
`?<Initializer for <Constant "BMSE2004">>`:
        DC8 "BMSE2004"
`?<Initializer for <Constant "BMSE3005">>`:
        DC8 "BMSE3005"
`?<Initializer for <Constant "BMSE2007">>`:
        DC8 "BMSE2007"
`?<Initializer for <Constant "BMSE2006">>`:
        DC8 "BMSE2006"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "0">>`:
        DC8 "0"
`?<Initializer for <Constant "1">>`:
        DC8 "1"
`?<Initializer for <Constant "2">>`:
        DC8 "2"
`?<Initializer for <Constant "3">>`:
        DC8 "3"
`?<Initializer for <Constant "4">>`:
        DC8 "4"
`?<Initializer for <Constant "5">>`:
        DC8 "5"
`?<Initializer for <Constant "6">>`:
        DC8 "6"
`?<Initializer for <Constant "7">>`:
        DC8 "7"
`?<Initializer for <Constant "8">>`:
        DC8 "8"
`?<Initializer for <Constant "9">>`:
        DC8 "9"
`?<Initializer for <Constant "A">>`:
        DC8 "A"
`?<Initializer for <Constant "B">>`:
        DC8 "B"
`?<Initializer for <Constant "C">>`:
        DC8 "C"
`?<Initializer for <Constant "D">>`:
        DC8 "D"
`?<Initializer for <Constant "E">>`:
        DC8 "E"
`?<Initializer for <Constant "F">>`:
        DC8 "F"
`?<Initializer for <Constant "Confirm">>`:
        DC8 "Confirm"
`?<Initializer for <Constant "Delete">>`:
        DC8 "Delete"
`?<Initializer for <Constant "Next">>`:
        DC8 "Next"
`?<Initializer for <Constant "  PnG ">>`:
        DC8 "  PnG "
`?<Initializer for <Constant "     Lux:">>`:
        DC8 "     Lux:"
`?<Initializer for <Constant "1    2    3     "`:
        DC8 "1    2    3     "
`?<Initializer for <Constant "4    5    6     "`:
        DC8 "4    5    6     "
`?<Initializer for <Constant "7    8    9     "`:
        DC8 "7    8    9     "
`?<Initializer for <Constant "     0          "`:
        DC8 "     0          "
`?<Initializer for <Constant "D200014214000001"`:
        DC8 "D200014214000001"
`?<Initializer for <Constant "D200014210000000"`:
        DC8 "D200014210000000"
`?<Initializer for <Constant "D2000142140000FF"`:
        DC8 "D2000142140000FF"
`?<Initializer for <Constant "     ">>`:
        DC8 "     "
`?<Initializer for <Constant " ">>`:
        DC8 " "
`?<Initializer for <Constant "_">>`:
        DC8 "_"
`?<Initializer for <Constant "Delivery Station"`:
        DC8 "Delivery Station"
`?<Initializer for <Constant "Input ID:">>`:
        DC8 "Input ID:"
`?<Initializer for <Constant "   Infor:">>`:
        DC8 "   Infor:"
`?<Initializer for <Constant "1    2    3    A"`:
        DC8 "1    2    3    A"
`?<Initializer for <Constant "4    5    6    B"`:
        DC8 "4    5    6    B"
`?<Initializer for <Constant "7    8    9    C"`:
        DC8 "7    8    9    C"
`?<Initializer for <Constant "E    0    F    D"`:
        DC8 "E    0    F    D"
`?<Initializer for <Constant "D200014280000000"`:
        DC8 "D200014280000000"
`?<Initializer for <Constant "D200014282000000"`:
        DC8 "D200014282000000"
`?<Initializer for <Constant "ID Programmed">>`:
        DC8 "ID Programmed"
`?<Initializer for <Constant "             ">>`:
        DC8 "             "
`?<Initializer for <Constant "   Input:">>`:
        DC8 "   Input:"
`?<Initializer for <Constant "          ">>`:
        DC8 "          "
`?<Initializer for <Constant "   Frame:">>`:
        DC8 "   Frame:"
`?<Initializer for <Constant "        ">>`:
        DC8 "        "
`?<Initializer for <Constant "D000010600000000"`:
        DC8 "D000010600000000"
`?<Initializer for <Constant "FFFFFFFF">>`:
        DC8 "FFFFFFFF"
`?<Initializer for <Constant "D000010300000000"`:
        DC8 "D000010300000000"
`?<Initializer for <Constant "D20101428C0000FF"`:
        DC8 "D20101428C0000FF"
`?<Initializer for <Constant "D20101428B00A801"`:
        DC8 "D20101428B00A801"
`?<Initializer for <Constant "D20101428C0000AA"`:
        DC8 "D20101428C0000AA"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Dec 11 2009">>`:
        DC8 "Dec 11 2009"
`?<Initializer for <Constant "23:24:26">>`:
        DC8 "23:24:26"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D20101428D020101"`:
        DC8 "D20101428D020101"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for key_initial>`:
        DD 60, 120, 0, 0, 30, 48, 0, 0, 60, 48, 0, 0, 90, 48, 0, 0, 30, 72, 0
        DD 0, 60, 72, 0, 0, 90, 72, 0, 0, 30, 96, 0, 0, 60, 96, 0, 0, 90, 96, 0
        DD 0, 120, 48, 0, 0, 120, 72, 0, 0, 120, 96, 0, 0, 120, 120, 0, 0, 30
        DD 120, 0, 0, 90, 120, 0, 0
`?<Initializer for weigth>`:
        DC8 0, 0, 0, 0
`?<Initializer for height>`:
        DC8 0, 0, 0, 0

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for base>`:
        DD 150
`?<Initializer for top>`:
        DD 1880
`?<Initializer for cur_x>`:
        DC8 0, 0
`?<Initializer for cur_y>`:
        DC8 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for g_buffer_tx>`:
        DC8 "D000010200000000"

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for touch_key_blink>_0`:
        DB      0
        DB      0
        DW      (??touch_key_blink_20) /2
        DW      20
        DW      (??touch_key_blink_0) /2
        DW      (??touch_key_blink_2) /2
        DW      (??touch_key_blink_3) /2
        DW      (??touch_key_blink_4) /2
        DW      (??touch_key_blink_5) /2
        DW      (??touch_key_blink_6) /2
        DW      (??touch_key_blink_7) /2
        DW      (??touch_key_blink_8) /2
        DW      (??touch_key_blink_9) /2
        DW      (??touch_key_blink_10) /2
        DW      (??touch_key_blink_11) /2
        DW      (??touch_key_blink_12) /2
        DW      (??touch_key_blink_13) /2
        DW      (??touch_key_blink_14) /2
        DW      (??touch_key_blink_15) /2
        DW      (??touch_key_blink_16) /2
        DW      (??touch_key_blink_17) /2
        DW      (??touch_key_blink_18) /2
        DW      (??touch_key_blink_20) /2
        DW      (??touch_key_blink_19) /2

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for touch_key_blink_01>_0`:
        DB      0
        DB      1
        DW      (??touch_key_blink_01_14) /2
        DW      (??touch_key_blink_01_0) /2
        DB      0x1
        DW      (??touch_key_blink_01_2) /2
        DB      0x1
        DW      (??touch_key_blink_01_3) /2
        DB      0x1
        DW      (??touch_key_blink_01_4) /2
        DB      0x1
        DW      (??touch_key_blink_01_5) /2
        DB      0x1
        DW      (??touch_key_blink_01_6) /2
        DB      0x1
        DW      (??touch_key_blink_01_7) /2
        DB      0x1
        DW      (??touch_key_blink_01_8) /2
        DB      0x1
        DW      (??touch_key_blink_01_9) /2
        DB      0x1
        DW      (??touch_key_blink_01_10) /2
        DB      0x7
        DW      (??touch_key_blink_01_11) /2
        DB      0x1
        DW      (??touch_key_blink_01_12) /2
        DB      0x2
        DW      (??touch_key_blink_01_13) /2
        DB      251
        DB      0

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for touch_key_blink_02>_0`:
        DB      0
        DB      1
        DW      (??touch_key_blink_02_14) /2
        DW      (??touch_key_blink_02_0) /2
        DB      0x1
        DW      (??touch_key_blink_02_2) /2
        DB      0x1
        DW      (??touch_key_blink_02_3) /2
        DB      0x1
        DW      (??touch_key_blink_02_4) /2
        DB      0x1
        DW      (??touch_key_blink_02_5) /2
        DB      0x1
        DW      (??touch_key_blink_02_6) /2
        DB      0x1
        DW      (??touch_key_blink_02_7) /2
        DB      0x1
        DW      (??touch_key_blink_02_8) /2
        DB      0x1
        DW      (??touch_key_blink_02_9) /2
        DB      0x1
        DW      (??touch_key_blink_02_10) /2
        DB      0x7
        DW      (??touch_key_blink_02_11) /2
        DB      0x1
        DW      (??touch_key_blink_02_12) /2
        DB      0x2
        DW      (??touch_key_blink_02_13) /2
        DB      251
        DB      0

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for menu_02>_0`:
        DW      20112
        DB      0
        DW      (??menu_02_8) /2
        DW      7
        DW      (??menu_02_6) /2
        DW      (??menu_02_9) /2
        DW      (??menu_02_10) /2
        DW      (??menu_02_12) /2
        DW      (??menu_02_15) /2
        DW      (??menu_02_16) /2
        DW      (??menu_02_17) /2
        DB      0

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for test_screen>_0`:
        DW      18320
        DB      0
        DW      (??test_screen_17) /2
        DW      4
        DW      (??test_screen_15) /2
        DW      (??test_screen_19) /2
        DW      (??test_screen_20) /2
        DW      (??test_screen_22) /2
        DB      0

        END
// 
//    13 bytes in segment ABSOLUTE
// 7 880 bytes in segment CODE
//    12 bytes in segment INITTAB
//     4 bytes in segment INTVEC
//   837 bytes in segment NEAR_F
// 1 042 bytes in segment NEAR_I
// 1 042 bytes in segment NEAR_ID
//   263 bytes in segment NEAR_Z
//   172 bytes in segment SWITCH
// 
// 9 931 bytes of CODE memory (+ 16 bytes shared)
// 1 305 bytes of DATA memory (+ 13 bytes shared)
//
//Errors: none
//Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR   11/Dec/2009  23:21:35 /
// Copyright 1996-2009 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\avr\LM_Finial_Test\function_modality.c               /
//    Command line =  D:\avr\LM_Finial_Test\function_modality.c --cpu=m644p   /
//                    -ms -o D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D  /
//                    LM018 -D FINAL_VERSION2 -lCN                            /
//                    D:\avr\LM_Finial_Test\Release\List\ -lA                 /
//                    D:\avr\LM_Finial_Test\Release\List\ --diag_suppress     /
//                    Pa082,Pe167,Pe186 --initializers_in_flash -z6           /
//                    --no_inline --no_cross_call --no_tbaa                   /
//                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR    /
//                    Systems\Embedded Workbench 5.3\avr\INC\" -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench        /
//                    5.3\avr\INC\CLIB\" --eeprom_size 2048                   /
//    List file    =  D:\avr\LM_Finial_Test\Release\List\function_modality.s9 /
//                    0                                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME function_modality

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega644P"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC modality_0
        FUNCTION modality_0,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_0_initial
        FUNCTION modality_0_initial,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_1
        FUNCTION modality_1,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_2
        FUNCTION modality_2,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_3
        FUNCTION modality_3,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_4
        FUNCTION modality_4,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC modality_service
        FUNCTION modality_service,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN led_blinking_ms
        FUNCTION led_blinking_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN delay_ms
        FUNCTION delay_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN occupancy_detect
        FUNCTION occupancy_detect,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Configurators
        EXTERN Time_delay
        EXTERN flags

// D:\avr\LM_Finial_Test\function_modality.c
//    1 #include <ioavr.h>
//    2 #include <inavr.h>
//    3 #include "global_variable.h"
//    4 #include "moudle_SCS.h"
//    5 #include "function_modality.h"
//    6 #include "application.h"
//    7 #include "board.h"
//    8 #include "function_service.h"
//    9 

        RSEG CODE:CODE:NOROOT(1)
//   10 void modality_service(void)
modality_service:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function modality_service
//   11 {
//   12 	
//   13 	switch (Configurators.M)
        FUNCALL modality_service, modality_0_initial
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDS     R16, (Configurators + 3)
        CPI     R16, 48
        BRNE    ??modality_service_0
//   14 	{
//   15 		case '0':
//   16 			modality_0_initial();
        RCALL   modality_0_initial
//   17 			//modality_0();
//   18 			//modality_0();
//   19 		break;
//   20 
//   21 		default:break;
//   22 	}
//   23 	
//   24 }
??modality_service_0:
        RET
        CFI EndBlock cfiBlock0
//   25 

        RSEG CODE:CODE:NOROOT(1)
//   26 void modality_0_initial(void)
modality_0_initial:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function modality_0_initial
//   27 {
//   28 	flags.modality0_initialed = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+4
        LDD     R17, Z+5
        ORI     R16, 0x01
        STD     Z+5, R17
        STD     Z+4, R16
//   29 }
        RET
        CFI EndBlock cfiBlock1
//   30 

        RSEG CODE:CODE:NOROOT(1)
//   31 void modality_0(void)
modality_0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function modality_0
//   32 {
//   33 	
//   34 	if(Time_delay.LPB.count > 2000)
        FUNCALL modality_0, led_blinking_ms
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL modality_0, delay_ms
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL modality_0, occupancy_detect
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R30, LOW((Time_delay + 116))
        LDI     R31, HIGH((Time_delay + 116))
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CPI     R16, 209
        LDI     R20, 7
        CPC     R17, R20
        LDI     R20, 0
        CPC     R18, R20
        CPC     R19, R20
        BRCS    ??modality_0_0
//   35 	{
//   36 		led_blinking_ms(250,250,5000);
        LDI     R16, 136
        LDI     R17, 19
        LDI     R18, 0
        LDI     R19, 0
        ST      -Y, R18
        CFI CFA_Y Y+1
        ST      -Y, R18
        CFI CFA_Y Y+2
        ST      -Y, R17
        CFI CFA_Y Y+3
        ST      -Y, R16
        CFI CFA_Y Y+4
        LDI     R20, 250
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 250
        LDI     R17, 0
        CALL    led_blinking_ms
        CFI CFA_Y Y+0
//   37 		 delay_ms(5000);
        LDI     R16, 136
        LDI     R17, 19
        CALL    delay_ms
//   38 	}
//   39 	
//   40   //daylight_service();
//   41 	occupancy_detect();
??modality_0_0:
        CALL    occupancy_detect
//   42 }
        RET
        CFI EndBlock cfiBlock2
//   43 

        RSEG CODE:CODE:NOROOT(1)
//   44 void modality_1(void)
modality_1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function modality_1
//   45 {
//   46 
//   47 }
        RET
        CFI EndBlock cfiBlock3
//   48 

        RSEG CODE:CODE:NOROOT(1)
//   49 void modality_2(void)
modality_2:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function modality_2
//   50 {
//   51 
//   52 }
        RET
        CFI EndBlock cfiBlock4
//   53 

        RSEG CODE:CODE:NOROOT(1)
//   54 void modality_3(void)
modality_3:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function modality_3
//   55 {
//   56 
//   57 }
        RET
        CFI EndBlock cfiBlock5
//   58 

        RSEG CODE:CODE:NOROOT(1)
//   59 void modality_4(void)
modality_4:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function modality_4
//   60 {
//   61 
//   62 }
        RET
        CFI EndBlock cfiBlock6

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        END
// 
// 108 bytes in segment CODE
// 
// 108 bytes of CODE memory
//
//Errors: none
//Warnings: none

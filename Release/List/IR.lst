###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    11/Dec/2009  23:21:23 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\avr\LM_Finial_Test\IR.c                               #
#    Command line =  D:\avr\LM_Finial_Test\IR.c --cpu=m644p -ms -o            #
#                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018    #
#                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Lis #
#                    t\ -lA D:\avr\LM_Finial_Test\Release\List\               #
#                    --diag_suppress Pa082,Pe167,Pe186                        #
#                    --initializers_in_flash -z6 --no_inline --no_cross_call  #
#                    --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I "C:\Program     #
#                    Files\IAR Systems\Embedded Workbench 5.3\avr\INC\" -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\CLIB\" --eeprom_size 2048                    #
#    List file    =  D:\avr\LM_Finial_Test\Release\List\IR.lst                #
#    Object file  =  D:\avr\LM_Finial_Test\Release\Obj\IR.r90                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\avr\LM_Finial_Test\IR.c
      1          
      2          //                                                                                                                     PL   Ex
      3          //Start Group PnL	Used to start PnL procedure	                                                                        0x70	0x2C						
      4          //NEXT_ACTUATOR	Used to move to the next actuator	                                                                    0x70	0x2D						
      5          //INCLUDE	                                                                                                            0x70	0x2E						
      6          //EXCLUDE		                                                                                                          0x70	0x2F						
      7          //END_GROUP_PnL	Used to stop PnL procedure	                                                                          0x70	0x34						
      8          //ERASE_GROUP_PNL	Used to reset PnL GROUP	                                                                            0x70	0x35						
      9          //ADD_PERIPHERAL	Used to execute a self configuration (Plug&Go) by Room Control. (It's not a complete reset ROOM).	  0x70	0x36						
     10          
     11          
     12          
     13          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0xce
   \   <__C2> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   <__C6> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   <__C9> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   <__C12> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   <__C15> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8a
   \   <__C65> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x88
   \   <__C69> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x86
   \   <__C73> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x81
   \   <__C83> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x80
   \   <__C86> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1
     14          #include <inavr.h>
     15          #include "usart.h"
     16          #include "board.h"
     17          #include "moudle_SCS.h"
     18          #include "global_variable.h"
     19          #include "IR.h"
     20          #include "application.h"
     21          #include "string.h"
     22          #include "decode_scs_next.h"
     23          #include "configuration.h"
     24          #include "function_service.h"
     25          
     26          //ISR(USART1_RX_vect)
     27          /*
     28          #pragma vector=USART1_RX_vect
     29          __interrupt void usart1_rx_ser(void)
     30          {
     31          	unsigned char temp;
     32            temp = UDR1;
     33          
     34          	if (temp == 0xAA && IR_reception.begin_actual == 0)
     35          	{
     36          		IR_reception.info = 0;
     37          		IR_reception.begin_actual = 0;
     38          		IR_reception.finished = 0;
     39          		IR_reception.pipe[0] = temp;
     40          		IR_reception.CRC_OK = 0;
     41          	}
     42          	else
     43          	{
     44          		IR_reception.pipe[++IR_reception.begin_actual] = temp;	
     45          
     46              if(IR_reception.begin_actual >= 14)
     47                IR_reception.begin_actual = 0;
     48          
     49          		if(IR_reception.begin_actual == 5)//&&(g_reception_IR.pipe[5] == 0x12))
     50          		{		
     51          			switch(IR_reception.pipe[5]&0xC0)
     52          			{
     53          				case 0x00:
     54          					IR_reception.info = 6;			//只剩一帧CRC没有接收到，该数据帧共有0~6共7bytes
     55          					break;
     56          				case 0x40:
     57          					IR_reception.info = 7;			//该数据帧共有0~7共8bytes
     58          					break;
     59          				case 0x80:
     60          					IR_reception.info = 9;			//该数据帧共有0~9共10bytes
     61          					break;
     62          				case 0xC0:
     63          					IR_reception.info = 13;			//该数据帧共有0~13共14bytes
     64          					break;
     65          				default:
     66                    IR_reception.info = 20;     //for solve the IR receive question
     67                    break;			
     68          			}
     69          		}
     70          
     71          		if(IR_reception.begin_actual == IR_reception.info)
     72          		{
     73                IR_reception.begin_actual = 0;
     74          			IR_reception.finished = 1;
     75          		}
     76          	}
     77          }
     78          */
     79          
     80          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     81          __interrupt void usart1_rx_ser(void)
   \                     usart1_rx_ser:
     82          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   934A               ST      -Y, R20
   \   0000000A   933A               ST      -Y, R19
   \   0000000C   932A               ST      -Y, R18
   \   0000000E   931A               ST      -Y, R17
   \   00000010   930A               ST      -Y, R16
   \   00000012   B74F               IN      R20, 0x3F
     83          	unsigned char temp;
     84            temp = UDR1;
   \   00000014   9100....           LDS     R16, _A_UDR1
     85          
     86          	if (temp == 0xAA && IR_reception.begin_actual == 0)
   \   00000018   ....               LDI     R30, LOW(IR_reception)
   \   0000001A   ....               LDI     R31, (IR_reception) >> 8
   \   0000001C   3A0A               CPI     R16, 170
   \   0000001E   F471               BRNE    ??usart1_rx_ser_0
   \   00000020   8516               LDD     R17, Z+14
   \   00000022   2311               TST     R17
   \   00000024   F459               BRNE    ??usart1_rx_ser_0
     87          	{
     88          		IR_reception.info = 0;
   \   00000026   E000               LDI     R16, 0
   \   00000028   8707               STD     Z+15, R16
     89          		IR_reception.begin_actual = 1;
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   8706               STD     Z+14, R16
     90          		IR_reception.finished = 0;
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8B00               STD     Z+16, R16
     91          		IR_reception.pipe[0] = temp;
   \   00000032   EA0A               LDI     R16, 170
   \   00000034   8300               ST      Z, R16
     92          		IR_reception.CRC_OK = 0;
   \   00000036   E000               LDI     R16, 0
   \   00000038   8B01               STD     Z+17, R16
   \   0000003A   C030               RJMP    ??usart1_rx_ser_1
     93          	}
     94          	else if( IR_reception.begin_actual != 0 )
   \                     ??usart1_rx_ser_0:
   \   0000003C   8516               LDD     R17, Z+14
   \   0000003E   2311               TST     R17
   \   00000040   F169               BREQ    ??usart1_rx_ser_1
     95          	{
     96          		IR_reception.pipe[IR_reception.begin_actual] = temp;	
   \   00000042   8526               LDD     R18, Z+14
   \   00000044   E030               LDI     R19, 0
   \   00000046   01DF               MOVW    R27:R26, R31:R30
   \   00000048   0FA2               ADD     R26, R18
   \   0000004A   1FB3               ADC     R27, R19
   \   0000004C   930C               ST      X, R16
     97          
     98              if(IR_reception.begin_actual >= 200)
   \   0000004E   8506               LDD     R16, Z+14
   \   00000050   3C08               CPI     R16, 200
   \   00000052   F008               BRCS    ??usart1_rx_ser_2
     99                IR_reception.begin_actual = 0;
   \   00000054   8736               STD     Z+14, R19
    100          
    101          		if(IR_reception.begin_actual == 5)//&&(g_reception_IR.pipe[5] == 0x12))
   \                     ??usart1_rx_ser_2:
   \   00000056   8506               LDD     R16, Z+14
   \   00000058   3005               CPI     R16, 5
   \   0000005A   F4A9               BRNE    ??usart1_rx_ser_3
    102          		{		
    103          			switch(IR_reception.pipe[5]&0xC0)
   \   0000005C   8105               LDD     R16, Z+5
   \   0000005E   7C00               ANDI    R16, 0xC0
   \   00000060   5800               SUBI    R16, 128
   \   00000062   F059               BREQ    ??usart1_rx_ser_4
   \   00000064   5400               SUBI    R16, 64
   \   00000066   F059               BREQ    ??usart1_rx_ser_5
   \   00000068   5400               SUBI    R16, 64
   \   0000006A   F019               BREQ    ??usart1_rx_ser_6
   \   0000006C   5400               SUBI    R16, 64
   \   0000006E   F019               BREQ    ??usart1_rx_ser_7
   \   00000070   C008               RJMP    ??usart1_rx_ser_8
    104          			{
    105          				case 0x00:
    106          					IR_reception.info = 6;			//只剩一帧CRC没有接收到，该数据帧共有0~6共7bytes
   \                     ??usart1_rx_ser_6:
   \   00000072   E006               LDI     R16, 6
   \   00000074   C007               RJMP    ??usart1_rx_ser_9
    107          					break;
    108          				case 0x40:
    109          					IR_reception.info = 7;			//该数据帧共有0~7共8bytes
   \                     ??usart1_rx_ser_7:
   \   00000076   E007               LDI     R16, 7
   \   00000078   C005               RJMP    ??usart1_rx_ser_9
    110          					break;
    111          				case 0x80:
    112          					IR_reception.info = 9;			//该数据帧共有0~9共10bytes
   \                     ??usart1_rx_ser_4:
   \   0000007A   E009               LDI     R16, 9
   \   0000007C   C003               RJMP    ??usart1_rx_ser_9
    113          					break;
    114          				case 0xC0:
    115          					IR_reception.info = 13;			//该数据帧共有0~13共14bytes
   \                     ??usart1_rx_ser_5:
   \   0000007E   E00D               LDI     R16, 13
   \   00000080   C001               RJMP    ??usart1_rx_ser_9
    116          					break;
    117          				default:
    118                    IR_reception.info = 20;     //for solve the IR receive question
   \                     ??usart1_rx_ser_8:
   \   00000082   E104               LDI     R16, 20
   \                     ??usart1_rx_ser_9:
   \   00000084   8707               STD     Z+15, R16
    119                    break;			
    120          			}
    121          		}
    122          
    123          		if(IR_reception.begin_actual == IR_reception.info)
   \                     ??usart1_rx_ser_3:
   \   00000086   8506               LDD     R16, Z+14
   \   00000088   8517               LDD     R17, Z+15
   \   0000008A   1701               CP      R16, R17
   \   0000008C   F421               BRNE    ??usart1_rx_ser_10
    124          		{
    125                IR_reception.begin_actual = 0;
   \   0000008E   8736               STD     Z+14, R19
    126          			IR_reception.finished = 1;
   \   00000090   E001               LDI     R16, 1
   \   00000092   8B00               STD     Z+16, R16
   \   00000094   C003               RJMP    ??usart1_rx_ser_1
    127          		}
    128              else
    129              {
    130                  IR_reception.begin_actual ++;
   \                     ??usart1_rx_ser_10:
   \   00000096   8506               LDD     R16, Z+14
   \   00000098   9503               INC     R16
   \   0000009A   8706               STD     Z+14, R16
    131              }
    132          	}
    133          }
   \                     ??usart1_rx_ser_1:
   \   0000009C   BF4F               OUT     0x3F, R20
   \   0000009E   9109               LD      R16, Y+
   \   000000A0   9119               LD      R17, Y+
   \   000000A2   9129               LD      R18, Y+
   \   000000A4   9139               LD      R19, Y+
   \   000000A6   9149               LD      R20, Y+
   \   000000A8   91E9               LD      R30, Y+
   \   000000AA   91F9               LD      R31, Y+
   \   000000AC   91A9               LD      R26, Y+
   \   000000AE   91B9               LD      R27, Y+
   \   000000B0   9518               RETI
   \   000000B2                      REQUIRE _A_UDR1
    134          
    135          //ISR(USART1_TX_vect)
    136          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    137          __interrupt void usart_tx_ser(void)
   \                     usart_tx_ser:
    138          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
    139              if (tx1_counter)
   \   0000000C   9100....           LDS     R16, tx1_counter
   \   00000010   2300               TST     R16
   \   00000012   F0B9               BREQ    ??usart_tx_ser_0
    140              {
    141                     --tx1_counter;
   \   00000014   9100....           LDS     R16, tx1_counter
   \   00000018   950A               DEC     R16
   \   0000001A   9300....           STS     tx1_counter, R16
    142          		
    143                     UDR1 = tx1_buffer[tx1_rd_index];
   \   0000001E   9100....           LDS     R16, tx1_rd_index
   \   00000022   E010               LDI     R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(tx1_buffer) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(tx1_buffer) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   9300....           STS     _A_UDR1, R16
    144          		
    145                     if (++tx1_rd_index == TX1_BUFFER_SIZE) tx1_rd_index=0;
   \   00000030   9100....           LDS     R16, tx1_rd_index
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     tx1_rd_index, R16
   \   0000003A   300E               CPI     R16, 14
   \   0000003C   F411               BRNE    ??usart_tx_ser_0
   \   0000003E   9310....           STS     tx1_rd_index, R17
    146              };
    147          }
   \                     ??usart_tx_ser_0:
   \   00000042   BF2F               OUT     0x3F, R18
   \   00000044   9109               LD      R16, Y+
   \   00000046   9119               LD      R17, Y+
   \   00000048   9129               LD      R18, Y+
   \   0000004A   91E9               LD      R30, Y+
   \   0000004C   91F9               LD      R31, Y+
   \   0000004E   9518               RETI
   \   00000050                      REQUIRE _A_UDR1
    148          
    149          /*USART1发送单个字符*/

   \                                 In  segment CODE, align 2, keep-with-next
    150          void put_c1(char c)
   \                     put_c1:
   \                     ??put_c1_0:
    151          {
    152              while (tx1_counter == TX1_BUFFER_SIZE);   //发送数据队列中还有数据没有发送完，等待
   \   00000000   9110....           LDS     R17, tx1_counter
   \   00000004   301E               CPI     R17, 14
   \   00000006   F3E1               BREQ    ??put_c1_0
    153          
    154              __disable_interrupt();
   \   00000008   94F8               CLI
    155              if (tx1_counter || ((UCSR1A & DATA_UD1_EMPTY)==0))    //若发送数据队列有数据或者数据寄存器UDR非空时执行(因为队列先进先出的原因，所以，c要放进非空的发送数据队列里面)
   \   0000000A   9110....           LDS     R17, tx1_counter
   \   0000000E   2311               TST     R17
   \   00000010   F429               BRNE    ??put_c1_1
   \   00000012   9110....           LDS     R17, _A_UCSR1A
   \   00000016   2F21               MOV     R18, R17
   \   00000018   FD25               SBRC    R18, 5
   \   0000001A   C016               RJMP    ??put_c1_2
    156          		{
    157                     tx1_buffer[tx1_wr_index]=c;
   \                     ??put_c1_1:
   \   0000001C   9120....           LDS     R18, tx1_wr_index
   \   00000020   E030               LDI     R19, 0
   \   00000022   01F9               MOVW    R31:R30, R19:R18
   \   00000024   ....               SUBI    R30, LOW((-(tx1_buffer) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(tx1_buffer) & 0xFFFF) >> 8
   \   00000028   8300               ST      Z, R16
    158                     if (++tx1_wr_index == TX1_BUFFER_SIZE) tx1_wr_index=0;
   \   0000002A   9100....           LDS     R16, tx1_wr_index
   \   0000002E   9503               INC     R16
   \   00000030   9300....           STS     tx1_wr_index, R16
   \   00000034   300E               CPI     R16, 14
   \   00000036   F411               BRNE    ??put_c1_3
   \   00000038   9330....           STS     tx1_wr_index, R19
    159                     ++tx1_counter;
   \                     ??put_c1_3:
   \   0000003C   9100....           LDS     R16, tx1_counter
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     tx1_counter, R16
   \   00000046   C002               RJMP    ??put_c1_4
    160                 }
    161              else
    162                     UDR1=c;
   \                     ??put_c1_2:
   \   00000048   9300....           STS     _A_UDR1, R16
    163              __enable_interrupt();
   \                     ??put_c1_4:
   \   0000004C   9478               SEI
    164          		
    165          }
   \   0000004E   9508               RET
   \   00000050                      REQUIRE _A_UDR1
   \   00000050                      REQUIRE _A_UCSR1A
    166          
    167          //0xAA,0x86,0x50,0x55,0x15,0x07

   \                                 In  segment CODE, align 2, keep-with-next
    168          void put_s1(unsigned char *ptr, unsigned char end_pipe)
   \                     put_s1:
    169          {	
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FB2               MOV     R27, R18
    170          	unsigned char i;
    171          	unsigned char crc;
    172          	//IR_36kHz();				//发送IR数据前先使能36KHZ的载波输出	
    173          	//crc = 0x51
    174          	crc = 0;
   \   00000008   2444               CLR     R4
    175          	for (i=1; i<end_pipe; i++)		//对数据帧的<HEADER>, <FIRST ADDRESS>, <PAYLOAD>位进行CRC校验
   \   0000000A   E0A1               LDI     R26, 1
   \   0000000C   C00A               RJMP    ??put_s1_0
    176          	{
    177          		crc = _calculate_crc(*(ptr+i),crc);
   \                     ??put_s1_1:
   \   0000000E   2D14               MOV     R17, R4
   \   00000010   2F2A               MOV     R18, R26
   \   00000012   E030               LDI     R19, 0
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   8100               LD      R16, Z
   \   0000001C   ....               RCALL   _calculate_crc
   \   0000001E   2E40               MOV     R4, R16
    178          	}
   \   00000020   95A3               INC     R26
   \                     ??put_s1_0:
   \   00000022   17AB               CP      R26, R27
   \   00000024   F3A0               BRCS    ??put_s1_1
    179          
    180          	delay_ms(10);	
   \   00000026   E00A               LDI     R16, 10
   \   00000028   E010               LDI     R17, 0
   \   0000002A   ........           CALL    delay_ms
    181           	for(i=0;i<end_pipe;i++)
   \   0000002E   E0A0               LDI     R26, 0
   \   00000030   C005               RJMP    ??put_s1_2
    182          	{
    183          		put_c1(*ptr++);
   \                     ??put_s1_3:
   \   00000032   01FC               MOVW    R31:R30, R25:R24
   \   00000034   9101               LD      R16, Z+
   \   00000036   01CF               MOVW    R25:R24, R31:R30
   \   00000038   ....               RCALL   put_c1
    184          	}
   \   0000003A   95A3               INC     R26
   \                     ??put_s1_2:
   \   0000003C   17AB               CP      R26, R27
   \   0000003E   F3C8               BRCS    ??put_s1_3
    185          	put_c1(crc);
   \   00000040   2D04               MOV     R16, R4
   \   00000042   ....               RCALL   put_c1
    186          	delay_ms(70);
   \   00000044   E406               LDI     R16, 70
   \   00000046   E010               LDI     R17, 0
   \   00000048   ........           CALL    delay_ms
    187          	//buzzer_ms(10);
    188          	flags.ir_buzzer = 1;
   \   0000004C   ....               LDI     R30, LOW(flags)
   \   0000004E   ....               LDI     R31, (flags) >> 8
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   6110               ORI     R17, 0x10
   \   00000056   8313               STD     Z+3, R17
   \   00000058   8302               STD     Z+2, R16
    189          	//delay_ms(6);
    190          	
    191          	//close_IR_36kHz();	//发送数据结束后，把36KHZ载波输出关闭
    192          }
   \   0000005A   E0E5               LDI     R30, 5
   \   0000005C   ........           JMP     ?EPILOGUE_B5_L09
    193          

   \                                 In  segment CODE, align 2, keep-with-next
    194          void init_USART1()
   \                     init_USART1:
    195          {
    196          	UCSR1A=(1<<RXC1)|(1<<TXC1);
   \   00000000   EC00               LDI     R16, 192
   \   00000002   9300....           STS     _A_UCSR1A, R16
    197          	UCSR1B=(1<<RXCIE1)|(1<<TXCIE1)|(1<<RXEN1)|(1<<TXEN1);		//0xD8
   \   00000006   ED08               LDI     R16, 216
   \   00000008   9300....           STS     _A_UCSR1B, R16
    198          	UCSR1C=(1<<USBS1)|(1<<UCSZ11)|(1<<UCSZ10);				//0x06;
   \   0000000C   E00E               LDI     R16, 14
   \   0000000E   9300....           STS     _A_UCSR1C, R16
    199          	UBRR1H=0x00;
   \   00000012   E000               LDI     R16, 0
   \   00000014   930000CD           STS     205, R16
    200          	UBRR1L=191;		//2400=191, 4800=95
   \   00000018   EB0F               LDI     R16, 191
   \   0000001A   9300....           STS     _A_UBRR1, R16
    201          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_UBRR1
   \   00000020                      REQUIRE _A_UCSR1B
   \   00000020                      REQUIRE _A_UCSR1C
   \   00000020                      REQUIRE _A_UCSR1A
    202          

   \                                 In  segment CODE, align 2, keep-with-next
    203          unsigned char _calculate_crc(unsigned char data, unsigned char crc)
   \                     _calculate_crc:
    204          {
    205            unsigned char i;
    206          	crc = crc ^ data;
   \   00000000   2710               EOR     R17, R16
    207          	for (i = 0; i < 8; i++)
   \   00000002   E000               LDI     R16, 0
   \   00000004   C001               RJMP    ??_calculate_crc_0
    208          	{
    209          		if (crc & 0x01)
    210          			crc = (crc >> 1) ^ 0x8C;
    211          		else
    212          			crc >>= 1;
   \                     ??_calculate_crc_1:
   \   00000006   9503               INC     R16
   \                     ??_calculate_crc_0:
   \   00000008   3008               CPI     R16, 8
   \   0000000A   F440               BRCC    ??_calculate_crc_2
   \   0000000C   2F21               MOV     R18, R17
   \   0000000E   9526               LSR     R18
   \   00000010   FB10               BST     R17, 0
   \   00000012   2F12               MOV     R17, R18
   \   00000014   F7C6               BRTC    ??_calculate_crc_1
   \   00000016   E82C               LDI     R18, 140
   \   00000018   2712               EOR     R17, R18
   \   0000001A   CFF5               RJMP    ??_calculate_crc_1
    213          	}
    214          	return crc;
   \                     ??_calculate_crc_2:
   \   0000001C   2F01               MOV     R16, R17
   \   0000001E   9508               RET
    215          }
    216          

   \                                 In  segment CODE, align 2, keep-with-next
    217          void PWM_output_init(void)
   \                     PWM_output_init:
    218          {
    219          	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
   \   00000000   EA00               LDI     R16, 160
   \   00000002   9300....           STS     _A_TCCR1A, R16
    220          	TCCR1B = (1<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);	// CLOCK/1	
   \   00000006   E101               LDI     R16, 17
   \   00000008   9300....           STS     _A_TCCR1B, R16
    221          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_TCCR1B
   \   0000000E                      REQUIRE _A_TCCR1A
    222          

   \                                 In  segment CODE, align 2, keep-with-next
    223          void IR_36kHz(void)
   \                     IR_36kHz:
    224          {
    225          	PWM_output_init();	
   \   00000000   ....               RCALL   PWM_output_init
    226          	ICR1 = 102;		// 36K
   \   00000002   E606               LDI     R16, 102
   \   00000004   E010               LDI     R17, 0
   \   00000006   9310....           STS     (_A_ICR1 + 1), R17
   \   0000000A   9300....           STS     _A_ICR1, R16
    227          	OCR1A = 31;		//30%
   \   0000000E   E10F               LDI     R16, 31
   \   00000010   9310....           STS     (_A_OCR1A + 1), R17
   \   00000014   9300....           STS     _A_OCR1A, R16
    228          	OCR1B = 0;		//0%
   \   00000018   9310....           STS     (_A_OCR1B + 1), R17
   \   0000001C   9310....           STS     _A_OCR1B, R17
    229          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_OCR1B
   \   00000022                      REQUIRE _A_OCR1A
   \   00000022                      REQUIRE _A_ICR1
    230          

   \                                 In  segment CODE, align 2, keep-with-next
    231          void close_IR_36kHz(void)
   \                     close_IR_36kHz:
    232          {
    233          	TCCR1B = (0<<CS12)|(0<<CS11)|(0<<CS10);	// CLOCK = 0	
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     _A_TCCR1B, R16
    234          	OCR1A = 0;
   \   00000006   9300....           STS     (_A_OCR1A + 1), R16
   \   0000000A   9300....           STS     _A_OCR1A, R16
    235          	TCCR1A = 0;
   \   0000000E   9300....           STS     _A_TCCR1A, R16
    236          	//TCCR1B = 0;
    237          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_OCR1A
   \   00000014                      REQUIRE _A_TCCR1B
   \   00000014                      REQUIRE _A_TCCR1A
    238          

   \                                 In  segment CODE, align 2, keep-with-next
    239          void timer_IR_initial(unsigned long int ms)
   \                     timer_IR_initial:
    240          {
    241          	Time_delay.IR.stack_top = ms;
   \   00000000   ....               LDI     R30, LOW((Time_delay + 230))
   \   00000002   ....               LDI     R31, HIGH((Time_delay + 230))
   \   00000004   8300               ST      Z, R16
   \   00000006   8311               STD     Z+1, R17
   \   00000008   8322               STD     Z+2, R18
   \   0000000A   8333               STD     Z+3, R19
    242          	Time_delay.IR.count = 0;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   ....               LDI     R30, LOW((Time_delay + 226))
   \   00000010   ....               LDI     R31, HIGH((Time_delay + 226))
   \   00000012   8300               ST      Z, R16
   \   00000014   8301               STD     Z+1, R16
   \   00000016   8302               STD     Z+2, R16
   \   00000018   8303               STD     Z+3, R16
    243          	Time_delay.IR.time_out = 0;
   \   0000001A   9300....           STS     (Time_delay + 234), R16
    244          	Time_delay.IR.started = 1;
   \   0000001E   E001               LDI     R16, 1
   \   00000020   9300....           STS     (Time_delay + 236), R16
    245          	Time_delay.IR.enabled = 1;
   \   00000024   9300....           STS     (Time_delay + 235), R16
    246          }
   \   00000028   9508               RET
    247          

   \                                 In  segment CODE, align 2, keep-with-next
    248          void decode_IR()
   \                     decode_IR:
    249          {
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   97E5               SBIW    R29:R28, 53
    250          	unsigned int par_num;
    251          	//unsigned int par_val;
    252          	unsigned char i;
    253          	unsigned char crc;
    254          	//unsigned char *p_ee = &ee_KO_conf;
    255          	volatile unsigned char buffer_ir[13];
    256          	unsigned char buffer_scs[17];
    257          	unsigned char buffer_char[3];
    258          	//unsigned char *p_IR = &IR_reception.pipe[0];
    259          	unsigned char old_ns_index = 0;
   \   00000006   2488               CLR     R8
    260            unsigned char ns;
    261            volatile unsigned long int current_id = 0;
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   831B               STD     Y+3, R17
   \   0000000E   831C               STD     Y+4, R17
   \   00000010   831D               STD     Y+5, R17
   \   00000012   831E               STD     Y+6, R17
    262            unsigned char temp;
    263            unsigned char available_command = 0;
   \   00000014   E080               LDI     R24, 0
    264            unsigned char group_flag = 0;
   \   00000016   E090               LDI     R25, 0
    265          	unsigned char ns_sended[16];
    266          	unsigned char j;
    267          	unsigned char avoid_twice = 0;
    268          	unsigned char temp_ns;
    269          	unsigned char current_scenario = OUT_RANGE;
   \   00000018   24CC               CLR     R12
   \   0000001A   94CA               DEC     R12
   \   0000001C   9100....           LDS     R16, (IR_reception + 16)
   \   00000020   3001               CPI     R16, 1
   \   00000022   F4E9               BRNE    ??decode_IR_0
    270          	static unsigned char ns_400ms;
    271          	//CRC checking
    272          	if(IR_reception.finished == 1)
    273          	{
    274          		crc = 0;
    275          		for (i=1; i<IR_reception.info; i++)		//对数据帧的<HEADER>, <FIRST ADDRESS>, <PAYLOAD>位进行CRC校验
   \   00000024   E0A1               LDI     R26, 1
   \   00000026   C008               RJMP    ??decode_IR_1
    276          		{
    277          			crc = _calculate_crc(IR_reception.pipe[i],crc);
   \                     ??decode_IR_2:
   \   00000028   E0B0               LDI     R27, 0
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   ....               SUBI    R30, LOW((-(IR_reception) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(IR_reception) & 0xFFFF) >> 8
   \   00000030   8100               LD      R16, Z
   \   00000032   ....               RCALL   _calculate_crc
   \   00000034   2F10               MOV     R17, R16
    278          		}
   \   00000036   95A3               INC     R26
   \                     ??decode_IR_1:
   \   00000038   9100....           LDS     R16, (IR_reception + 15)
   \   0000003C   17A0               CP      R26, R16
   \   0000003E   F3A0               BRCS    ??decode_IR_2
    279          
    280          		if(crc == IR_reception.pipe[IR_reception.info])
   \   00000040   9120....           LDS     R18, (IR_reception + 15)
   \   00000044   E030               LDI     R19, 0
   \   00000046   01F9               MOVW    R31:R30, R19:R18
   \   00000048   ....               SUBI    R30, LOW((-(IR_reception) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(IR_reception) & 0xFFFF) >> 8
   \   0000004C   8100               LD      R16, Z
   \   0000004E   1710               CP      R17, R16
   \   00000050   F421               BRNE    ??decode_IR_3
    281          			IR_reception.CRC_OK = 1;
   \   00000052   E001               LDI     R16, 1
   \   00000054   9300....           STS     (IR_reception + 17), R16
   \   00000058   C002               RJMP    ??decode_IR_0
    282          		else
    283          			IR_reception.CRC_OK = 0;
   \                     ??decode_IR_3:
   \   0000005A   9330....           STS     (IR_reception + 17), R19
    284          	}
    285          
    286          	//if((IR_reception.CRC_OK == 1) || (IR_reception.CRC_OK == 0))
    287          	if((IR_reception.CRC_OK == 1) )
   \                     ??decode_IR_0:
   \   0000005E   9100....           LDS     R16, (IR_reception + 17)
   \   00000062   3001               CPI     R16, 1
   \   00000064   F009               BREQ    $+2+2
   \   00000066   C5E4               RJMP    ??decode_IR_4
    288          	{
    289          		timer_IR_initial(2000);
   \   00000068   ED00               LDI     R16, 208
   \   0000006A   E017               LDI     R17, 7
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   ....               RCALL   timer_IR_initial
    290          		state.IR_Trans = 1;
   \   00000070   ....               LDI     R30, LOW(state)
   \   00000072   ....               LDI     R31, (state) >> 8
   \   00000074   8105               LDD     R16, Z+5
   \   00000076   8116               LDD     R17, Z+6
   \   00000078   6001               ORI     R16, 0x01
   \   0000007A   8316               STD     Z+6, R17
   \   0000007C   8305               STD     Z+5, R16
    291          		flags.ir_buzzer = 0;
   \   0000007E   ....               LDI     R30, LOW(flags)
   \   00000080   ....               LDI     R31, (flags) >> 8
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   7E1F               ANDI    R17, 0xEF
   \   00000088   8313               STD     Z+3, R17
   \   0000008A   8302               STD     Z+2, R16
    292          		//IR_reception.finished = 0;
    293          		//IR_reception.CRC_OK = 0;
    294          		//buzzer_ms(100);
    295              ns = IR_reception.pipe[4] & 0x0F;
   \   0000008C   9060....           LDS     R6, (IR_reception + 4)
   \   00000090   E00F               LDI     R16, 15
   \   00000092   2260               AND     R6, R16
    296              current_id = IR_reception.pipe[2];
   \   00000094   9100....           LDS     R16, (IR_reception + 2)
   \   00000098   830B               STD     Y+3, R16
   \   0000009A   828C               STD     Y+4, R8
   \   0000009C   828D               STD     Y+5, R8
   \   0000009E   828E               STD     Y+6, R8
    297              current_id = current_id << 8;
   \   000000A0   810B               LDD     R16, Y+3
   \   000000A2   811C               LDD     R17, Y+4
   \   000000A4   812D               LDD     R18, Y+5
   \   000000A6   813E               LDD     R19, Y+6
   \   000000A8   2F32               MOV     R19, R18
   \   000000AA   2F21               MOV     R18, R17
   \   000000AC   2F10               MOV     R17, R16
   \   000000AE   828B               STD     Y+3, R8
   \   000000B0   831C               STD     Y+4, R17
   \   000000B2   832D               STD     Y+5, R18
   \   000000B4   833E               STD     Y+6, R19
    298              current_id = current_id + IR_reception.pipe[3];
   \   000000B6   9100....           LDS     R16, (IR_reception + 3)
   \   000000BA   814B               LDD     R20, Y+3
   \   000000BC   815C               LDD     R21, Y+4
   \   000000BE   816D               LDD     R22, Y+5
   \   000000C0   817E               LDD     R23, Y+6
   \   000000C2   0F40               ADD     R20, R16
   \   000000C4   1D58               ADC     R21, R8
   \   000000C6   1D68               ADC     R22, R8
   \   000000C8   1D78               ADC     R23, R8
   \   000000CA   834B               STD     Y+3, R20
   \   000000CC   835C               STD     Y+4, R21
   \   000000CE   836D               STD     Y+5, R22
   \   000000D0   837E               STD     Y+6, R23
    299          		current_id = current_id << 4;
   \   000000D2   E044               LDI     R20, 4
   \   000000D4   810B               LDD     R16, Y+3
   \   000000D6   811C               LDD     R17, Y+4
   \   000000D8   812D               LDD     R18, Y+5
   \   000000DA   813E               LDD     R19, Y+6
   \   000000DC   ........           CALL    ?L_SHL_L03
   \   000000E0   830B               STD     Y+3, R16
   \   000000E2   831C               STD     Y+4, R17
   \   000000E4   832D               STD     Y+5, R18
   \   000000E6   833E               STD     Y+6, R19
    300              temp = IR_reception.pipe[4];
   \   000000E8   9100....           LDS     R16, (IR_reception + 4)
    301              temp = temp >> 4;
    302              temp = temp & 0x0F;
    303              current_id = current_id + temp;
   \   000000EC   9502               SWAP    R16
   \   000000EE   700F               ANDI    R16, 0x0F
   \   000000F0   814B               LDD     R20, Y+3
   \   000000F2   815C               LDD     R21, Y+4
   \   000000F4   816D               LDD     R22, Y+5
   \   000000F6   817E               LDD     R23, Y+6
   \   000000F8   0F40               ADD     R20, R16
   \   000000FA   1D58               ADC     R21, R8
   \   000000FC   1D68               ADC     R22, R8
   \   000000FE   1D78               ADC     R23, R8
   \   00000100   834B               STD     Y+3, R20
   \   00000102   835C               STD     Y+4, R21
   \   00000104   836D               STD     Y+5, R22
   \   00000106   837E               STD     Y+6, R23
    304          
    305              if(current_id == 0xFFFFF)
   \   00000108   810B               LDD     R16, Y+3
   \   0000010A   811C               LDD     R17, Y+4
   \   0000010C   812D               LDD     R18, Y+5
   \   0000010E   813E               LDD     R19, Y+6
   \   00000110   3F0F               CPI     R16, 255
   \   00000112   051C               CPC     R17, R12
   \   00000114   E04F               LDI     R20, 15
   \   00000116   0724               CPC     R18, R20
   \   00000118   0538               CPC     R19, R8
   \   0000011A   F449               BRNE    ??decode_IR_5
    306              {
    307                if(ns == 0)
   \   0000011C   2066               TST     R6
   \   0000011E   F411               BRNE    ??decode_IR_6
    308                {
    309                  available_command = 0;
    310                  group_flag = 1;
   \   00000120   E091               LDI     R25, 1
   \   00000122   C035               RJMP    ??decode_IR_7
    311                }
    312                else if(ns < 16)
   \                     ??decode_IR_6:
   \   00000124   E100               LDI     R16, 16
   \   00000126   1660               CP      R6, R16
   \   00000128   F590               BRCC    ??decode_IR_7
    313                  available_command = 1;
   \   0000012A   E081               LDI     R24, 1
   \   0000012C   C030               RJMP    ??decode_IR_7
    314                else
    315                  available_command = 0;
    316              }
    317              else
    318              {
    319                for(i=15;i!=0xFF;i--)
   \                     ??decode_IR_5:
   \   0000012E   E0AF               LDI     R26, 15
   \   00000130   C001               RJMP    ??decode_IR_8
   \                     ??decode_IR_9:
   \   00000132   95AA               DEC     R26
   \                     ??decode_IR_8:
   \   00000134   3FAF               CPI     R26, 255
   \   00000136   F159               BREQ    ??decode_IR_7
    320          		  {
    321          			  if( (IR_reception.pipe[2] == ee_scenario[i].id[0]) && (IR_reception.pipe[3] == ee_scenario[i].id[1]) && (IR_reception.pipe[4] == ee_scenario[i].id[2]))
   \   00000138   2F4A               MOV     R20, R26
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   E007               LDI     R16, 7
   \   0000013E   E010               LDI     R17, 0
   \   00000140   ........           CALL    ?S_EC_MUL_L02
   \   00000144   ....               LDI     R18, LOW(ee_scenario)
   \   00000146   ....               LDI     R19, (ee_scenario) >> 8
   \   00000148   0F20               ADD     R18, R16
   \   0000014A   1F31               ADC     R19, R17
   \   0000014C   9110....           LDS     R17, (IR_reception + 2)
   \   00000150   01A9               MOVW    R21:R20, R19:R18
   \   00000152   5F4E               SUBI    R20, 254
   \   00000154   4F5F               SBCI    R21, 255
   \   00000156   ........           CALL    __eeget8_16
   \   0000015A   1710               CP      R17, R16
   \   0000015C   F751               BRNE    ??decode_IR_9
   \   0000015E   9110....           LDS     R17, (IR_reception + 3)
   \   00000162   01A9               MOVW    R21:R20, R19:R18
   \   00000164   5F4D               SUBI    R20, 253
   \   00000166   4F5F               SBCI    R21, 255
   \   00000168   ........           CALL    __eeget8_16
   \   0000016C   1710               CP      R17, R16
   \   0000016E   F709               BRNE    ??decode_IR_9
   \   00000170   9110....           LDS     R17, (IR_reception + 4)
   \   00000174   01A9               MOVW    R21:R20, R19:R18
   \   00000176   5F4C               SUBI    R20, 252
   \   00000178   4F5F               SBCI    R21, 255
   \   0000017A   ........           CALL    __eeget8_16
   \   0000017E   1710               CP      R17, R16
   \   00000180   F6C1               BRNE    ??decode_IR_9
    322          			  {
    323                    ns = ee_scenario[i].ns_number;
   \   00000182   01A9               MOVW    R21:R20, R19:R18
   \   00000184   ........           CALL    __eeget8_16
   \   00000188   2E60               MOV     R6, R16
    324          				  available_command = 1;
   \   0000018A   E081               LDI     R24, 1
    325          					current_scenario = i;
   \   0000018C   2ECA               MOV     R12, R26
    326          				  break;
    327          			  }
    328          			}
    329              }
    330          
    331          		for(i=0;i<14;i++)
   \                     ??decode_IR_7:
   \   0000018E   E0A0               LDI     R26, 0
   \   00000190   C00A               RJMP    ??decode_IR_10
    332          		{
    333          			g_ir_reception[i] = IR_reception.pipe[i];
   \                     ??decode_IR_11:
   \   00000192   E0B0               LDI     R27, 0
   \   00000194   01FD               MOVW    R31:R30, R27:R26
   \   00000196   ....               SUBI    R30, LOW((-(IR_reception) & 0xFFFF))
   \   00000198   ....               SBCI    R31, (-(IR_reception) & 0xFFFF) >> 8
   \   0000019A   8100               LD      R16, Z
   \   0000019C   01FD               MOVW    R31:R30, R27:R26
   \   0000019E   ....               SUBI    R30, LOW((-(g_ir_reception) & 0xFFFF))
   \   000001A0   ....               SBCI    R31, (-(g_ir_reception) & 0xFFFF) >> 8
   \   000001A2   8300               ST      Z, R16
    334          		}
   \   000001A4   95A3               INC     R26
   \                     ??decode_IR_10:
   \   000001A6   30AE               CPI     R26, 14
   \   000001A8   F3A0               BRCS    ??decode_IR_11
    335          
    336          		switch(IR_reception.info)
   \   000001AA   9100....           LDS     R16, (IR_reception + 15)
   \   000001AE   5006               SUBI    R16, 6
   \   000001B0   F051               BREQ    ??decode_IR_12
   \   000001B2   950A               DEC     R16
   \   000001B4   F409               BRNE    $+2+2
   \   000001B6   C09E               RJMP    ??decode_IR_13
   \   000001B8   5002               SUBI    R16, 2
   \   000001BA   F409               BRNE    $+2+2
   \   000001BC   C2A1               RJMP    ??decode_IR_14
   \   000001BE   5004               SUBI    R16, 4
   \   000001C0   F409               BRNE    $+2+2
   \   000001C2   C41D               RJMP    ??decode_IR_15
   \   000001C4   C52A               RJMP    ??decode_IR_16
    337          		{
    338          			case 6:
    339          				//IR_reception.info = 6;			//只剩一帧CRC没有接收到，该数据帧共有0~6共7bytes
    340                  switch(IR_reception.pipe[5])
   \                     ??decode_IR_12:
   \   000001C6   9100....           LDS     R16, (IR_reception + 5)
   \   000001CA   5001               SUBI    R16, 1
   \   000001CC   F029               BREQ    ??decode_IR_17
   \   000001CE   950A               DEC     R16
   \   000001D0   F0D9               BREQ    ??decode_IR_18
   \   000001D2   5005               SUBI    R16, 5
   \   000001D4   F1A9               BREQ    ??decode_IR_19
   \   000001D6   C521               RJMP    ??decode_IR_16
    341                  {
    342                    case 0x01:    //ON
    343                      //load_update(0);
    344                      if(available_command)
   \                     ??decode_IR_17:
   \   000001D8   2388               TST     R24
   \   000001DA   F031               BREQ    ??decode_IR_20
    345                      {
    346                        send_aux_frame(ON,ns,current_scenario);
   \   000001DC   2D2C               MOV     R18, R12
   \   000001DE   2D16               MOV     R17, R6
   \   000001E0   E001               LDI     R16, 1
   \                     ??decode_IR_21:
   \   000001E2   ........           CALL    send_aux_frame
   \   000001E6   C519               RJMP    ??decode_IR_16
    347                      }
    348                      else if(group_flag)
   \                     ??decode_IR_20:
   \   000001E8   2399               TST     R25
   \   000001EA   F409               BRNE    $+2+2
   \   000001EC   C516               RJMP    ??decode_IR_16
    349                      {
    350                        if(product_information.conf_type == NONE_CONFED)
   \   000001EE   9100....           LDS     R16, product_information
   \   000001F2   3003               CPI     R16, 3
   \   000001F4   F409               BRNE    $+2+2
   \   000001F6   C511               RJMP    ??decode_IR_16
    351                        {
    352                        }
    353                        else
    354                        {
    355          								//SCS_received.Manual_ON = 1;     // add by alan on 20090404   //0715
    356          								frame_ON_send();
   \   000001F8   ........           CALL    frame_ON_send
    357          								/*
    358                          if(KO_conf.AddressType == GROUP)	
    359          									send_group_frame(ON);
    360          								else if(KO_conf.AddressType == PP)
    361          									frame_pp_on_off('0');
    362          								*/
    363          								SCS_received.GR_ON = 1;
   \   000001FC   ....               LDI     R30, LOW(SCS_received)
   \   000001FE   ....               LDI     R31, (SCS_received) >> 8
   \   00000200   8100               LD      R16, Z
   \   00000202   6008               ORI     R16, 0x08
   \   00000204   8300               ST      Z, R16
   \   00000206   C509               RJMP    ??decode_IR_16
    364                        }
    365                      }
    366                    break;
    367          
    368                    case 0x02:    //OFF
    369          						//load_update(1);
    370                      if(available_command)
   \                     ??decode_IR_18:
   \   00000208   2388               TST     R24
   \   0000020A   F021               BREQ    ??decode_IR_22
    371                      {
    372                          send_aux_frame(OFF,ns,current_scenario);
   \   0000020C   2D2C               MOV     R18, R12
   \   0000020E   2D16               MOV     R17, R6
   \   00000210   E002               LDI     R16, 2
   \   00000212   CFE7               RJMP    ??decode_IR_21
    373                      }
    374                      else if(group_flag)
   \                     ??decode_IR_22:
   \   00000214   2399               TST     R25
   \   00000216   F409               BRNE    $+2+2
   \   00000218   C500               RJMP    ??decode_IR_16
    375                      {
    376                        if(product_information.conf_type == NONE_CONFED)
   \   0000021A   9100....           LDS     R16, product_information
   \   0000021E   3003               CPI     R16, 3
   \   00000220   F409               BRNE    $+2+2
   \   00000222   C4FB               RJMP    ??decode_IR_16
    377                        {
    378                        }
    379                        else
    380                        {
    381          								/*
    382          								if(KO_conf.AddressType == GROUP)
    383          									send_group_frame(OFF);
    384          								else if(KO_conf.AddressType == PP)
    385          									frame_pp_on_off('1');
    386          								*/
    387          								frame_OFF_send();
   \   00000224   ........           CALL    frame_OFF_send
    388          								SCS_received.GR_OFF = 1;
   \   00000228   ....               LDI     R30, LOW(SCS_received)
   \   0000022A   ....               LDI     R31, (SCS_received) >> 8
   \   0000022C   8100               LD      R16, Z
   \   0000022E   6100               ORI     R16, 0x10
   \   00000230   8300               ST      Z, R16
    389          								SCS_received.P2P_actuator_flag = 0;
   \   00000232   8102               LDD     R16, Z+2
   \   00000234   7F0E               ANDI    R16, 0xFE
   \   00000236   8302               STD     Z+2, R16
    390          								SCS_received.P2P_dimmer_flag = 0;
   \   00000238   8102               LDD     R16, Z+2
   \   0000023A   7F0D               ANDI    R16, 0xFD
   \   0000023C   8302               STD     Z+2, R16
   \   0000023E   C4ED               RJMP    ??decode_IR_16
    391                        }
    392                      }
    393                    break;
    394          
    395                    case 0x07:
    396                      if(current_id != 0xFFFFF)
   \                     ??decode_IR_19:
   \   00000240   810B               LDD     R16, Y+3
   \   00000242   811C               LDD     R17, Y+4
   \   00000244   812D               LDD     R18, Y+5
   \   00000246   813E               LDD     R19, Y+6
   \   00000248   3F0F               CPI     R16, 255
   \   0000024A   EF4F               LDI     R20, 255
   \   0000024C   0714               CPC     R17, R20
   \   0000024E   E04F               LDI     R20, 15
   \   00000250   0724               CPC     R18, R20
   \   00000252   0538               CPC     R19, R8
   \   00000254   F409               BRNE    $+2+2
   \   00000256   C046               RJMP    ??decode_IR_23
    397                      {
    398                        for(i=15;i!=0xFF;i--)
   \   00000258   E0AF               LDI     R26, 15
   \   0000025A   C001               RJMP    ??decode_IR_24
   \                     ??decode_IR_25:
   \   0000025C   95AA               DEC     R26
   \                     ??decode_IR_24:
   \   0000025E   3FAF               CPI     R26, 255
   \   00000260   F409               BRNE    $+2+2
   \   00000262   C4DB               RJMP    ??decode_IR_16
    399          					    {
    400          						    if( (IR_reception.pipe[2] == ee_scenario[i].id[0]) && (IR_reception.pipe[3] == ee_scenario[i].id[1]) && (IR_reception.pipe[4] == ee_scenario[i].id[2]))
   \   00000264   2F4A               MOV     R20, R26
   \   00000266   E050               LDI     R21, 0
   \   00000268   E007               LDI     R16, 7
   \   0000026A   E010               LDI     R17, 0
   \   0000026C   ........           CALL    ?S_EC_MUL_L02
   \   00000270   ....               LDI     R24, LOW(ee_scenario)
   \   00000272   ....               LDI     R25, (ee_scenario) >> 8
   \   00000274   0F80               ADD     R24, R16
   \   00000276   1F91               ADC     R25, R17
   \   00000278   9110....           LDS     R17, (IR_reception + 2)
   \   0000027C   01AC               MOVW    R21:R20, R25:R24
   \   0000027E   5F4E               SUBI    R20, 254
   \   00000280   4F5F               SBCI    R21, 255
   \   00000282   ........           CALL    __eeget8_16
   \   00000286   1710               CP      R17, R16
   \   00000288   F749               BRNE    ??decode_IR_25
   \   0000028A   9110....           LDS     R17, (IR_reception + 3)
   \   0000028E   01AC               MOVW    R21:R20, R25:R24
   \   00000290   5F4D               SUBI    R20, 253
   \   00000292   4F5F               SBCI    R21, 255
   \   00000294   ........           CALL    __eeget8_16
   \   00000298   1710               CP      R17, R16
   \   0000029A   F701               BRNE    ??decode_IR_25
   \   0000029C   9110....           LDS     R17, (IR_reception + 4)
   \   000002A0   01AC               MOVW    R21:R20, R25:R24
   \   000002A2   5F4C               SUBI    R20, 252
   \   000002A4   4F5F               SBCI    R21, 255
   \   000002A6   ........           CALL    __eeget8_16
   \   000002AA   1710               CP      R17, R16
   \   000002AC   F6B9               BRNE    ??decode_IR_25
    401          						    {
    402          							    strncpy(buffer_scs,"B1009300",9);
   \   000002AE   E049               LDI     R20, 9
   \   000002B0   E050               LDI     R21, 0
   \   000002B2   ....               LDI     R18, LOW(`?<Constant "B1009300">`)
   \   000002B4   ....               LDI     R19, (`?<Constant "B1009300">`) >> 8
   \   000002B6   018E               MOVW    R17:R16, R29:R28
   \   000002B8   5E0C               SUBI    R16, 236
   \   000002BA   4F1F               SBCI    R17, 255
   \   000002BC   ........           CALL    strncpy
    403          							    CharToStr(ee_scenario[i].ns_number,buffer_char);
   \   000002C0   019E               MOVW    R19:R18, R29:R28
   \   000002C2   01AC               MOVW    R21:R20, R25:R24
   \   000002C4   ........           CALL    __eeget8_16
   \   000002C8   ........           CALL    CharToStr
    404          							    buffer_scs[2] = buffer_char[0];
   \   000002CC   8108               LD      R16, Y
   \   000002CE   8B0E               STD     Y+22, R16
    405          							    buffer_scs[3] = buffer_char[1];
   \   000002D0   8109               LDD     R16, Y+1
   \   000002D2   8B0F               STD     Y+23, R16
    406          							    send_frame_pp_broad(buffer_scs,0);
   \   000002D4   E020               LDI     R18, 0
   \   000002D6   E030               LDI     R19, 0
   \   000002D8   018E               MOVW    R17:R16, R29:R28
   \   000002DA   5E0C               SUBI    R16, 236
   \   000002DC   4F1F               SBCI    R17, 255
   \   000002DE   ........           CALL    send_frame_pp_broad
    407          							    break;
   \   000002E2   C49B               RJMP    ??decode_IR_16
    408          						    }
    409          					    }
    410                      }
    411                      else
    412                      {
    413                        if(ns < 16)
   \                     ??decode_IR_23:
   \   000002E4   E100               LDI     R16, 16
   \   000002E6   1660               CP      R6, R16
   \   000002E8   F008               BRCS    $+2+2
   \   000002EA   C497               RJMP    ??decode_IR_16
    414                        {
    415                          send_aux_frame(ACTION,ns,current_scenario);
   \   000002EC   2D2C               MOV     R18, R12
   \   000002EE   2D16               MOV     R17, R6
   \   000002F0   E007               LDI     R16, 7
   \   000002F2   CF77               RJMP    ??decode_IR_21
    416                        }
    417                      }
    418                    break;
    419          
    420                    default:break;
    421                  }
    422          			break;
    423          			
    424          			case 7:
    425          				//IR_reception.info = 7;			//该数据帧共有0~7共8bytes
    426          				if(IR_reception.pipe[5] == 0x70)
   \                     ??decode_IR_13:
   \   000002F4   9100....           LDS     R16, (IR_reception + 5)
   \   000002F8   3700               CPI     R16, 112
   \   000002FA   F009               BREQ    $+2+2
   \   000002FC   C48E               RJMP    ??decode_IR_16
    427          				{
    428          					switch(IR_reception.pipe[6])
   \   000002FE   9100....           LDS     R16, (IR_reception + 6)
   \   00000302   ....               LDI     R30, LOW(`?<Jumptable for decode_IR>_0`)
   \   00000304   ....               LDI     R31, (`?<Jumptable for decode_IR>_0`) >> 8
   \   00000306   ........           JMP     ?CV_SWITCH_L06
    429          					{
    430          						case 0x00:  //announce ID
    431          							//led_blinking(1000,1000);
    432          							//state.main_state = PNL_IR_SCENARIO_STEP1;
    433          							//timer_flex_initial(60000);
    434          						break;
    435          
    436          						case 0x0E:  //erase_ID address_erase
    437          							if( (IR_reception.pipe[4] & 0x0F) == 0)
   \                     ??decode_IR_26:
   \   0000030A   9100....           LDS     R16, (IR_reception + 4)
   \   0000030E   700F               ANDI    R16, 0x0F
   \   00000310   E0A0               LDI     R26, 0
   \   00000312   F009               BREQ    $+2+2
   \   00000314   C0F4               RJMP    ??decode_IR_27
    438          							{
    439          								for(i=0;i<16;i++)
   \   00000316   C006               RJMP    ??decode_IR_28
    440          								{
    441          									ns_sended[i] = 0;
   \                     ??decode_IR_29:
   \   00000318   01FE               MOVW    R31:R30, R29:R28
   \   0000031A   96B5               ADIW    R31:R30, 37
   \   0000031C   0FEA               ADD     R30, R26
   \   0000031E   1DF8               ADC     R31, R8
   \   00000320   8280               ST      Z, R8
    442          								}
   \   00000322   95A3               INC     R26
   \                     ??decode_IR_28:
   \   00000324   31A0               CPI     R26, 16
   \   00000326   F3C0               BRCS    ??decode_IR_29
    443                          strncpy(buffer_scs,"D200090811000066",17);
   \   00000328   E141               LDI     R20, 17
   \   0000032A   E050               LDI     R21, 0
   \   0000032C   ....               LDI     R18, LOW((`?<Constant "B1009300">` + 9))
   \   0000032E   ....               LDI     R19, HIGH((`?<Constant "B1009300">` + 9))
   \   00000330   018E               MOVW    R17:R16, R29:R28
   \   00000332   5E0C               SUBI    R16, 236
   \   00000334   4F1F               SBCI    R17, 255
   \   00000336   ........           CALL    strncpy
    444                          for(i=0;i<16;i++)
   \   0000033A   E0A0               LDI     R26, 0
   \   0000033C   C042               RJMP    ??decode_IR_30
    445                          {
    446          									avoid_twice = 0;
    447          									//&& (ee_scenario[i].id[2] & 0xF0 == IR_reception.pipe[4] & 0xF0)
    448          									if((ee_scenario[i].id[0] == IR_reception.pipe[2] )&& (ee_scenario[i].id[1] == IR_reception.pipe[3]))
    449          									{
    450          										if((ee_scenario[i].id[2] & 0xF0) == (IR_reception.pipe[4] & 0xF0))
    451          										{
    452          											CharToStr(ee_scenario[i].ns_number,buffer_char);
    453                              	buffer_scs[10] = buffer_char[0];
    454                              	buffer_scs[11] = buffer_char[1];
    455          											temp_ns = i;
    456          											
    457          											if(ee_scenario[i].confed)
    458          											{
    459          												for(j=0;j<i;j++)
   \                     ??decode_IR_31:
   \   0000033E   9523               INC     R18
   \                     ??decode_IR_32:
   \   00000340   172A               CP      R18, R26
   \   00000342   F458               BRCC    ??decode_IR_33
    460          												{
    461          													if(ns_sended[j] == ee_scenario[i].ns_number)
   \   00000344   01FE               MOVW    R31:R30, R29:R28
   \   00000346   96B5               ADIW    R31:R30, 37
   \   00000348   0FE2               ADD     R30, R18
   \   0000034A   1DF8               ADC     R31, R8
   \   0000034C   8110               LD      R17, Z
   \   0000034E   01AC               MOVW    R21:R20, R25:R24
   \   00000350   ........           CALL    __eeget8_16
   \   00000354   1710               CP      R17, R16
   \   00000356   F799               BRNE    ??decode_IR_31
    462          													{
    463          														avoid_twice = 1;
   \   00000358   E0B1               LDI     R27, 1
    464          														break;
    465          													}
    466          												}
    467          											}
    468          										
    469          											if(avoid_twice == 0)
   \                     ??decode_IR_33:
   \   0000035A   23BB               TST     R27
   \   0000035C   F479               BRNE    ??decode_IR_34
    470          											{
    471                              		send_frame_pp_ext_broad(buffer_scs,TRANS_DELAY);
   \   0000035E   E322               LDI     R18, 50
   \   00000360   E030               LDI     R19, 0
   \   00000362   018E               MOVW    R17:R16, R29:R28
   \   00000364   5E0C               SUBI    R16, 236
   \   00000366   4F1F               SBCI    R17, 255
   \   00000368   ........           CALL    send_frame_pp_ext_broad
    472          												ns_sended[temp_ns] = ee_scenario[temp_ns].ns_number;
   \   0000036C   01AC               MOVW    R21:R20, R25:R24
   \   0000036E   ........           CALL    __eeget8_16
   \   00000372   01FE               MOVW    R31:R30, R29:R28
   \   00000374   96B5               ADIW    R31:R30, 37
   \   00000376   0FEA               ADD     R30, R26
   \   00000378   1DF8               ADC     R31, R8
   \   0000037A   8300               ST      Z, R16
    473          											}
    474          										
    475          											ee_scenario[temp_ns].ns_number = 0x01;
   \                     ??decode_IR_34:
   \   0000037C   E001               LDI     R16, 1
   \   0000037E   01AC               MOVW    R21:R20, R25:R24
   \   00000380   ........           CALL    __eeput8_16
    476          											ee_scenario[temp_ns].id[0] = 0;
   \   00000384   E000               LDI     R16, 0
   \   00000386   01AC               MOVW    R21:R20, R25:R24
   \   00000388   5F4E               SUBI    R20, 254
   \   0000038A   4F5F               SBCI    R21, 255
   \   0000038C   ........           CALL    __eeput8_16
    477          											ee_scenario[temp_ns].id[1] = 0;
   \   00000390   01AC               MOVW    R21:R20, R25:R24
   \   00000392   5F4D               SUBI    R20, 253
   \   00000394   4F5F               SBCI    R21, 255
   \   00000396   ........           CALL    __eeput8_16
    478          											ee_scenario[temp_ns].id[2] = 0;
   \   0000039A   01AC               MOVW    R21:R20, R25:R24
   \   0000039C   5F4C               SUBI    R20, 252
   \   0000039E   4F5F               SBCI    R21, 255
   \   000003A0   ........           CALL    __eeput8_16
    479          											ee_scenario[temp_ns].key_number = 0;
   \   000003A4   01AC               MOVW    R21:R20, R25:R24
   \   000003A6   5F4B               SUBI    R20, 251
   \   000003A8   4F5F               SBCI    R21, 255
   \   000003AA   ........           CALL    __eeput8_16
    480          											ee_scenario[temp_ns].confed = 0;
   \   000003AE   9606               ADIW    R25:R24, 6
   \   000003B0   01AC               MOVW    R21:R20, R25:R24
   \   000003B2   ........           CALL    __eeput8_16
    481          											
    482          											g_ns_index = temp_ns;
   \   000003B6   ....               LDI     R20, LOW(g_ns_index)
   \   000003B8   ....               LDI     R21, (g_ns_index) >> 8
   \   000003BA   2F0A               MOV     R16, R26
   \   000003BC   ........           CALL    __eeput8_16
   \                     ??decode_IR_35:
   \   000003C0   95A3               INC     R26
   \                     ??decode_IR_30:
   \   000003C2   31A0               CPI     R26, 16
   \   000003C4   F008               BRCS    $+2+2
   \   000003C6   C09E               RJMP    ??decode_IR_36
   \   000003C8   E0B0               LDI     R27, 0
   \   000003CA   2F4A               MOV     R20, R26
   \   000003CC   E050               LDI     R21, 0
   \   000003CE   E007               LDI     R16, 7
   \   000003D0   E010               LDI     R17, 0
   \   000003D2   ........           CALL    ?S_EC_MUL_L02
   \   000003D6   ....               LDI     R24, LOW(ee_scenario)
   \   000003D8   ....               LDI     R25, (ee_scenario) >> 8
   \   000003DA   0F80               ADD     R24, R16
   \   000003DC   1F91               ADC     R25, R17
   \   000003DE   01AC               MOVW    R21:R20, R25:R24
   \   000003E0   5F4E               SUBI    R20, 254
   \   000003E2   4F5F               SBCI    R21, 255
   \   000003E4   ........           CALL    __eeget8_16
   \   000003E8   9110....           LDS     R17, (IR_reception + 2)
   \   000003EC   1701               CP      R16, R17
   \   000003EE   F741               BRNE    ??decode_IR_35
   \   000003F0   01AC               MOVW    R21:R20, R25:R24
   \   000003F2   5F4D               SUBI    R20, 253
   \   000003F4   4F5F               SBCI    R21, 255
   \   000003F6   ........           CALL    __eeget8_16
   \   000003FA   9110....           LDS     R17, (IR_reception + 3)
   \   000003FE   1701               CP      R16, R17
   \   00000400   F6F9               BRNE    ??decode_IR_35
   \   00000402   01AC               MOVW    R21:R20, R25:R24
   \   00000404   5F4C               SUBI    R20, 252
   \   00000406   4F5F               SBCI    R21, 255
   \   00000408   ........           CALL    __eeget8_16
   \   0000040C   7F00               ANDI    R16, 0xF0
   \   0000040E   9110....           LDS     R17, (IR_reception + 4)
   \   00000412   7F10               ANDI    R17, 0xF0
   \   00000414   1701               CP      R16, R17
   \   00000416   F6A1               BRNE    ??decode_IR_35
   \   00000418   019E               MOVW    R19:R18, R29:R28
   \   0000041A   01AC               MOVW    R21:R20, R25:R24
   \   0000041C   ........           CALL    __eeget8_16
   \   00000420   ........           CALL    CharToStr
   \   00000424   8108               LD      R16, Y
   \   00000426   8F0E               STD     Y+30, R16
   \   00000428   8109               LDD     R16, Y+1
   \   0000042A   8F0F               STD     Y+31, R16
   \   0000042C   01AC               MOVW    R21:R20, R25:R24
   \   0000042E   5F4A               SUBI    R20, 250
   \   00000430   4F5F               SBCI    R21, 255
   \   00000432   ........           CALL    __eeget8_16
   \   00000436   2300               TST     R16
   \   00000438   F409               BRNE    $+2+2
   \   0000043A   CF8F               RJMP    ??decode_IR_33
   \   0000043C   E020               LDI     R18, 0
   \   0000043E   CF80               RJMP    ??decode_IR_32
    483          										}
    484          									}
    485          									/*
    486                            if(ee_scenario[i].confed)
    487                            {
    488                              CharToStr(ee_scenario[i].ns_number,buffer_char);
    489                              buffer_scs[10] = buffer_char[0];
    490                              buffer_scs[11] = buffer_char[1];
    491                              send_frame_pp_ext_broad(buffer_scs,TRANS_DELAY);
    492                            }
    493          									*/
    494                          }
    495                          /*
    496          								for(i=0;i<16;i++)
    497          								{
    498          									ee_scenario[i].ns_number = 0x01;
    499          									ee_scenario[i].id[0] = 0;
    500          									ee_scenario[i].id[1] = 0;
    501          									ee_scenario[i].id[2] = 0;
    502          									ee_scenario[i].key_number = 0;
    503          									ee_scenario[i].confed = 0;
    504          								}
    505          								*/
    506          							}
    507          							else
    508          							{
    509          								for(i=0;i<16;i++)
    510          								{
    511          									if( (IR_reception.pipe[2] == ee_scenario[i].id[0]) && (IR_reception.pipe[3] == ee_scenario[i].id[1]) && (IR_reception.pipe[4] == ee_scenario[i].id[2]))
   \                     ??decode_IR_37:
   \   00000440   2F4A               MOV     R20, R26
   \   00000442   E050               LDI     R21, 0
   \   00000444   E007               LDI     R16, 7
   \   00000446   E010               LDI     R17, 0
   \   00000448   ........           CALL    ?S_EC_MUL_L02
   \   0000044C   ....               LDI     R24, LOW(ee_scenario)
   \   0000044E   ....               LDI     R25, (ee_scenario) >> 8
   \   00000450   0F80               ADD     R24, R16
   \   00000452   1F91               ADC     R25, R17
   \   00000454   9110....           LDS     R17, (IR_reception + 2)
   \   00000458   01AC               MOVW    R21:R20, R25:R24
   \   0000045A   5F4E               SUBI    R20, 254
   \   0000045C   4F5F               SBCI    R21, 255
   \   0000045E   ........           CALL    __eeget8_16
   \   00000462   1710               CP      R17, R16
   \   00000464   F009               BREQ    $+2+2
   \   00000466   C04A               RJMP    ??decode_IR_38
   \   00000468   9110....           LDS     R17, (IR_reception + 3)
   \   0000046C   01AC               MOVW    R21:R20, R25:R24
   \   0000046E   5F4D               SUBI    R20, 253
   \   00000470   4F5F               SBCI    R21, 255
   \   00000472   ........           CALL    __eeget8_16
   \   00000476   1710               CP      R17, R16
   \   00000478   F009               BREQ    $+2+2
   \   0000047A   C040               RJMP    ??decode_IR_38
   \   0000047C   9110....           LDS     R17, (IR_reception + 4)
   \   00000480   01AC               MOVW    R21:R20, R25:R24
   \   00000482   5F4C               SUBI    R20, 252
   \   00000484   4F5F               SBCI    R21, 255
   \   00000486   ........           CALL    __eeget8_16
   \   0000048A   1710               CP      R17, R16
   \   0000048C   F5B9               BRNE    ??decode_IR_38
    512          									{
    513          										strncpy(buffer_scs,"D200090811000066",17);
   \   0000048E   E141               LDI     R20, 17
   \   00000490   E050               LDI     R21, 0
   \   00000492   ....               LDI     R18, LOW((`?<Constant "B1009300">` + 9))
   \   00000494   ....               LDI     R19, HIGH((`?<Constant "B1009300">` + 9))
   \   00000496   018E               MOVW    R17:R16, R29:R28
   \   00000498   5E0C               SUBI    R16, 236
   \   0000049A   4F1F               SBCI    R17, 255
   \   0000049C   ........           CALL    strncpy
    514          										CharToStr(ee_scenario[i].ns_number,buffer_char);
   \   000004A0   019E               MOVW    R19:R18, R29:R28
   \   000004A2   01AC               MOVW    R21:R20, R25:R24
   \   000004A4   ........           CALL    __eeget8_16
   \   000004A8   ........           CALL    CharToStr
    515          										buffer_scs[10] = buffer_char[0];
   \   000004AC   8108               LD      R16, Y
   \   000004AE   8F0E               STD     Y+30, R16
    516          										buffer_scs[11] = buffer_char[1];
   \   000004B0   8109               LDD     R16, Y+1
   \   000004B2   8F0F               STD     Y+31, R16
    517          										send_frame_pp_ext_broad(buffer_scs,0);
   \   000004B4   E020               LDI     R18, 0
   \   000004B6   E030               LDI     R19, 0
   \   000004B8   018E               MOVW    R17:R16, R29:R28
   \   000004BA   5E0C               SUBI    R16, 236
   \   000004BC   4F1F               SBCI    R17, 255
   \   000004BE   ........           CALL    send_frame_pp_ext_broad
    518          
    519          										ee_scenario[i].ns_number =0x01;
   \   000004C2   E001               LDI     R16, 1
   \   000004C4   01AC               MOVW    R21:R20, R25:R24
   \   000004C6   ........           CALL    __eeput8_16
    520          										ee_scenario[i].id[0] = 0;
   \   000004CA   E000               LDI     R16, 0
   \   000004CC   01AC               MOVW    R21:R20, R25:R24
   \   000004CE   5F4E               SUBI    R20, 254
   \   000004D0   4F5F               SBCI    R21, 255
   \   000004D2   ........           CALL    __eeput8_16
    521          										ee_scenario[i].id[1] = 0;
   \   000004D6   01AC               MOVW    R21:R20, R25:R24
   \   000004D8   5F4D               SUBI    R20, 253
   \   000004DA   4F5F               SBCI    R21, 255
   \   000004DC   ........           CALL    __eeput8_16
    522          										ee_scenario[i].id[2] = 0;
   \   000004E0   01AC               MOVW    R21:R20, R25:R24
   \   000004E2   5F4C               SUBI    R20, 252
   \   000004E4   4F5F               SBCI    R21, 255
   \   000004E6   ........           CALL    __eeput8_16
    523          										ee_scenario[i].key_number = 0;
   \   000004EA   01AC               MOVW    R21:R20, R25:R24
   \   000004EC   5F4B               SUBI    R20, 251
   \   000004EE   4F5F               SBCI    R21, 255
   \   000004F0   ........           CALL    __eeput8_16
    524          										ee_scenario[i].confed = 0;
   \   000004F4   9606               ADIW    R25:R24, 6
   \   000004F6   01AC               MOVW    R21:R20, R25:R24
   \   000004F8   ........           CALL    __eeput8_16
    525          									}
    526          								}
   \                     ??decode_IR_38:
   \   000004FC   95A3               INC     R26
   \                     ??decode_IR_27:
   \   000004FE   31A0               CPI     R26, 16
   \   00000500   F408               BRCC    $+2+2
   \   00000502   CF9E               RJMP    ??decode_IR_37
    527          							}
    528          							
    529          							led_blinking(60,250);
   \                     ??decode_IR_36:
   \   00000504   EF4A               LDI     R20, 250
   \   00000506   E050               LDI     R21, 0
   \   00000508   E060               LDI     R22, 0
   \   0000050A   E070               LDI     R23, 0
   \   0000050C   E30C               LDI     R16, 60
   \   0000050E   E010               LDI     R17, 0
   \   00000510   E020               LDI     R18, 0
   \   00000512   E030               LDI     R19, 0
   \   00000514   ........           CALL    led_blinking
    530          							timer_flex_initial(5000);
   \   00000518   E808               LDI     R16, 136
   \   0000051A   E113               LDI     R17, 19
   \   0000051C   E020               LDI     R18, 0
   \   0000051E   E030               LDI     R19, 0
   \   00000520   ........           CALL    timer_flex_initial
    531          							state.main_state = PNL_IR_SCENARIO_STEP8;
   \   00000524   E108               LDI     R16, 24
   \                     ??decode_IR_39:
   \   00000526   E910               LDI     R17, 144
   \   00000528   ....               LDI     R30, LOW(state)
   \   0000052A   ....               LDI     R31, (state) >> 8
   \                     ??decode_IR_40:
   \   0000052C   8302               STD     Z+2, R16
   \   0000052E   8313               STD     Z+3, R17
   \   00000530   C374               RJMP    ??decode_IR_16
    532          
    533          						break;
    534          
    535          						case 0x07: //close learning
    536          							//strlcpy(buffer_ID,&IR_reception.pipe[2],4);
    537                        if(state.main_state > PNL_IR_SCENARIO_STEP3 && state.main_state < PNL_IR_SCENARIO_STEP7)
   \                     ??decode_IR_41:
   \   00000532   ....               LDI     R30, LOW(state)
   \   00000534   ....               LDI     R31, (state) >> 8
   \   00000536   8102               LDD     R16, Z+2
   \   00000538   8113               LDD     R17, Z+3
   \   0000053A   3106               CPI     R16, 22
   \   0000053C   E920               LDI     R18, 144
   \   0000053E   0712               CPC     R17, R18
   \   00000540   F408               BRCC    $+2+2
   \   00000542   C36B               RJMP    ??decode_IR_16
   \   00000544   8102               LDD     R16, Z+2
   \   00000546   8113               LDD     R17, Z+3
   \   00000548   3107               CPI     R16, 23
   \   0000054A   0712               CPC     R17, R18
   \   0000054C   F008               BRCS    $+2+2
   \   0000054E   C365               RJMP    ??decode_IR_16
    538          							{
    539          								if(current_id == temp_variable.ID)
   \   00000550   810B               LDD     R16, Y+3
   \   00000552   811C               LDD     R17, Y+4
   \   00000554   812D               LDD     R18, Y+5
   \   00000556   813E               LDD     R19, Y+6
   \   00000558   ....               LDI     R30, LOW(temp_variable)
   \   0000055A   ....               LDI     R31, (temp_variable) >> 8
   \   0000055C   8547               LDD     R20, Z+15
   \   0000055E   8950               LDD     R21, Z+16
   \   00000560   8961               LDD     R22, Z+17
   \   00000562   8972               LDD     R23, Z+18
   \   00000564   1704               CP      R16, R20
   \   00000566   0715               CPC     R17, R21
   \   00000568   0726               CPC     R18, R22
   \   0000056A   0737               CPC     R19, R23
   \   0000056C   F009               BREQ    $+2+2
   \   0000056E   C355               RJMP    ??decode_IR_16
    540          								{
    541          									temp_variable.ID = 0;
   \   00000570   8687               STD     Z+15, R8
   \   00000572   8A80               STD     Z+16, R8
   \   00000574   8A81               STD     Z+17, R8
   \   00000576   8A82               STD     Z+18, R8
    542          									state.pnl_slave = NORMAL;
   \   00000578   9280....           STS     (state + 4), R8
    543          							  	state.main_state = PNL_IR_SCENARIO_STEP7;
   \   0000057C   E107               LDI     R16, 23
   \   0000057E   CFD3               RJMP    ??decode_IR_39
    544          								}
    545          							}
    546          						break;
    547          
    548          						case 0x2C:	//START_GROUP_PNL
    549                        if(state.main_state == STATE_NORMAL)
   \                     ??decode_IR_42:
   \   00000580   ....               LDI     R30, LOW(state)
   \   00000582   ....               LDI     R31, (state) >> 8
   \   00000584   8102               LDD     R16, Z+2
   \   00000586   8113               LDD     R17, Z+3
   \   00000588   2B01               OR      R16, R17
   \   0000058A   F009               BREQ    $+2+2
   \   0000058C   C346               RJMP    ??decode_IR_16
    550                        {
    551                          if(product_information.conf_type == NONE_CONFED)
   \   0000058E   9100....           LDS     R16, product_information
   \   00000592   3003               CPI     R16, 3
   \   00000594   F439               BRNE    ??decode_IR_43
    552                          {
    553          							    state.main_state = PNL_NONE_CONFED_STEP1;
   \   00000596   E001               LDI     R16, 1
   \   00000598   E910               LDI     R17, 144
   \   0000059A   8302               STD     Z+2, R16
   \   0000059C   8313               STD     Z+3, R17
    554                            key_result.short_pressed = 1;
   \                     ??decode_IR_44:
   \   0000059E   9300....           STS     key_result, R16
   \   000005A2   C33B               RJMP    ??decode_IR_16
    555                          }
    556                          else if(product_information.conf_type == ADVANCED)
   \                     ??decode_IR_43:
   \   000005A4   9100....           LDS     R16, product_information
   \   000005A8   3002               CPI     R16, 2
   \   000005AA   F009               BREQ    $+2+2
   \   000005AC   C336               RJMP    ??decode_IR_16
    557                          {
    558                            state.main_state = PNL_AD_CONFED_STEP1;
   \   000005AE   E007               LDI     R16, 7
   \                     ??decode_IR_45:
   \   000005B0   E910               LDI     R17, 144
   \   000005B2   8302               STD     Z+2, R16
   \   000005B4   8313               STD     Z+3, R17
    559                            key_result.short_pressed = 1;
   \   000005B6   E001               LDI     R16, 1
   \   000005B8   CFF2               RJMP    ??decode_IR_44
    560                          }
    561                        }
    562          						break;
    563          							
    564          						case 0x2D: //NEXT_ACTUATOR
    565          							send_frame_pp_ext_broad("D20001428C000B01",TRANS_DELAY);
   \                     ??decode_IR_46:
   \   000005BA   E322               LDI     R18, 50
   \   000005BC   E030               LDI     R19, 0
   \   000005BE   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 26))
   \   000005C0   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 26))
   \                     ??decode_IR_47:
   \   000005C2   ........           CALL    send_frame_pp_ext_broad
   \   000005C6   C329               RJMP    ??decode_IR_16
    566          						break;
    567          
    568          						case 0x2E: //INCLUDE
    569          							send_frame_pp_ext_broad("D20001428C000B02",TRANS_DELAY);
   \                     ??decode_IR_48:
   \   000005C8   E322               LDI     R18, 50
   \   000005CA   E030               LDI     R19, 0
   \   000005CC   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 43))
   \   000005CE   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 43))
   \   000005D0   CFF8               RJMP    ??decode_IR_47
    570          						break;
    571          
    572          						case 0x2F: //EXCLUDE
    573          							send_frame_pp_ext_broad("D20001428C000B03",TRANS_DELAY);
   \                     ??decode_IR_49:
   \   000005D2   E322               LDI     R18, 50
   \   000005D4   E030               LDI     R19, 0
   \   000005D6   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 60))
   \   000005D8   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 60))
   \   000005DA   CFF3               RJMP    ??decode_IR_47
    574          						break;
    575          
    576          						case 0x30:    //SET_ON
    577          							//SCS_received.Manual_ON = 1;    // add by alan on 20090404  //0715
    578                        send_frame_pp_ext_broad("D20001428C000B04",TRANS_DELAY);
   \                     ??decode_IR_50:
   \   000005DC   E322               LDI     R18, 50
   \   000005DE   E030               LDI     R19, 0
   \   000005E0   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 77))
   \   000005E2   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 77))
   \   000005E4   CFEE               RJMP    ??decode_IR_47
    579          						break;
    580          						
    581          						case 0x31:    //SET_OFF
    582          							//SCS_received.Manual_OFF = 1;    // add by alan on 20090404  //0715
    583                        send_frame_pp_ext_broad("D20001428C000B05",TRANS_DELAY);
   \                     ??decode_IR_51:
   \   000005E6   E322               LDI     R18, 50
   \   000005E8   E030               LDI     R19, 0
   \   000005EA   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 94))
   \   000005EC   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 94))
   \   000005EE   CFE9               RJMP    ??decode_IR_47
    584          						break;
    585          
    586                      case 0x32:    //SET_DIMMING_UP
    587                        send_frame_pp_ext_broad("D20001428C000B06",TRANS_DELAY);
   \                     ??decode_IR_52:
   \   000005F0   E322               LDI     R18, 50
   \   000005F2   E030               LDI     R19, 0
   \   000005F4   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 111))
   \   000005F6   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 111))
   \   000005F8   CFE4               RJMP    ??decode_IR_47
    588                      break;
    589          
    590                      case 0x33:    //SET_DIMMING_DOWN
    591                        send_frame_pp_ext_broad("D20001428C000B07",TRANS_DELAY);
   \                     ??decode_IR_53:
   \   000005FA   E322               LDI     R18, 50
   \   000005FC   E030               LDI     R19, 0
   \   000005FE   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 128))
   \   00000600   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 128))
   \   00000602   CFDF               RJMP    ??decode_IR_47
    592                      break;
    593          
    594          						case 0x34:  //END_GROUP_PNL
    595                        if(state.main_state != STATE_NORMAL)
   \                     ??decode_IR_54:
   \   00000604   ....               LDI     R30, LOW(state)
   \   00000606   ....               LDI     R31, (state) >> 8
   \   00000608   8102               LDD     R16, Z+2
   \   0000060A   8113               LDD     R17, Z+3
   \   0000060C   2B01               OR      R16, R17
   \   0000060E   F409               BRNE    $+2+2
   \   00000610   C304               RJMP    ??decode_IR_16
    596                        {
    597                          if(product_information.conf_type == NONE_CONFED)
   \   00000612   9100....           LDS     R16, product_information
   \   00000616   3003               CPI     R16, 3
   \   00000618   F419               BRNE    ??decode_IR_55
    598                          {
    599          							    state.main_state = PNL_NONE_CONFED_STEP4;
   \   0000061A   E004               LDI     R16, 4
   \   0000061C   E910               LDI     R17, 144
   \   0000061E   CF86               RJMP    ??decode_IR_40
    600                            //key_result.short_pressed = 1;
    601                          }
    602                          else if(product_information.conf_type == ADVANCED)
   \                     ??decode_IR_55:
   \   00000620   9100....           LDS     R16, product_information
   \   00000624   3002               CPI     R16, 2
   \   00000626   F009               BREQ    $+2+2
   \   00000628   C2F8               RJMP    ??decode_IR_16
    603                          {
    604                            state.main_state = PNL_AD_CONFED_STEP90;
   \   0000062A   E101               LDI     R16, 17
   \   0000062C   CFC1               RJMP    ??decode_IR_45
    605                            key_result.short_pressed = 1;
    606                          }
    607                        }
    608          						break;
    609          
    610          						case 0x35: //ERASE_GROUP_PNL
    611          							//send_frame_pp_ext_broad("D20001428CGG0944",TRANS_DELAY);
    612                        if(available_command)
   \                     ??decode_IR_56:
   \   0000062E   2388               TST     R24
   \   00000630   F159               BREQ    ??decode_IR_57
    613                        {
    614          								if(KO_conf.Reference != 0)
   \   00000632   9100....           LDS     R16, (KO_conf + 5)
   \   00000636   2300               TST     R16
   \   00000638   F031               BREQ    ??decode_IR_58
    615          									send_group_pnl_frame(SET,KO_conf.Reference,REF_TRANS);
   \   0000063A   E323               LDI     R18, 51
   \   0000063C   9110....           LDS     R17, (KO_conf + 5)
   \   00000640   E302               LDI     R16, 50
   \   00000642   ........           CALL    send_group_pnl_frame
    616          			
    617          								if(ee_flags.PnG_confed)
   \                     ??decode_IR_58:
   \   00000646   ....               LDI     R20, LOW(ee_flags)
   \   00000648   ....               LDI     R21, (ee_flags) >> 8
   \   0000064A   ........           CALL    __eeget16_16
   \   0000064E   7002               ANDI    R16, 0x02
   \   00000650   F059               BREQ    ??decode_IR_59
    618          								{
    619          									KO_conf.Reference = ee_variable.Reference;
   \   00000652   ....               LDI     R20, LOW((ee_variable + 1))
   \   00000654   ....               LDI     R21, HIGH((ee_variable + 1))
   \   00000656   ........           CALL    __eeget8_16
   \   0000065A   9300....           STS     (KO_conf + 5), R16
    620          									ee_KO_conf.Reference = ee_variable.Reference;
   \   0000065E   ....               LDI     R20, LOW((ee_variable + 1))
   \   00000660   ....               LDI     R21, HIGH((ee_variable + 1))
   \   00000662   ........           CALL    __eeget8_16
   \   00000666   C003               RJMP    ??decode_IR_60
    621          								}
    622          								else
    623          								{
    624          									KO_conf.Reference = 0;
   \                     ??decode_IR_59:
   \   00000668   E000               LDI     R16, 0
   \   0000066A   9300....           STS     (KO_conf + 5), R16
    625          									ee_KO_conf.Reference = 0;
   \                     ??decode_IR_60:
   \   0000066E   ....               LDI     R20, LOW((ee_KO_conf + 5))
   \   00000670   ....               LDI     R21, HIGH((ee_KO_conf + 5))
   \   00000672   ........           CALL    __eeput8_16
    626          								}
    627          
    628                          send_frame_pp_ext_broad("D20001428C000B05",TRANS_DELAY);
   \   00000676   E322               LDI     R18, 50
   \   00000678   E030               LDI     R19, 0
   \   0000067A   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 94))
   \   0000067C   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 94))
   \   0000067E   ........           CALL    send_frame_pp_ext_broad
    629                          led_blinking_normal();
   \   00000682   ........           CALL    led_blinking_normal
   \   00000686   C2C9               RJMP    ??decode_IR_16
    630                        }
    631                        else if(group_flag)
   \                     ??decode_IR_57:
   \   00000688   2399               TST     R25
   \   0000068A   F409               BRNE    $+2+2
   \   0000068C   C2C6               RJMP    ??decode_IR_16
    632                        {
    633                          if(product_information.conf_type == NONE_CONFED)
   \   0000068E   9100....           LDS     R16, product_information
   \   00000692   3003               CPI     R16, 3
   \   00000694   F409               BRNE    $+2+2
   \   00000696   C2C1               RJMP    ??decode_IR_16
    634                          {
    635                          }
    636                          else
    637                          {
    638          									send_group_frame(ERASE);
   \   00000698   E008               LDI     R16, 8
   \   0000069A   ........           CALL    send_group_frame
    639                            if(available_command)
   \   0000069E   C2BD               RJMP    ??decode_IR_16
    640                        		{
    641          										if(KO_conf.Reference != 0)
    642          											send_group_pnl_frame(SET,KO_conf.Reference,REF_TRANS);
    643          			
    644          										if(ee_flags.PnG_confed)
    645          										{
    646          											KO_conf.Reference = ee_variable.Reference;
    647          											ee_KO_conf.Reference = ee_variable.Reference;
    648          										}
    649          										else
    650          										{
    651          											KO_conf.Reference = 0;
    652          											ee_KO_conf.Reference = 0;
    653          										}
    654                            	led_blinking_normal();
    655                          	}
    656                        	}
    657          							}
    658          						break;
    659          
    660          						case 0x36: //ADD_PERIPHERAL
    661          							send_frame_pp_ext_broad("D20001428C000802",TRANS_DELAY);
   \                     ??decode_IR_61:
   \   000006A0   E322               LDI     R18, 50
   \   000006A2   E030               LDI     R19, 0
   \   000006A4   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 145))
   \   000006A6   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 145))
   \   000006A8   CF8C               RJMP    ??decode_IR_47
    662          						break;
    663          
    664          						case 0x37:			// return to factory default
    665                        if(product_information.conf_type == ADVANCED)
   \                     ??decode_IR_62:
   \   000006AA   9100....           LDS     R16, product_information
   \   000006AE   3002               CPI     R16, 2
   \   000006B0   F4E9               BRNE    ??decode_IR_63
    666                        {
    667                          if(KO_conf.GR != 0)
   \   000006B2   9100....           LDS     R16, (KO_conf + 6)
   \   000006B6   2300               TST     R16
   \   000006B8   F0C9               BREQ    ??decode_IR_63
    668                          {
    669                            CharToStr(KO_conf.GR,buffer_char);
   \   000006BA   019E               MOVW    R19:R18, R29:R28
   \   000006BC   9100....           LDS     R16, (KO_conf + 6)
   \   000006C0   ........           CALL    CharToStr
    670                            strncpy(buffer_scs,"D20001428C000947",17);
   \   000006C4   E141               LDI     R20, 17
   \   000006C6   E050               LDI     R21, 0
   \   000006C8   ....               LDI     R18, LOW((`?<Constant "B1009300">` + 162))
   \   000006CA   ....               LDI     R19, HIGH((`?<Constant "B1009300">` + 162))
   \   000006CC   018E               MOVW    R17:R16, R29:R28
   \   000006CE   5E0C               SUBI    R16, 236
   \   000006D0   4F1F               SBCI    R17, 255
   \   000006D2   ........           CALL    strncpy
    671                            buffer_scs[10] = buffer_char[0];
   \   000006D6   8108               LD      R16, Y
   \   000006D8   8F0E               STD     Y+30, R16
    672                            buffer_scs[11] = buffer_char[1];
   \   000006DA   8109               LDD     R16, Y+1
   \   000006DC   8F0F               STD     Y+31, R16
    673                            send_frame_pp_ext_broad(buffer_scs,TRANS_DELAY);
   \   000006DE   E322               LDI     R18, 50
   \   000006E0   E030               LDI     R19, 0
   \   000006E2   018E               MOVW    R17:R16, R29:R28
   \   000006E4   5E0C               SUBI    R16, 236
   \   000006E6   4F1F               SBCI    R17, 255
   \   000006E8   ........           CALL    send_frame_pp_ext_broad
    674                          }
    675                        }
    676                        factory_default();
   \                     ??decode_IR_63:
   \   000006EC   ........           CALL    factory_default
    677                        system_reset();
   \   000006F0   ........           CALL    system_reset
   \   000006F4   C292               RJMP    ??decode_IR_16
    678          						break;
    679          	
    680          						case 0x38:			//reset room controler
    681          							send_frame_pp_ext_broad("D20001428C0008F0",TRANS_DELAY);
   \                     ??decode_IR_64:
   \   000006F6   E322               LDI     R18, 50
   \   000006F8   E030               LDI     R19, 0
   \   000006FA   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 179))
   \   000006FC   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 179))
   \   000006FE   CF61               RJMP    ??decode_IR_47
    682          						break;
    683          						default:break;
    684          					}	
    685          				}
    686          			break;
    687          			
    688          			case 9:
    689          				//IR_reception.info = 9;			//该数据帧共有0~9共10bytes
    690                  if(IR_reception.pipe[5] == 0x83)  //dimmer step
   \                     ??decode_IR_14:
   \   00000700   9100....           LDS     R16, (IR_reception + 5)
   \   00000704   3803               CPI     R16, 131
   \   00000706   F501               BRNE    ??decode_IR_65
    691                  {
    692                    if(available_command)
   \   00000708   2388               TST     R24
   \   0000070A   F031               BREQ    ??decode_IR_66
    693                    {
    694          							send_aux_frame(DIM_STEP,ns,current_scenario);
   \   0000070C   2D2C               MOV     R18, R12
   \   0000070E   2D16               MOV     R17, R6
   \   00000710   E003               LDI     R16, 3
   \   00000712   ........           CALL    send_aux_frame
    695          							timer_dimmer_initial(400);
   \   00000716   C009               RJMP    ??decode_IR_67
    696          							flags.dimmer_started = 1;
    697          							ns_400ms = ns;
    698                    }
    699                    else if(group_flag)
   \                     ??decode_IR_66:
   \   00000718   2399               TST     R25
   \   0000071A   F0B1               BREQ    ??decode_IR_65
    700                    {
    701                      if(product_information.conf_type != NONE_CONFED)
   \   0000071C   9100....           LDS     R16, product_information
   \   00000720   3003               CPI     R16, 3
   \   00000722   F091               BREQ    ??decode_IR_65
    702          						{
    703                        send_group_frame(DIM_STEP);
   \   00000724   E003               LDI     R16, 3
   \   00000726   ........           CALL    send_group_frame
    704          							timer_dimmer_initial(400);
   \                     ??decode_IR_67:
   \   0000072A   E900               LDI     R16, 144
   \   0000072C   E011               LDI     R17, 1
   \   0000072E   E020               LDI     R18, 0
   \   00000730   E030               LDI     R19, 0
   \   00000732   ........           CALL    timer_dimmer_initial
    705          							flags.dimmer_started = 1;
   \   00000736   ....               LDI     R30, LOW(flags)
   \   00000738   ....               LDI     R31, (flags) >> 8
   \   0000073A   8504               LDD     R16, Z+12
   \   0000073C   8515               LDD     R17, Z+13
   \   0000073E   6001               ORI     R16, 0x01
   \   00000740   8715               STD     Z+13, R17
   \   00000742   8704               STD     Z+12, R16
    706          							ns_400ms = ns;
   \   00000744   9260....           STS     ??ns_400ms, R6
    707          						}
    708                    }
    709                  }
    710          
    711                  if(IR_reception.pipe[5] == 0x84)  //go to level time
   \                     ??decode_IR_65:
   \   00000748   9100....           LDS     R16, (IR_reception + 5)
   \   0000074C   3804               CPI     R16, 132
   \   0000074E   F439               BRNE    ??decode_IR_68
    712                  {
    713                    if(available_command)
   \   00000750   2388               TST     R24
   \   00000752   F029               BREQ    ??decode_IR_68
    714                    {
    715                        send_aux_frame(GO_TO_LEVEL_TIME,ns,current_scenario);
   \   00000754   2D2C               MOV     R18, R12
   \   00000756   2D16               MOV     R17, R6
   \   00000758   E004               LDI     R16, 4
   \   0000075A   ........           CALL    send_aux_frame
    716                    }
    717                  }
    718          
    719          				if(IR_reception.pipe[5] == 0xB1)
   \                     ??decode_IR_68:
   \   0000075E   9100....           LDS     R16, (IR_reception + 5)
   \   00000762   3B01               CPI     R16, 177
   \   00000764   F009               BREQ    $+2+2
   \   00000766   C0B8               RJMP    ??decode_IR_69
    720          				{
    721          					if(IR_reception.pipe[6] == 0x04)			//Parameter read
   \   00000768   9100....           LDS     R16, (IR_reception + 6)
   \   0000076C   3004               CPI     R16, 4
   \   0000076E   F009               BREQ    $+2+2
   \   00000770   C0B3               RJMP    ??decode_IR_69
    722          					{
    723          						buffer_ir[0] = 0xAA;
   \   00000772   EA0A               LDI     R16, 170
   \   00000774   830F               STD     Y+7, R16
    724          						buffer_ir[1] = 0x80;
   \   00000776   E800               LDI     R16, 128
   \   00000778   8708               STD     Y+8, R16
    725          						buffer_ir[2] = 0xFF;
   \   0000077A   EF0F               LDI     R16, 255
   \   0000077C   8709               STD     Y+9, R16
    726          						buffer_ir[3] = 0xFF;
   \   0000077E   870A               STD     Y+10, R16
    727          						buffer_ir[4] = 0xF0;
   \   00000780   EF00               LDI     R16, 240
   \   00000782   870B               STD     Y+11, R16
    728          						buffer_ir[5] = 0xF1;
   \   00000784   EF01               LDI     R16, 241
   \   00000786   870C               STD     Y+12, R16
    729          						buffer_ir[6] = 0x05;
   \   00000788   E005               LDI     R16, 5
   \   0000078A   870D               STD     Y+13, R16
    730          						buffer_ir[7] = IR_reception.pipe[7];		//20090515
   \   0000078C   9100....           LDS     R16, (IR_reception + 7)
   \   00000790   870E               STD     Y+14, R16
    731          						buffer_ir[8] = IR_reception.pipe[8];		//20090515
   \   00000792   9100....           LDS     R16, (IR_reception + 8)
   \   00000796   870F               STD     Y+15, R16
    732          						buffer_ir[10] = 0x00;
   \   00000798   8A89               STD     Y+17, R8
    733          						buffer_ir[11] = 0x00;
   \   0000079A   8A8A               STD     Y+18, R8
    734          						buffer_ir[12] = 0x00;
   \   0000079C   8A8B               STD     Y+19, R8
    735          						par_num = (unsigned int)(IR_reception.pipe[8] << 8) + IR_reception.pipe[7];
   \   0000079E   9190....           LDS     R25, (IR_reception + 8)
   \   000007A2   E080               LDI     R24, 0
   \   000007A4   9100....           LDS     R16, (IR_reception + 7)
   \   000007A8   0F80               ADD     R24, R16
    736          						if(par_num <= PARAMETER_NUMBER)
   \   000007AA   3284               CPI     R24, 36
   \   000007AC   0598               CPC     R25, R8
   \   000007AE   F4D8               BRCC    ??decode_IR_70
    737          						{
    738          							if(par_num == 27)
   \   000007B0   318B               CPI     R24, 27
   \   000007B2   0598               CPC     R25, R8
   \   000007B4   9100....           LDS     R16, (IR_reception + 7)
   \   000007B8   870E               STD     Y+14, R16
   \   000007BA   9100....           LDS     R16, (IR_reception + 8)
   \   000007BE   870F               STD     Y+15, R16
   \   000007C0   F439               BRNE    ??decode_IR_71
    739          							{
    740          								buffer_ir[7] = IR_reception.pipe[7];
    741          								buffer_ir[8] = IR_reception.pipe[8];
    742          								buffer_ir[9] = KO_conf.DayLightLevLux[0];
   \   000007C2   9100....           LDS     R16, (KO_conf + 35)
   \   000007C6   8B08               STD     Y+16, R16
    743          								buffer_ir[10] = KO_conf.DayLightLevLux[1];
   \   000007C8   9100....           LDS     R16, (KO_conf + 36)
   \                     ??decode_IR_72:
   \   000007CC   8B09               STD     Y+17, R16
   \   000007CE   C07F               RJMP    ??decode_IR_73
    744          							}
    745          							else
    746          							{
    747          								buffer_ir[7] = IR_reception.pipe[7];
    748          								buffer_ir[8] = IR_reception.pipe[8];
    749          								//if(product_information.conf_type == NONE_CONFED)
    750          									//buffer_ir[9] = read_KO_none_confed(IR_reception.pipe[7]);
    751          								//else
    752          								buffer_ir[9] = read_KO(IR_reception.pipe[7]);
   \                     ??decode_IR_71:
   \   000007D0   9100....           LDS     R16, (IR_reception + 7)
   \   000007D4   ........           CALL    read_KO
   \   000007D8   8B08               STD     Y+16, R16
    753          								if(product_information.conf_type == NONE_CONFED)
   \   000007DA   9100....           LDS     R16, product_information
   \   000007DE   3003               CPI     R16, 3
   \   000007E0   F009               BREQ    $+2+2
   \   000007E2   C075               RJMP    ??decode_IR_73
   \   000007E4   C21A               RJMP    ??decode_IR_16
    754          								{
    755          									break;
    756          									//buffer_ir[10] = 0xFF;
    757          								}
    758          							}
    759          						}
    760          						else if(par_num == 256)
   \                     ??decode_IR_70:
   \   000007E6   3080               CPI     R24, 0
   \   000007E8   E001               LDI     R16, 1
   \   000007EA   0790               CPC     R25, R16
   \   000007EC   F449               BRNE    ??decode_IR_74
    761          						{
    762          							buffer_ir[7] = IR_reception.pipe[7];
   \   000007EE   9100....           LDS     R16, (IR_reception + 7)
   \   000007F2   870E               STD     Y+14, R16
    763          							buffer_ir[8] = IR_reception.pipe[8];
   \   000007F4   9100....           LDS     R16, (IR_reception + 8)
   \   000007F8   870F               STD     Y+15, R16
    764          							
    765          
    766          							#ifdef HARDWARE_PIR
    767          								buffer_ir[9] = 0x12; 			//need improve
   \   000007FA   E102               LDI     R16, 18
   \                     ??decode_IR_75:
   \   000007FC   8B08               STD     Y+16, R16
   \   000007FE   C067               RJMP    ??decode_IR_73
    768          							#endif
    769          
    770          							#ifdef HARDWARE_US
    771          								buffer_ir[9] = 0x22; 			//need improve
    772          							#endif
    773          								
    774          							#ifdef HARDWARE_PIR_US
    775          								buffer_ir[9] = 0x32; 			//need improve
    776          							#endif
    777          						}
    778          						else if(par_num == 257)		// low byte of ID
   \                     ??decode_IR_74:
   \   00000800   3081               CPI     R24, 1
   \   00000802   0790               CPC     R25, R16
   \   00000804   F511               BRNE    ??decode_IR_76
    779          						{
    780          							//buffer_ir[9] = 0x76;
    781          							//buffer_ir[10] = 0x98;
    782          							buffer_ir[7] = IR_reception.pipe[7];			//add 20090213
   \   00000806   9100....           LDS     R16, (IR_reception + 7)
   \   0000080A   870E               STD     Y+14, R16
    783          							buffer_ir[8] = IR_reception.pipe[8];			//add 20090213
   \   0000080C   9100....           LDS     R16, (IR_reception + 8)
   \   00000810   870F               STD     Y+15, R16
   \   00000812   ....               LDI     R20, LOW((ee_ID + 4))
   \   00000814   ....               LDI     R21, HIGH((ee_ID + 4))
   \   00000816   ........           CALL    __eeget8_16
   \   0000081A   8308               ST      Y, R16
    784          
    785          							buffer_char[0] = ee_ID[4];
    786          							buffer_char[1] = ee_ID[5];
   \   0000081C   ....               LDI     R20, LOW((ee_ID + 5))
   \   0000081E   ....               LDI     R21, HIGH((ee_ID + 5))
   \   00000820   ........           CALL    __eeget8_16
   \   00000824   8309               STD     Y+1, R16
    787          							buffer_ir[10] = StrToChar(buffer_char);
   \   00000826   018E               MOVW    R17:R16, R29:R28
   \   00000828   ........           CALL    StrToChar
   \   0000082C   8B09               STD     Y+17, R16
    788          							buffer_char[0] = ee_ID[6];
   \   0000082E   ....               LDI     R20, LOW((ee_ID + 6))
   \   00000830   ....               LDI     R21, HIGH((ee_ID + 6))
   \   00000832   ........           CALL    __eeget8_16
   \   00000836   8308               ST      Y, R16
    789          							buffer_char[1] = ee_ID[7];
   \   00000838   ....               LDI     R20, LOW((ee_ID + 7))
   \   0000083A   ....               LDI     R21, HIGH((ee_ID + 7))
   \   0000083C   ........           CALL    __eeget8_16
   \   00000840   8309               STD     Y+1, R16
    790          							buffer_ir[9] = StrToChar(buffer_char);
   \   00000842   018E               MOVW    R17:R16, R29:R28
   \   00000844   ........           CALL    StrToChar
   \   00000848   CFD9               RJMP    ??decode_IR_75
    791          						}
    792          						else if(par_num == 258)		// high byte of ID
   \                     ??decode_IR_76:
   \   0000084A   3082               CPI     R24, 2
   \   0000084C   0790               CPC     R25, R16
   \   0000084E   F4E1               BRNE    ??decode_IR_77
   \   00000850   ....               LDI     R20, LOW((ee_ID + 2))
   \   00000852   ....               LDI     R21, HIGH((ee_ID + 2))
   \   00000854   ........           CALL    __eeget8_16
   \   00000858   8308               ST      Y, R16
    793          						{
    794          							//buffer_ir[9] = 0x05;
    795          							//buffer_ir[10] = 0x00;
    796                        buffer_char[0] = ee_ID[2];
    797          							buffer_char[1] = ee_ID[3];
   \   0000085A   ....               LDI     R20, LOW((ee_ID + 3))
   \   0000085C   ....               LDI     R21, HIGH((ee_ID + 3))
   \   0000085E   ........           CALL    __eeget8_16
   \   00000862   8309               STD     Y+1, R16
    798          							buffer_ir[9] = StrToChar(buffer_char);
   \   00000864   018E               MOVW    R17:R16, R29:R28
   \   00000866   ........           CALL    StrToChar
   \   0000086A   8B08               STD     Y+16, R16
    799          							buffer_char[0] = ee_ID[0];
   \   0000086C   ....               LDI     R20, LOW(ee_ID)
   \   0000086E   ....               LDI     R21, (ee_ID) >> 8
   \   00000870   ........           CALL    __eeget8_16
   \   00000874   8308               ST      Y, R16
    800          							buffer_char[1] = ee_ID[1];
   \   00000876   ....               LDI     R20, LOW((ee_ID + 1))
   \   00000878   ....               LDI     R21, HIGH((ee_ID + 1))
   \   0000087A   ........           CALL    __eeget8_16
   \   0000087E   8309               STD     Y+1, R16
    801          							buffer_ir[10] = StrToChar(buffer_char);
   \   00000880   018E               MOVW    R17:R16, R29:R28
   \   00000882   ........           CALL    StrToChar
   \   00000886   CFA2               RJMP    ??decode_IR_72
    802          						}
    803                      else if(par_num == 259)
   \                     ??decode_IR_77:
   \   00000888   3083               CPI     R24, 3
   \   0000088A   0790               CPC     R25, R16
   \   0000088C   F461               BRNE    ??decode_IR_78
    804                      {
    805                        //version = ee_parameter.software_version[0];
    806                        buffer_ir[9] = ee_parameter.software_version[0] - 0x30;
   \   0000088E   ....               LDI     R20, LOW((ee_parameter + 6))
   \   00000890   ....               LDI     R21, HIGH((ee_parameter + 6))
   \   00000892   ........           CALL    __eeget8_16
   \   00000896   5300               SUBI    R16, 48
   \   00000898   8B08               STD     Y+16, R16
    807                        buffer_ir[10] = ee_parameter.software_version[1] - 0x30;
   \   0000089A   ....               LDI     R20, LOW((ee_parameter + 7))
   \   0000089C   ....               LDI     R21, HIGH((ee_parameter + 7))
   \   0000089E   ........           CALL    __eeget8_16
   \   000008A2   5300               SUBI    R16, 48
   \   000008A4   CF93               RJMP    ??decode_IR_72
    808                      }
    809                      else if(par_num == 260)
   \                     ??decode_IR_78:
   \   000008A6   3084               CPI     R24, 4
   \   000008A8   0790               CPC     R25, R16
   \   000008AA   F489               BRNE    ??decode_IR_73
    810                      {
    811          							//setting_diagnostic_ir(&buffer_ir[9]);
    812          							buffer_ir[9] = KO_conf.status[0];
   \   000008AC   9100....           LDS     R16, (KO_conf + 45)
   \   000008B0   8B08               STD     Y+16, R16
    813          							buffer_ir[10] = KO_conf.status[1];
   \   000008B2   9100....           LDS     R16, (KO_conf + 46)
   \   000008B6   8B09               STD     Y+17, R16
    814          							
    815          							ClrBit(KO_conf.status[0],Status_Derogation);
   \   000008B8   ....               LDI     R30, LOW(KO_conf)
   \   000008BA   ....               LDI     R31, (KO_conf) >> 8
   \   000008BC   A505               LDD     R16, Z+45
   \   000008BE   7E0F               ANDI    R16, 0xEF
   \   000008C0   A705               STD     Z+45, R16
    816          							ClrBit(KO_conf.status[0],Status_Regulation);
   \   000008C2   A505               LDD     R16, Z+45
   \   000008C4   7D0F               ANDI    R16, 0xDF
   \   000008C6   A705               STD     Z+45, R16
    817          							ClrBit(KO_conf.status[0],Status_Detection);	
   \   000008C8   A505               LDD     R16, Z+45
   \   000008CA   7F07               ANDI    R16, 0xF7
   \   000008CC   A705               STD     Z+45, R16
    818                      }
    819          						put_s1(buffer_ir,13);
   \                     ??decode_IR_73:
   \   000008CE   E02D               LDI     R18, 13
   \   000008D0   018E               MOVW    R17:R16, R29:R28
   \   000008D2   5F09               SUBI    R16, 249
   \   000008D4   4F1F               SBCI    R17, 255
   \   000008D6   ....               RCALL   put_s1
    820          					}
    821          				}
    822          
    823          				if(IR_reception.pipe[5] == 0xB0)
   \                     ??decode_IR_69:
   \   000008D8   9100....           LDS     R16, (IR_reception + 5)
   \   000008DC   3B00               CPI     R16, 176
   \   000008DE   F009               BREQ    $+2+2
   \   000008E0   C19C               RJMP    ??decode_IR_16
    824          				{
    825          					if(IR_reception.pipe[6] == 0x06)    //open learning
   \   000008E2   9100....           LDS     R16, (IR_reception + 6)
   \   000008E6   3006               CPI     R16, 6
   \   000008E8   F009               BREQ    $+2+2
   \   000008EA   C197               RJMP    ??decode_IR_16
    826          					{
    827          						//if(state.main_state == STATE_NORMAL)
    828          						//{
    829          							temp_variable.ID = current_id;
   \   000008EC   ....               LDI     R24, LOW(temp_variable)
   \   000008EE   ....               LDI     R25, (temp_variable) >> 8
   \   000008F0   810B               LDD     R16, Y+3
   \   000008F2   811C               LDD     R17, Y+4
   \   000008F4   812D               LDD     R18, Y+5
   \   000008F6   813E               LDD     R19, Y+6
   \   000008F8   01FC               MOVW    R31:R30, R25:R24
   \   000008FA   8707               STD     Z+15, R16
   \   000008FC   8B10               STD     Z+16, R17
   \   000008FE   8B21               STD     Z+17, R18
   \   00000900   8B32               STD     Z+18, R19
    830          							
    831          							if(is_scenario_full() == 0)
   \   00000902   ....               RCALL   is_scenario_full
   \   00000904   2300               TST     R16
   \   00000906   F009               BREQ    $+2+2
   \   00000908   C06D               RJMP    ??decode_IR_79
    832          							{
    833          								send_frame_pp_broad("B0009900",TRANS_DELAY);
   \   0000090A   E322               LDI     R18, 50
   \   0000090C   E030               LDI     R19, 0
   \   0000090E   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 196))
   \   00000910   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 196))
   \   00000912   ........           CALL    send_frame_pp_broad
    834                        	temp_variable.scenario_id = current_id;
   \   00000916   810B               LDD     R16, Y+3
   \   00000918   811C               LDD     R17, Y+4
   \   0000091A   812D               LDD     R18, Y+5
   \   0000091C   813E               LDD     R19, Y+6
   \   0000091E   01FC               MOVW    R31:R30, R25:R24
   \   00000920   8300               ST      Z, R16
   \   00000922   8311               STD     Z+1, R17
   \   00000924   8322               STD     Z+2, R18
   \   00000926   8333               STD     Z+3, R19
    835                        	temp_variable.scenario_ns = ns;
   \   00000928   9260....           STS     (temp_variable + 4), R6
    836          								strncpy(buffer_scs,"D20001428C000A05",17);
   \   0000092C   E141               LDI     R20, 17
   \   0000092E   E050               LDI     R21, 0
   \   00000930   ....               LDI     R18, LOW((`?<Constant "B1009300">` + 205))
   \   00000932   ....               LDI     R19, HIGH((`?<Constant "B1009300">` + 205))
   \   00000934   018E               MOVW    R17:R16, R29:R28
   \   00000936   5E0C               SUBI    R16, 236
   \   00000938   4F1F               SBCI    R17, 255
   \   0000093A   ........           CALL    strncpy
    837          
    838          								for(i=0;i<16;i++)
   \   0000093E   E0A0               LDI     R26, 0
   \   00000940   C001               RJMP    ??decode_IR_80
   \                     ??decode_IR_81:
   \   00000942   95A3               INC     R26
   \                     ??decode_IR_80:
   \   00000944   31A0               CPI     R26, 16
   \   00000946   F528               BRCC    ??decode_IR_82
    839          								{
    840          									if( (g_ir_reception[2] == ee_scenario[i].id[0]) && (g_ir_reception[3] == ee_scenario[i].id[1]) && (g_ir_reception[4] == ee_scenario[i].id[2]) )
   \   00000948   2F4A               MOV     R20, R26
   \   0000094A   E050               LDI     R21, 0
   \   0000094C   E007               LDI     R16, 7
   \   0000094E   E010               LDI     R17, 0
   \   00000950   ........           CALL    ?S_EC_MUL_L02
   \   00000954   ....               LDI     R18, LOW(ee_scenario)
   \   00000956   ....               LDI     R19, (ee_scenario) >> 8
   \   00000958   0F20               ADD     R18, R16
   \   0000095A   1F31               ADC     R19, R17
   \   0000095C   ....               LDI     R30, LOW(g_ir_reception)
   \   0000095E   ....               LDI     R31, (g_ir_reception) >> 8
   \   00000960   8112               LDD     R17, Z+2
   \   00000962   01A9               MOVW    R21:R20, R19:R18
   \   00000964   5F4E               SUBI    R20, 254
   \   00000966   4F5F               SBCI    R21, 255
   \   00000968   ........           CALL    __eeget8_16
   \   0000096C   1710               CP      R17, R16
   \   0000096E   F749               BRNE    ??decode_IR_81
   \   00000970   8113               LDD     R17, Z+3
   \   00000972   01A9               MOVW    R21:R20, R19:R18
   \   00000974   5F4D               SUBI    R20, 253
   \   00000976   4F5F               SBCI    R21, 255
   \   00000978   ........           CALL    __eeget8_16
   \   0000097C   1710               CP      R17, R16
   \   0000097E   F709               BRNE    ??decode_IR_81
   \   00000980   8114               LDD     R17, Z+4
   \   00000982   5F2C               SUBI    R18, 252
   \   00000984   4F3F               SBCI    R19, 255
   \   00000986   01A9               MOVW    R21:R20, R19:R18
   \   00000988   ........           CALL    __eeget8_16
   \   0000098C   1710               CP      R17, R16
   \   0000098E   F6C9               BRNE    ??decode_IR_81
    841          									{
    842          										old_ns_index = i;
   \   00000990   2E8A               MOV     R8, R26
    843          										break;
    844          									}
    845          								}
    846          							
    847          								if(i>=16)
   \                     ??decode_IR_82:
   \   00000992   31A0               CPI     R26, 16
   \   00000994   F028               BRCS    ??decode_IR_83
    848          								{
    849          									buffer_char[0] = '0';
   \   00000996   E300               LDI     R16, 48
   \   00000998   8308               ST      Y, R16
    850          									buffer_char[1] = '1';
   \   0000099A   E301               LDI     R16, 49
   \   0000099C   8309               STD     Y+1, R16
   \   0000099E   C00F               RJMP    ??decode_IR_84
    851          								}
    852          								else
    853          								{
    854          									CharToStr(ee_scenario[old_ns_index].ns_number,buffer_char);
   \                     ??decode_IR_83:
   \   000009A0   019E               MOVW    R19:R18, R29:R28
   \   000009A2   2D48               MOV     R20, R8
   \   000009A4   E050               LDI     R21, 0
   \   000009A6   E007               LDI     R16, 7
   \   000009A8   E010               LDI     R17, 0
   \   000009AA   ........           CALL    ?S_EC_MUL_L02
   \   000009AE   ....               LDI     R20, LOW(ee_scenario)
   \   000009B0   ....               LDI     R21, (ee_scenario) >> 8
   \   000009B2   0F40               ADD     R20, R16
   \   000009B4   1F51               ADC     R21, R17
   \   000009B6   ........           CALL    __eeget8_16
   \   000009BA   ........           CALL    CharToStr
    855          								}
    856          								buffer_scs[10] = buffer_char[0];
   \                     ??decode_IR_84:
   \   000009BE   8108               LD      R16, Y
   \   000009C0   8F0E               STD     Y+30, R16
    857          								buffer_scs[11] = buffer_char[1];
   \   000009C2   8109               LDD     R16, Y+1
   \   000009C4   8F0F               STD     Y+31, R16
    858          								send_frame_pp_ext_broad(buffer_scs,TRANS_DELAY);
   \   000009C6   E322               LDI     R18, 50
   \   000009C8   E030               LDI     R19, 0
   \   000009CA   018E               MOVW    R17:R16, R29:R28
   \   000009CC   5E0C               SUBI    R16, 236
   \   000009CE   4F1F               SBCI    R17, 255
   \   000009D0   ........           CALL    send_frame_pp_ext_broad
    859          
    860          								timer_flex_initial(3000);
   \   000009D4   EB08               LDI     R16, 184
   \   000009D6   E01B               LDI     R17, 11
   \                     ??decode_IR_85:
   \   000009D8   E020               LDI     R18, 0
   \   000009DA   E030               LDI     R19, 0
   \   000009DC   ........           CALL    timer_flex_initial
    861          								state.main_state = PNL_IR_SCENARIO_STEP2;
   \   000009E0   E103               LDI     R16, 19
   \   000009E2   CDA1               RJMP    ??decode_IR_39
    862          							}
    863          							else
    864          							{
    865          								led_blinking(120,0);
   \                     ??decode_IR_79:
   \   000009E4   E040               LDI     R20, 0
   \   000009E6   E050               LDI     R21, 0
   \   000009E8   E060               LDI     R22, 0
   \   000009EA   E070               LDI     R23, 0
   \   000009EC   E708               LDI     R16, 120
   \   000009EE   E010               LDI     R17, 0
   \   000009F0   E020               LDI     R18, 0
   \   000009F2   E030               LDI     R19, 0
   \   000009F4   ........           CALL    led_blinking
    866          								timer_flex_initial(5000);
   \   000009F8   E808               LDI     R16, 136
   \   000009FA   E113               LDI     R17, 19
   \   000009FC   CFED               RJMP    ??decode_IR_85
    867          								state.main_state = PNL_IR_SCENARIO_STEP2;
    868          							}
    869          						//}
    870          					}
    871          				}
    872          			break;
    873          
    874          			case 13:
    875          				//IR_reception.info = 13;			//该数据帧共有0~13共14bytes
    876          				if(IR_reception.pipe[5] == 0xF1) 		
   \                     ??decode_IR_15:
   \   000009FE   9100....           LDS     R16, (IR_reception + 5)
   \   00000A02   3F01               CPI     R16, 241
   \   00000A04   F009               BREQ    $+2+2
   \   00000A06   C109               RJMP    ??decode_IR_16
    877          				{
    878          					if(IR_reception.pipe[6] == 0x03) 			//Parameter set
   \   00000A08   9100....           LDS     R16, (IR_reception + 6)
   \   00000A0C   3003               CPI     R16, 3
   \   00000A0E   F009               BREQ    $+2+2
   \   00000A10   C104               RJMP    ??decode_IR_16
    879          					{
    880                      par_num = (unsigned int)(IR_reception.pipe[8] << 8) + IR_reception.pipe[7];
   \   00000A12   9190....           LDS     R25, (IR_reception + 8)
   \   00000A16   E080               LDI     R24, 0
   \   00000A18   9100....           LDS     R16, (IR_reception + 7)
   \   00000A1C   0F80               ADD     R24, R16
    881          						if(IR_reception.pipe[8] == 0)				//Low 256 par number
   \   00000A1E   9100....           LDS     R16, (IR_reception + 8)
   \   00000A22   2300               TST     R16
   \   00000A24   F009               BREQ    $+2+2
   \   00000A26   C0F9               RJMP    ??decode_IR_16
    882          						{
    883          							if(par_num <= PARAMETER_NUMBER && par_num != 0x05)
   \   00000A28   3284               CPI     R24, 36
   \   00000A2A   0598               CPC     R25, R8
   \   00000A2C   F008               BRCS    $+2+2
   \   00000A2E   C0F5               RJMP    ??decode_IR_16
   \   00000A30   3085               CPI     R24, 5
   \   00000A32   0598               CPC     R25, R8
   \   00000A34   F409               BRNE    $+2+2
   \   00000A36   C0F1               RJMP    ??decode_IR_16
    884          							{
    885                          //if(par_num == 26 && IR_reception.pipe[9] == 0)
    886                          //{
    887                          //  write_KO(IR_reception.pipe[7],0xFF);
    888                          //}
    889          								if(par_num == 27)
   \   00000A38   318B               CPI     R24, 27
   \   00000A3A   0598               CPC     R25, R8
   \   00000A3C   F009               BREQ    $+2+2
   \   00000A3E   C0A2               RJMP    ??decode_IR_86
    890          								{
    891          									//reyno 0602
    892          									unsigned int temp0;				// add by alan
    893          									volatile float f_temp;
    894          									temp0 = IR_reception.pipe[9];																// temp0 = lux/5
   \   00000A40   91A0....           LDS     R26, (IR_reception + 9)
   \   00000A44   E0B0               LDI     R27, 0
    895          									temp0 += (IR_reception.pipe[10]<<8);
   \   00000A46   9110....           LDS     R17, (IR_reception + 10)
   \   00000A4A   0DA8               ADD     R26, R8
   \   00000A4C   1FB1               ADC     R27, R17
    896          									if(Sensor_mode.power_on_flag)
   \   00000A4E   018D               MOVW    R17:R16, R27:R26
   \   00000A50   E020               LDI     R18, 0
   \   00000A52   E030               LDI     R19, 0
   \   00000A54   ........           CALL    ?UL2F_L04
   \   00000A58   E040               LDI     R20, 0
   \   00000A5A   E050               LDI     R21, 0
   \   00000A5C   E260               LDI     R22, 32
   \   00000A5E   E471               LDI     R23, 65
   \   00000A60   ........           CALL    ?F_MUL_L04
   \   00000A64   E040               LDI     R20, 0
   \   00000A66   E050               LDI     R21, 0
   \   00000A68   EA60               LDI     R22, 160
   \   00000A6A   E470               LDI     R23, 64
   \   00000A6C   ........           CALL    ?F_MUL_L04
   \   00000A70   0128               MOVW    R5:R4, R17:R16
   \   00000A72   0139               MOVW    R7:R6, R19:R18
   \   00000A74   E342               LDI     R20, 50
   \   00000A76   E050               LDI     R21, 0
   \   00000A78   018D               MOVW    R17:R16, R27:R26
   \   00000A7A   ........           CALL    ?S_EC_MUL_L02
   \   00000A7E   ....               LDI     R26, LOW(KO_conf)
   \   00000A80   ....               LDI     R27, (KO_conf) >> 8
   \   00000A82   ....               LDI     R30, LOW(Sensor_mode)
   \   00000A84   ....               LDI     R31, (Sensor_mode) >> 8
   \   00000A86   8127               LDD     R18, Z+7
   \   00000A88   9140....           LDS     R20, (DLL + 18)
   \   00000A8C   9150....           LDS     R21, (DLL + 19)
   \   00000A90   ........           CALL    ?US_DIVMOD_L02
   \   00000A94   FF25               SBRS    R18, 5
   \   00000A96   C03B               RJMP    ??decode_IR_87
    897          									{
    898          										KO_conf.DF = temp0*10*5/ DLL.calc_level;			//0526
   \   00000A98   9300....           STS     (KO_conf + 22), R16
    899          										f_temp = (float)temp0*10*5/ (float)DLL.calc_level;
   \   00000A9C   9100....           LDS     R16, (DLL + 18)
   \   00000AA0   9110....           LDS     R17, (DLL + 19)
   \   00000AA4   E020               LDI     R18, 0
   \   00000AA6   E030               LDI     R19, 0
   \   00000AA8   ........           CALL    ?UL2F_L04
   \   00000AAC   01A8               MOVW    R21:R20, R17:R16
   \   00000AAE   01B9               MOVW    R23:R22, R19:R18
   \   00000AB0   0182               MOVW    R17:R16, R5:R4
   \   00000AB2   0193               MOVW    R19:R18, R7:R6
   \   00000AB4   ........           CALL    ?F_DIV_L04
   \   00000AB8   830B               STD     Y+3, R16
   \   00000ABA   831C               STD     Y+4, R17
   \   00000ABC   832D               STD     Y+5, R18
   \   00000ABE   833E               STD     Y+6, R19
    900          										if((f_temp - KO_conf.DF >= 0.5) && (KO_conf.DF != 255))
   \   00000AC0   9100....           LDS     R16, (KO_conf + 22)
   \   00000AC4   E010               LDI     R17, 0
   \   00000AC6   E020               LDI     R18, 0
   \   00000AC8   E030               LDI     R19, 0
   \   00000ACA   ........           CALL    ?UL2F_L04
   \   00000ACE   01A8               MOVW    R21:R20, R17:R16
   \   00000AD0   01B9               MOVW    R23:R22, R19:R18
   \   00000AD2   810B               LDD     R16, Y+3
   \   00000AD4   811C               LDD     R17, Y+4
   \   00000AD6   812D               LDD     R18, Y+5
   \   00000AD8   813E               LDD     R19, Y+6
   \   00000ADA   ........           CALL    ?F_SUB_L04
   \   00000ADE   E040               LDI     R20, 0
   \   00000AE0   E050               LDI     R21, 0
   \   00000AE2   E060               LDI     R22, 0
   \   00000AE4   E37F               LDI     R23, 63
   \   00000AE6   ........           CALL    ?F_CMP_GE_L04
   \   00000AEA   F440               BRCC    ??decode_IR_88
   \   00000AEC   9100....           LDS     R16, (KO_conf + 22)
   \   00000AF0   3F0F               CPI     R16, 255
   \   00000AF2   F021               BREQ    ??decode_IR_88
    901          											KO_conf.DF++;
   \   00000AF4   01FD               MOVW    R31:R30, R27:R26
   \   00000AF6   8906               LDD     R16, Z+22
   \   00000AF8   9503               INC     R16
   \   00000AFA   8B06               STD     Z+22, R16
    902          										write_KO(22,KO_conf.DF); //reyno 0602
   \                     ??decode_IR_88:
   \   00000AFC   9110....           LDS     R17, (KO_conf + 22)
   \   00000B00   E106               LDI     R16, 22
   \   00000B02   ........           CALL    write_KO
    903          										write_ee_KO(22,KO_conf.DF);										// 0529 write_ee_KO(unsigned char index,unsigned char data);
   \   00000B06   9110....           LDS     R17, (KO_conf + 22)
   \   00000B0A   E106               LDI     R16, 22
   \   00000B0C   C045               RJMP    ??decode_IR_89
    904          									}
    905          									else
    906          									{
    907          										KO_conf.NF = temp0*10*5/ DLL.calc_level;			//0526
   \                     ??decode_IR_87:
   \   00000B0E   9300....           STS     (KO_conf + 24), R16
    908          										f_temp = (float)temp0*10*5/ (float)DLL.calc_level;
   \   00000B12   9100....           LDS     R16, (DLL + 18)
   \   00000B16   9110....           LDS     R17, (DLL + 19)
   \   00000B1A   E020               LDI     R18, 0
   \   00000B1C   E030               LDI     R19, 0
   \   00000B1E   ........           CALL    ?UL2F_L04
   \   00000B22   01A8               MOVW    R21:R20, R17:R16
   \   00000B24   01B9               MOVW    R23:R22, R19:R18
   \   00000B26   0182               MOVW    R17:R16, R5:R4
   \   00000B28   0193               MOVW    R19:R18, R7:R6
   \   00000B2A   ........           CALL    ?F_DIV_L04
   \   00000B2E   830B               STD     Y+3, R16
   \   00000B30   831C               STD     Y+4, R17
   \   00000B32   832D               STD     Y+5, R18
   \   00000B34   833E               STD     Y+6, R19
    909          										if((f_temp - KO_conf.NF >= 0.5) && (KO_conf.NF != 255))
   \   00000B36   9100....           LDS     R16, (KO_conf + 24)
   \   00000B3A   E010               LDI     R17, 0
   \   00000B3C   E020               LDI     R18, 0
   \   00000B3E   E030               LDI     R19, 0
   \   00000B40   ........           CALL    ?UL2F_L04
   \   00000B44   01A8               MOVW    R21:R20, R17:R16
   \   00000B46   01B9               MOVW    R23:R22, R19:R18
   \   00000B48   810B               LDD     R16, Y+3
   \   00000B4A   811C               LDD     R17, Y+4
   \   00000B4C   812D               LDD     R18, Y+5
   \   00000B4E   813E               LDD     R19, Y+6
   \   00000B50   ........           CALL    ?F_SUB_L04
   \   00000B54   E040               LDI     R20, 0
   \   00000B56   E050               LDI     R21, 0
   \   00000B58   E060               LDI     R22, 0
   \   00000B5A   E37F               LDI     R23, 63
   \   00000B5C   ........           CALL    ?F_CMP_GE_L04
   \   00000B60   F440               BRCC    ??decode_IR_90
   \   00000B62   9100....           LDS     R16, (KO_conf + 24)
   \   00000B66   3F0F               CPI     R16, 255
   \   00000B68   F021               BREQ    ??decode_IR_90
    910          											KO_conf.NF++;
   \   00000B6A   01FD               MOVW    R31:R30, R27:R26
   \   00000B6C   8D00               LDD     R16, Z+24
   \   00000B6E   9503               INC     R16
   \   00000B70   8F00               STD     Z+24, R16
    911          										write_KO(24,KO_conf.NF); //reyno 0602
   \                     ??decode_IR_90:
   \   00000B72   9110....           LDS     R17, (KO_conf + 24)
   \   00000B76   E108               LDI     R16, 24
   \   00000B78   ........           CALL    write_KO
    912          										write_ee_KO(24,KO_conf.NF);										// 0529 write_ee_KO(unsigned char index,unsigned char data);
   \   00000B7C   9110....           LDS     R17, (KO_conf + 24)
   \   00000B80   E108               LDI     R16, 24
   \   00000B82   C00A               RJMP    ??decode_IR_89
    913          									}
    914          								}
    915          								else
    916          								{
    917                          	//write_result = write_KO(IR_reception.pipe[7],IR_reception.pipe[9]);
    918                          	//if(write_result != PAR_OUT_OF_RANGE && write_result != PAR_NOT_IMPLEMENTED)
    919                          	//{
    920                            	//ee_KO_conf = KO_conf;
    921                          	//}
    922          									write_KO(IR_reception.pipe[7],IR_reception.pipe[9]);
   \                     ??decode_IR_86:
   \   00000B84   9110....           LDS     R17, (IR_reception + 9)
   \   00000B88   9100....           LDS     R16, (IR_reception + 7)
   \   00000B8C   ........           CALL    write_KO
    923          									write_ee_KO(IR_reception.pipe[7],IR_reception.pipe[9]);
   \   00000B90   9110....           LDS     R17, (IR_reception + 9)
   \   00000B94   9100....           LDS     R16, (IR_reception + 7)
   \                     ??decode_IR_89:
   \   00000B98   ........           CALL    write_ee_KO
    924          								}
    925          								if((par_num == 10)||(par_num == 11)||(par_num == 12))		// add by alan
   \   00000B9C   308A               CPI     R24, 10
   \   00000B9E   0598               CPC     R25, R8
   \   00000BA0   F031               BREQ    ??decode_IR_91
   \   00000BA2   308B               CPI     R24, 11
   \   00000BA4   0598               CPC     R25, R8
   \   00000BA6   F019               BREQ    ??decode_IR_91
   \   00000BA8   308C               CPI     R24, 12
   \   00000BAA   0598               CPC     R25, R8
   \   00000BAC   F539               BRNE    ??decode_IR_92
    926          								{
    927          										unsigned long int hour_count = KO_conf.Hours;
   \                     ??decode_IR_91:
   \   00000BAE   9040....           LDS     R4, (KO_conf + 10)
   \   00000BB2   2455               CLR     R5
   \   00000BB4   2466               CLR     R6
   \   00000BB6   2477               CLR     R7
    928          								  	Delay_Time_set = KO_conf.Seconds + KO_conf.Minutes*60 + hour_count*3600;	//calculate the time set by user
   \   00000BB8   9080....           LDS     R8, (KO_conf + 12)
   \   00000BBC   2499               CLR     R9
   \   00000BBE   9140....           LDS     R20, (KO_conf + 11)
   \   00000BC2   E050               LDI     R21, 0
   \   00000BC4   E30C               LDI     R16, 60
   \   00000BC6   E010               LDI     R17, 0
   \   00000BC8   ........           CALL    ?S_EC_MUL_L02
   \   00000BCC   0E80               ADD     R8, R16
   \   00000BCE   1E91               ADC     R9, R17
   \   00000BD0   2CA9               MOV     R10, R9
   \   00000BD2   0CAA               LSL     R10
   \   00000BD4   08AA               SBC     R10, R10
   \   00000BD6   2CBA               MOV     R11, R10
   \   00000BD8   E100               LDI     R16, 16
   \   00000BDA   E01E               LDI     R17, 14
   \   00000BDC   E020               LDI     R18, 0
   \   00000BDE   E030               LDI     R19, 0
   \   00000BE0   01A2               MOVW    R21:R20, R5:R4
   \   00000BE2   01B3               MOVW    R23:R22, R7:R6
   \   00000BE4   ........           CALL    ?L_EC_MUL_L03
   \   00000BE8   0E80               ADD     R8, R16
   \   00000BEA   1E91               ADC     R9, R17
   \   00000BEC   1EA2               ADC     R10, R18
   \   00000BEE   1EB3               ADC     R11, R19
   \   00000BF0   ....               LDI     R30, LOW(Delay_Time_set)
   \   00000BF2   ....               LDI     R31, (Delay_Time_set) >> 8
   \   00000BF4   8280               ST      Z, R8
   \   00000BF6   8291               STD     Z+1, R9
   \   00000BF8   82A2               STD     Z+2, R10
   \   00000BFA   82B3               STD     Z+3, R11
    929          								}
    930          								if(par_num == 23)	// alan when the type loop changed, the D.F should clear and re_set the D.F again
    931          								{
    932          										//KO_conf.DF = 0;
    933          										//DLL.DF = 0;		
    934          								}
    935          								if(par_num == 25)	// alan when the type loop changed, the D.F should clear and re_set the D.F again
   \                     ??decode_IR_92:
   \   00000BFC   3189               CPI     R24, 25
   \   00000BFE   E000               LDI     R16, 0
   \   00000C00   0790               CPC     R25, R16
   \   00000C02   F459               BRNE    ??decode_IR_16
    936          								{
    937          									set_point = KO_conf.DaylightSetp*5;
   \   00000C04   9140....           LDS     R20, (KO_conf + 25)
   \   00000C08   E050               LDI     R21, 0
   \   00000C0A   E005               LDI     R16, 5
   \   00000C0C   E010               LDI     R17, 0
   \   00000C0E   ........           CALL    ?S_EC_MUL_L02
   \   00000C12   9300....           STS     set_point, R16
   \   00000C16   9310....           STS     (set_point + 1), R17
    938          								}
    939          							}
    940          							else
    941          								ERROR;	
    942          						}
    943          					}
    944          				}
    945          				break;
    946          			default: break;			
    947          		}
    948          
    949          		//IR_reception.finished = 0;
    950          		//IR_reception.CRC_OK = 0;
    951          		//put_s1(buffer_test,13);
    952          		
    953          		if(flags.ir_buzzer == 0)
   \                     ??decode_IR_16:
   \   00000C1A   ....               LDI     R30, LOW(flags)
   \   00000C1C   ....               LDI     R31, (flags) >> 8
   \   00000C1E   8102               LDD     R16, Z+2
   \   00000C20   8113               LDD     R17, Z+3
   \   00000C22   2F01               MOV     R16, R17
   \   00000C24   FD04               SBRC    R16, 4
   \   00000C26   C004               RJMP    ??decode_IR_4
    954          			buzzer_ms(50);       //2009-3-20
   \   00000C28   E302               LDI     R16, 50
   \   00000C2A   E010               LDI     R17, 0
   \   00000C2C   ........           CALL    buzzer_ms
    955          		//send_frame_pp_ext("D200014281040000",1000);
    956          		//send_frame_pp_ext("B300120000000000",1000); //test SCS interface frame
    957          	}
    958          	
    959          	if(Time_delay.dimmer.time_out == 1 && flags.dimmer_started == 1)
   \                     ??decode_IR_4:
   \   00000C30   9100....           LDS     R16, (Time_delay + 267)
   \   00000C34   3001               CPI     R16, 1
   \   00000C36   F4A1               BRNE    ??decode_IR_93
   \   00000C38   ....               LDI     R30, LOW(flags)
   \   00000C3A   ....               LDI     R31, (flags) >> 8
   \   00000C3C   8504               LDD     R16, Z+12
   \   00000C3E   8515               LDD     R17, Z+13
   \   00000C40   FF00               SBRS    R16, 0
   \   00000C42   C00E               RJMP    ??decode_IR_93
    960          	{
    961          		Time_delay.dimmer.time_out = 0;
   \   00000C44   E000               LDI     R16, 0
   \   00000C46   9300....           STS     (Time_delay + 267), R16
    962          		flags.dimmer_started = 0;
   \   00000C4A   8504               LDD     R16, Z+12
   \   00000C4C   8515               LDD     R17, Z+13
   \   00000C4E   7F0E               ANDI    R16, 0xFE
   \   00000C50   8715               STD     Z+13, R17
   \   00000C52   8704               STD     Z+12, R16
    963          		send_aux_frame(DIMMER_STOP,ns_400ms,current_scenario);
   \   00000C54   2D2C               MOV     R18, R12
   \   00000C56   9110....           LDS     R17, ??ns_400ms
   \   00000C5A   E009               LDI     R16, 9
   \   00000C5C   ........           CALL    send_aux_frame
    964          	}
    965          }
   \                     ??decode_IR_93:
   \   00000C60   96E5               ADIW    R29:R28, 53
   \   00000C62   E0ED               LDI     R30, 13
   \   00000C64   ........           JMP     ?EPILOGUE_B13_L09

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??ns_400ms:
   \   00000000                      DS8 1
    966          

   \                                 In  segment CODE, align 2, keep-with-next
    967          void ir_buffer_clear(void)
   \                     ir_buffer_clear:
    968          {
   \   00000000   2F1B               MOV     R17, R27
   \   00000002   2F4A               MOV     R20, R26
    969          	unsigned char i;
    970          	if( IR_reception.CRC_OK == 1 )
   \   00000004   ....               LDI     R30, LOW(IR_reception)
   \   00000006   ....               LDI     R31, (IR_reception) >> 8
   \   00000008   8901               LDD     R16, Z+17
   \   0000000A   3001               CPI     R16, 1
   \   0000000C   F469               BRNE    ??ir_buffer_clear_0
    971          	{
    972          		for(i=0;i<13;i++)
   \   0000000E   E000               LDI     R16, 0
   \   00000010   C006               RJMP    ??ir_buffer_clear_1
    973          		{
    974          			IR_reception.pipe[i] = 0;
   \                     ??ir_buffer_clear_2:
   \   00000012   E020               LDI     R18, 0
   \   00000014   01DF               MOVW    R27:R26, R31:R30
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB2               ADC     R27, R18
   \   0000001A   932C               ST      X, R18
    975          		}
   \   0000001C   9503               INC     R16
   \                     ??ir_buffer_clear_1:
   \   0000001E   300D               CPI     R16, 13
   \   00000020   F3C0               BRCS    ??ir_buffer_clear_2
    976          		IR_reception.finished = 0;
   \   00000022   E000               LDI     R16, 0
   \   00000024   8B00               STD     Z+16, R16
    977          		IR_reception.CRC_OK = 0;
   \   00000026   8B01               STD     Z+17, R16
    978          	}
    979          }
   \                     ??ir_buffer_clear_0:
   \   00000028   2FA4               MOV     R26, R20
   \   0000002A   2FB1               MOV     R27, R17
   \   0000002C   9508               RET
    980          
    981          volatile unsigned char temp_ns;

   \                                 In  segment CODE, align 2, keep-with-next
    982          unsigned char ir_pnl(void)
   \                     ir_pnl:
    983          {
   \   00000000   9764               SBIW    R29:R28, 20
   \   00000002   9100....           LDS     R16, (g_asc_reception_buffer + 7)
    984          	unsigned char buffer_tx[17];
    985          	unsigned char buffer[3];
    986          	static unsigned char id_compare_flag;
    987          	unsigned char i;
    988          	
    989          	if(g_asc_reception_buffer[7] == 0x09)
    990          	{
    991          	}
    992          
    993          	if(state.main_state == PNL_IR_SCENARIO_STEP2)
   \   00000006   9100....           LDS     R16, (state + 2)
   \   0000000A   9110....           LDS     R17, (state + 3)
   \   0000000E   3103               CPI     R16, 19
   \   00000010   E920               LDI     R18, 144
   \   00000012   0712               CPC     R17, R18
   \   00000014   F009               BREQ    $+2+2
   \   00000016   C1D6               RJMP    ??ir_pnl_0
    994          	{
    995          		if(is_scenario_full() == 0)
   \   00000018   ....               RCALL   is_scenario_full
   \   0000001A   2300               TST     R16
   \   0000001C   9100....           LDS     R16, (Time_delay + 157)
   \   00000020   F009               BREQ    $+2+2
   \   00000022   C1BF               RJMP    ??ir_pnl_1
    996          		{
    997          			if( Time_delay.timer_flex.time_out == 1 )
   \   00000024   3001               CPI     R16, 1
   \   00000026   F009               BREQ    $+2+2
   \   00000028   C0C7               RJMP    ??ir_pnl_2
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   9300....           STS     (temp_ns + 1), R16
    998          			{
    999              	  //not assigned NS by RC
   1000          				
   1001          					id_compare_flag = 0;
   1002          					for(i=0;i<16;i++)
   \   00000030   E020               LDI     R18, 0
   \   00000032   C001               RJMP    ??ir_pnl_3
   \                     ??ir_pnl_4:
   \   00000034   9523               INC     R18
   \                     ??ir_pnl_3:
   \   00000036   3120               CPI     R18, 16
   \   00000038   F008               BRCS    $+2+2
   \   0000003A   C04F               RJMP    ??ir_pnl_5
   1003          					{
   1004          						if( (g_ir_reception[2] == ee_scenario[i].id[0]) && (g_ir_reception[3] == ee_scenario[i].id[1]) && (g_ir_reception[4] == ee_scenario[i].id[2]))
   \   0000003C   2F42               MOV     R20, R18
   \   0000003E   E050               LDI     R21, 0
   \   00000040   E007               LDI     R16, 7
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    ?S_EC_MUL_L02
   \   00000048   ....               LDI     R22, LOW(ee_scenario)
   \   0000004A   ....               LDI     R23, (ee_scenario) >> 8
   \   0000004C   0F60               ADD     R22, R16
   \   0000004E   1F71               ADC     R23, R17
   \   00000050   9110....           LDS     R17, (g_ir_reception + 2)
   \   00000054   01AB               MOVW    R21:R20, R23:R22
   \   00000056   5F4E               SUBI    R20, 254
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   ........           CALL    __eeget8_16
   \   0000005E   1710               CP      R17, R16
   \   00000060   F749               BRNE    ??ir_pnl_4
   \   00000062   9110....           LDS     R17, (g_ir_reception + 3)
   \   00000066   01AB               MOVW    R21:R20, R23:R22
   \   00000068   5F4D               SUBI    R20, 253
   \   0000006A   4F5F               SBCI    R21, 255
   \   0000006C   ........           CALL    __eeget8_16
   \   00000070   1710               CP      R17, R16
   \   00000072   F701               BRNE    ??ir_pnl_4
   \   00000074   9110....           LDS     R17, (g_ir_reception + 4)
   \   00000078   01AB               MOVW    R21:R20, R23:R22
   \   0000007A   5F4C               SUBI    R20, 252
   \   0000007C   4F5F               SBCI    R21, 255
   \   0000007E   ........           CALL    __eeget8_16
   \   00000082   1710               CP      R17, R16
   \   00000084   F6B9               BRNE    ??ir_pnl_4
   1005          						{
   1006          							ee_scenario[i].id[0] = g_ir_reception[2];
   \   00000086   9100....           LDS     R16, (g_ir_reception + 2)
   \   0000008A   01AB               MOVW    R21:R20, R23:R22
   \   0000008C   5F4E               SUBI    R20, 254
   \   0000008E   4F5F               SBCI    R21, 255
   \   00000090   ........           CALL    __eeput8_16
   1007          							ee_scenario[i].id[1] = g_ir_reception[3];
   \   00000094   9100....           LDS     R16, (g_ir_reception + 3)
   \   00000098   01AB               MOVW    R21:R20, R23:R22
   \   0000009A   5F4D               SUBI    R20, 253
   \   0000009C   4F5F               SBCI    R21, 255
   \   0000009E   ........           CALL    __eeput8_16
   1008          							ee_scenario[i].id[2] = g_ir_reception[4];
   \   000000A2   9100....           LDS     R16, (g_ir_reception + 4)
   \   000000A6   01AB               MOVW    R21:R20, R23:R22
   \   000000A8   5F4C               SUBI    R20, 252
   \   000000AA   4F5F               SBCI    R21, 255
   \   000000AC   ........           CALL    __eeput8_16
   1009          							//ee_scenario[i].ns_number = g_asc_reception_buffer[5];
   1010          							ee_scenario[i].key_number = g_ir_reception[4] & 0x0F;
   \   000000B0   9100....           LDS     R16, (g_ir_reception + 4)
   \   000000B4   700F               ANDI    R16, 0x0F
   \   000000B6   01AB               MOVW    R21:R20, R23:R22
   \   000000B8   5F4B               SUBI    R20, 251
   \   000000BA   4F5F               SBCI    R21, 255
   \   000000BC   ........           CALL    __eeput8_16
   1011          							ee_scenario[i].confed = 0x01;
   \   000000C0   E001               LDI     R16, 1
   \   000000C2   5F6A               SUBI    R22, 250
   \   000000C4   4F7F               SBCI    R23, 255
   \   000000C6   01AB               MOVW    R21:R20, R23:R22
   \   000000C8   ........           CALL    __eeput8_16
   1012          							id_compare_flag = 1;
   \   000000CC   9300....           STS     (temp_ns + 1), R16
   1013          							g_ns_index = i;
   \   000000D0   ....               LDI     R20, LOW(g_ns_index)
   \   000000D2   ....               LDI     R21, (g_ns_index) >> 8
   \   000000D4   2F02               MOV     R16, R18
   \   000000D6   ........           CALL    __eeput8_16
   1014          							break;
   1015          						}
   1016          					}
   1017              	
   1018          					if(id_compare_flag == 0)
   \                     ??ir_pnl_5:
   \   000000DA   9100....           LDS     R16, (temp_ns + 1)
   \   000000DE   2300               TST     R16
   \   000000E0   F009               BREQ    $+2+2
   \   000000E2   C05A               RJMP    ??ir_pnl_6
   1019          					{
   1020          						for(i=0;i<16;i++)
   \   000000E4   E020               LDI     R18, 0
   \   000000E6   C001               RJMP    ??ir_pnl_7
   \                     ??ir_pnl_8:
   \   000000E8   9523               INC     R18
   \                     ??ir_pnl_7:
   \   000000EA   3120               CPI     R18, 16
   \   000000EC   F4A0               BRCC    ??ir_pnl_9
   1021          						{
   1022          							if(ee_scenario[i].confed == 0)
   \   000000EE   ....               LDI     R22, LOW((ee_scenario + 6))
   \   000000F0   ....               LDI     R23, HIGH((ee_scenario + 6))
   \   000000F2   2F42               MOV     R20, R18
   \   000000F4   E050               LDI     R21, 0
   \   000000F6   E007               LDI     R16, 7
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   ........           CALL    ?S_EC_MUL_L02
   \   000000FE   0F60               ADD     R22, R16
   \   00000100   1F71               ADC     R23, R17
   \   00000102   01AB               MOVW    R21:R20, R23:R22
   \   00000104   ........           CALL    __eeget8_16
   \   00000108   2300               TST     R16
   \   0000010A   F771               BRNE    ??ir_pnl_8
   1023          							{
   1024          								g_ns_index = i;
   \   0000010C   ....               LDI     R20, LOW(g_ns_index)
   \   0000010E   ....               LDI     R21, (g_ns_index) >> 8
   \   00000110   2F02               MOV     R16, R18
   \   00000112   ........           CALL    __eeput8_16
   1025          								break;
   1026          							}
   1027          						}
   1028          					
   1029          						ee_scenario[g_ns_index].id[0] = g_ir_reception[2];
   \                     ??ir_pnl_9:
   \   00000116   ....               LDI     R20, LOW(g_ns_index)
   \   00000118   ....               LDI     R21, (g_ns_index) >> 8
   \   0000011A   ........           CALL    __eeget8_16
   \   0000011E   2F40               MOV     R20, R16
   \   00000120   E050               LDI     R21, 0
   \   00000122   E007               LDI     R16, 7
   \   00000124   E010               LDI     R17, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   ....               LDI     R18, LOW(ee_scenario)
   \   0000012C   ....               LDI     R19, (ee_scenario) >> 8
   \   0000012E   0F20               ADD     R18, R16
   \   00000130   1F31               ADC     R19, R17
   \   00000132   9100....           LDS     R16, (g_ir_reception + 2)
   \   00000136   01A9               MOVW    R21:R20, R19:R18
   \   00000138   5F4E               SUBI    R20, 254
   \   0000013A   4F5F               SBCI    R21, 255
   \   0000013C   ........           CALL    __eeput8_16
   1030          						ee_scenario[g_ns_index].id[1] = g_ir_reception[3];
   \   00000140   9100....           LDS     R16, (g_ir_reception + 3)
   \   00000144   01A9               MOVW    R21:R20, R19:R18
   \   00000146   5F4D               SUBI    R20, 253
   \   00000148   4F5F               SBCI    R21, 255
   \   0000014A   ........           CALL    __eeput8_16
   1031          						ee_scenario[g_ns_index].id[2] = g_ir_reception[4];
   \   0000014E   9100....           LDS     R16, (g_ir_reception + 4)
   \   00000152   01A9               MOVW    R21:R20, R19:R18
   \   00000154   5F4C               SUBI    R20, 252
   \   00000156   4F5F               SBCI    R21, 255
   \   00000158   ........           CALL    __eeput8_16
   1032          						//ee_scenario[g_ns_index].ns_number = g_asc_reception_buffer[5];
   1033          						ee_scenario[g_ns_index].key_number = g_ir_reception[4] & 0x0F;
   \   0000015C   9100....           LDS     R16, (g_ir_reception + 4)
   \   00000160   700F               ANDI    R16, 0x0F
   \   00000162   01A9               MOVW    R21:R20, R19:R18
   \   00000164   5F4B               SUBI    R20, 251
   \   00000166   4F5F               SBCI    R21, 255
   \   00000168   ........           CALL    __eeput8_16
   1034          						ee_scenario[g_ns_index].confed = 0x01;
   \   0000016C   E001               LDI     R16, 1
   \   0000016E   5F2A               SUBI    R18, 250
   \   00000170   4F3F               SBCI    R19, 255
   \   00000172   01A9               MOVW    R21:R20, R19:R18
   \   00000174   ........           CALL    __eeput8_16
   1035          						g_ns_index++;
   \   00000178   ....               LDI     R20, LOW(g_ns_index)
   \   0000017A   ....               LDI     R21, (g_ns_index) >> 8
   \   0000017C   ........           CALL    __eeget8_16
   \   00000180   9503               INC     R16
   \   00000182   ....               LDI     R20, LOW(g_ns_index)
   \   00000184   ....               LDI     R21, (g_ns_index) >> 8
   \   00000186   ........           CALL    __eeput8_16
   1036          						flags.scenario_last_assigned = 1;
   \   0000018A   ....               LDI     R30, LOW(flags)
   \   0000018C   ....               LDI     R31, (flags) >> 8
   \   0000018E   8102               LDD     R16, Z+2
   \   00000190   8113               LDD     R17, Z+3
   \   00000192   6810               ORI     R17, 0x80
   \   00000194   8313               STD     Z+3, R17
   \   00000196   8302               STD     Z+2, R16
   1037          					}
   1038              	
   1039              	  	led_blinking(250,250);
   \                     ??ir_pnl_6:
   \   00000198   EF4A               LDI     R20, 250
   \   0000019A   E050               LDI     R21, 0
   \   0000019C   E060               LDI     R22, 0
   \   0000019E   E070               LDI     R23, 0
   \   000001A0   EF0A               LDI     R16, 250
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   E020               LDI     R18, 0
   \   000001A6   E030               LDI     R19, 0
   \   000001A8   ........           CALL    led_blinking
   1040          					state.main_state = PNL_IR_SCENARIO_STEP3;
   \   000001AC   E105               LDI     R16, 21
   \   000001AE   E910               LDI     R17, 144
   \   000001B0   9300....           STS     (state + 2), R16
   \   000001B4   9310....           STS     (state + 3), R17
   1041          			}
   1042              	
   1043          			if( (g_asc_reception_buffer[6] == 0x0A) && (g_asc_reception_buffer[7] == 0x08))
   \                     ??ir_pnl_2:
   \   000001B8   9100....           LDS     R16, (g_asc_reception_buffer + 6)
   \   000001BC   300A               CPI     R16, 10
   \   000001BE   F4D1               BRNE    ??ir_pnl_10
   \   000001C0   9100....           LDS     R16, (g_asc_reception_buffer + 7)
   \   000001C4   3008               CPI     R16, 8
   \   000001C6   F4B1               BRNE    ??ir_pnl_10
   1044          			{
   1045          				led_blinking(120,120);
   \   000001C8   E748               LDI     R20, 120
   \   000001CA   E050               LDI     R21, 0
   \   000001CC   E060               LDI     R22, 0
   \   000001CE   E070               LDI     R23, 0
   \   000001D0   E708               LDI     R16, 120
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E020               LDI     R18, 0
   \   000001D6   E030               LDI     R19, 0
   \   000001D8   ........           CALL    led_blinking
   1046              	  timer_flex_initial(5000);
   \   000001DC   E808               LDI     R16, 136
   \   000001DE   E113               LDI     R17, 19
   \   000001E0   E020               LDI     R18, 0
   \   000001E2   E030               LDI     R19, 0
   \   000001E4   ........           CALL    timer_flex_initial
   1047          				state.main_state = PNL_IR_SCENARIO_STEP21;
   \   000001E8   E104               LDI     R16, 20
   \   000001EA   E910               LDI     R17, 144
   \   000001EC   9300....           STS     (state + 2), R16
   \   000001F0   9310....           STS     (state + 3), R17
   1048          			}
   1049              	
   1050          			if( (g_asc_reception_buffer[6] == 0x0A) && (g_asc_reception_buffer[7] == 0x06))
   \                     ??ir_pnl_10:
   \   000001F4   9100....           LDS     R16, (g_asc_reception_buffer + 6)
   \   000001F8   300A               CPI     R16, 10
   \   000001FA   F009               BREQ    $+2+2
   \   000001FC   C0E3               RJMP    ??ir_pnl_0
   \   000001FE   9100....           LDS     R16, (g_asc_reception_buffer + 7)
   \   00000202   3006               CPI     R16, 6
   \   00000204   F009               BREQ    $+2+2
   \   00000206   C0DE               RJMP    ??ir_pnl_0
   \   00000208   E000               LDI     R16, 0
   \   0000020A   9300....           STS     (temp_ns + 1), R16
   1051          			{
   1052          				id_compare_flag = 0;
   1053          				for(i=0;i<16;i++)
   \   0000020E   E020               LDI     R18, 0
   \   00000210   C001               RJMP    ??ir_pnl_11
   \                     ??ir_pnl_12:
   \   00000212   9523               INC     R18
   \                     ??ir_pnl_11:
   \   00000214   3120               CPI     R18, 16
   \   00000216   F008               BRCS    $+2+2
   \   00000218   C054               RJMP    ??ir_pnl_13
   1054          				{
   1055          					if( (g_ir_reception[2] == ee_scenario[i].id[0]) && (g_ir_reception[3] == ee_scenario[i].id[1]) && (g_ir_reception[4] == ee_scenario[i].id[2]))
   \   0000021A   2F42               MOV     R20, R18
   \   0000021C   E050               LDI     R21, 0
   \   0000021E   E007               LDI     R16, 7
   \   00000220   E010               LDI     R17, 0
   \   00000222   ........           CALL    ?S_EC_MUL_L02
   \   00000226   ....               LDI     R22, LOW(ee_scenario)
   \   00000228   ....               LDI     R23, (ee_scenario) >> 8
   \   0000022A   0F60               ADD     R22, R16
   \   0000022C   1F71               ADC     R23, R17
   \   0000022E   9110....           LDS     R17, (g_ir_reception + 2)
   \   00000232   01AB               MOVW    R21:R20, R23:R22
   \   00000234   5F4E               SUBI    R20, 254
   \   00000236   4F5F               SBCI    R21, 255
   \   00000238   ........           CALL    __eeget8_16
   \   0000023C   1710               CP      R17, R16
   \   0000023E   F749               BRNE    ??ir_pnl_12
   \   00000240   9110....           LDS     R17, (g_ir_reception + 3)
   \   00000244   01AB               MOVW    R21:R20, R23:R22
   \   00000246   5F4D               SUBI    R20, 253
   \   00000248   4F5F               SBCI    R21, 255
   \   0000024A   ........           CALL    __eeget8_16
   \   0000024E   1710               CP      R17, R16
   \   00000250   F701               BRNE    ??ir_pnl_12
   \   00000252   9110....           LDS     R17, (g_ir_reception + 4)
   \   00000256   01AB               MOVW    R21:R20, R23:R22
   \   00000258   5F4C               SUBI    R20, 252
   \   0000025A   4F5F               SBCI    R21, 255
   \   0000025C   ........           CALL    __eeget8_16
   \   00000260   1710               CP      R17, R16
   \   00000262   F6B9               BRNE    ??ir_pnl_12
   1056          					{
   1057          						ee_scenario[i].id[0] = g_ir_reception[2];
   \   00000264   9100....           LDS     R16, (g_ir_reception + 2)
   \   00000268   01AB               MOVW    R21:R20, R23:R22
   \   0000026A   5F4E               SUBI    R20, 254
   \   0000026C   4F5F               SBCI    R21, 255
   \   0000026E   ........           CALL    __eeput8_16
   1058          						ee_scenario[i].id[1] = g_ir_reception[3];
   \   00000272   9100....           LDS     R16, (g_ir_reception + 3)
   \   00000276   01AB               MOVW    R21:R20, R23:R22
   \   00000278   5F4D               SUBI    R20, 253
   \   0000027A   4F5F               SBCI    R21, 255
   \   0000027C   ........           CALL    __eeput8_16
   1059          						ee_scenario[i].id[2] = g_ir_reception[4];
   \   00000280   9100....           LDS     R16, (g_ir_reception + 4)
   \   00000284   01AB               MOVW    R21:R20, R23:R22
   \   00000286   5F4C               SUBI    R20, 252
   \   00000288   4F5F               SBCI    R21, 255
   \   0000028A   ........           CALL    __eeput8_16
   1060          						ee_scenario[i].ns_number = g_asc_reception_buffer[5];
   \   0000028E   9100....           LDS     R16, (g_asc_reception_buffer + 5)
   \   00000292   01AB               MOVW    R21:R20, R23:R22
   \   00000294   ........           CALL    __eeput8_16
   1061              	      ee_scenario[i].key_number = g_ir_reception[4] & 0x0F;
   \   00000298   9100....           LDS     R16, (g_ir_reception + 4)
   \   0000029C   700F               ANDI    R16, 0x0F
   \   0000029E   01AB               MOVW    R21:R20, R23:R22
   \   000002A0   5F4B               SUBI    R20, 251
   \   000002A2   4F5F               SBCI    R21, 255
   \   000002A4   ........           CALL    __eeput8_16
   1062          						ee_scenario[i].confed = 0x01;
   \   000002A8   E001               LDI     R16, 1
   \   000002AA   5F6A               SUBI    R22, 250
   \   000002AC   4F7F               SBCI    R23, 255
   \   000002AE   01AB               MOVW    R21:R20, R23:R22
   \   000002B0   ........           CALL    __eeput8_16
   1063          						id_compare_flag = 1;
   \   000002B4   9300....           STS     (temp_ns + 1), R16
   1064          						g_ns_index = i;
   \   000002B8   ....               LDI     R20, LOW(g_ns_index)
   \   000002BA   ....               LDI     R21, (g_ns_index) >> 8
   \   000002BC   2F02               MOV     R16, R18
   \   000002BE   ........           CALL    __eeput8_16
   1065          						break;
   1066          					}
   1067          				}
   1068              	
   1069          				if(id_compare_flag == 0)
   \                     ??ir_pnl_13:
   \   000002C2   9100....           LDS     R16, (temp_ns + 1)
   \   000002C6   2300               TST     R16
   \   000002C8   F009               BREQ    $+2+2
   \   000002CA   C05F               RJMP    ??ir_pnl_14
   1070          				{
   1071          					for(i=0;i<16;i++)
   \   000002CC   E020               LDI     R18, 0
   \   000002CE   C001               RJMP    ??ir_pnl_15
   \                     ??ir_pnl_16:
   \   000002D0   9523               INC     R18
   \                     ??ir_pnl_15:
   \   000002D2   3120               CPI     R18, 16
   \   000002D4   F4A0               BRCC    ??ir_pnl_17
   1072          					{
   1073          						if(ee_scenario[i].confed == 0)
   \   000002D6   ....               LDI     R22, LOW((ee_scenario + 6))
   \   000002D8   ....               LDI     R23, HIGH((ee_scenario + 6))
   \   000002DA   2F42               MOV     R20, R18
   \   000002DC   E050               LDI     R21, 0
   \   000002DE   E007               LDI     R16, 7
   \   000002E0   E010               LDI     R17, 0
   \   000002E2   ........           CALL    ?S_EC_MUL_L02
   \   000002E6   0F60               ADD     R22, R16
   \   000002E8   1F71               ADC     R23, R17
   \   000002EA   01AB               MOVW    R21:R20, R23:R22
   \   000002EC   ........           CALL    __eeget8_16
   \   000002F0   2300               TST     R16
   \   000002F2   F771               BRNE    ??ir_pnl_16
   1074          						{
   1075          							g_ns_index = i;
   \   000002F4   ....               LDI     R20, LOW(g_ns_index)
   \   000002F6   ....               LDI     R21, (g_ns_index) >> 8
   \   000002F8   2F02               MOV     R16, R18
   \   000002FA   ........           CALL    __eeput8_16
   1076          							break;
   1077          						}
   1078          					}
   1079          					
   1080          					ee_scenario[g_ns_index].id[0] = g_ir_reception[2];
   \                     ??ir_pnl_17:
   \   000002FE   ....               LDI     R20, LOW(g_ns_index)
   \   00000300   ....               LDI     R21, (g_ns_index) >> 8
   \   00000302   ........           CALL    __eeget8_16
   \   00000306   2F40               MOV     R20, R16
   \   00000308   E050               LDI     R21, 0
   \   0000030A   E007               LDI     R16, 7
   \   0000030C   E010               LDI     R17, 0
   \   0000030E   ........           CALL    ?S_EC_MUL_L02
   \   00000312   ....               LDI     R18, LOW(ee_scenario)
   \   00000314   ....               LDI     R19, (ee_scenario) >> 8
   \   00000316   0F20               ADD     R18, R16
   \   00000318   1F31               ADC     R19, R17
   \   0000031A   9100....           LDS     R16, (g_ir_reception + 2)
   \   0000031E   01A9               MOVW    R21:R20, R19:R18
   \   00000320   5F4E               SUBI    R20, 254
   \   00000322   4F5F               SBCI    R21, 255
   \   00000324   ........           CALL    __eeput8_16
   1081          					ee_scenario[g_ns_index].id[1] = g_ir_reception[3];
   \   00000328   9100....           LDS     R16, (g_ir_reception + 3)
   \   0000032C   01A9               MOVW    R21:R20, R19:R18
   \   0000032E   5F4D               SUBI    R20, 253
   \   00000330   4F5F               SBCI    R21, 255
   \   00000332   ........           CALL    __eeput8_16
   1082          					ee_scenario[g_ns_index].id[2] = g_ir_reception[4];
   \   00000336   9100....           LDS     R16, (g_ir_reception + 4)
   \   0000033A   01A9               MOVW    R21:R20, R19:R18
   \   0000033C   5F4C               SUBI    R20, 252
   \   0000033E   4F5F               SBCI    R21, 255
   \   00000340   ........           CALL    __eeput8_16
   1083          					ee_scenario[g_ns_index].ns_number = g_asc_reception_buffer[5];
   \   00000344   9100....           LDS     R16, (g_asc_reception_buffer + 5)
   \   00000348   01A9               MOVW    R21:R20, R19:R18
   \   0000034A   ........           CALL    __eeput8_16
   1084              	    ee_scenario[g_ns_index].key_number = g_ir_reception[4] & 0x0F;
   \   0000034E   9100....           LDS     R16, (g_ir_reception + 4)
   \   00000352   700F               ANDI    R16, 0x0F
   \   00000354   01A9               MOVW    R21:R20, R19:R18
   \   00000356   5F4B               SUBI    R20, 251
   \   00000358   4F5F               SBCI    R21, 255
   \   0000035A   ........           CALL    __eeput8_16
   1085          					ee_scenario[g_ns_index].confed = 0x01;
   \   0000035E   E001               LDI     R16, 1
   \   00000360   5F2A               SUBI    R18, 250
   \   00000362   4F3F               SBCI    R19, 255
   \   00000364   01A9               MOVW    R21:R20, R19:R18
   \   00000366   ........           CALL    __eeput8_16
   1086          					g_ns_index++;
   \   0000036A   ....               LDI     R20, LOW(g_ns_index)
   \   0000036C   ....               LDI     R21, (g_ns_index) >> 8
   \   0000036E   ........           CALL    __eeget8_16
   \   00000372   9503               INC     R16
   \   00000374   ....               LDI     R20, LOW(g_ns_index)
   \   00000376   ....               LDI     R21, (g_ns_index) >> 8
   \   00000378   ........           CALL    __eeput8_16
   1087          					flags.scenario_last_assigned = 1;
   \   0000037C   ....               LDI     R30, LOW(flags)
   \   0000037E   ....               LDI     R31, (flags) >> 8
   \   00000380   8102               LDD     R16, Z+2
   \   00000382   8113               LDD     R17, Z+3
   \   00000384   6810               ORI     R17, 0x80
   \   00000386   8313               STD     Z+3, R17
   \   00000388   8302               STD     Z+2, R16
   1088          				}
   1089              	
   1090              	  led_blinking(250,250);
   \                     ??ir_pnl_14:
   \   0000038A   EF4A               LDI     R20, 250
   \   0000038C   E050               LDI     R21, 0
   \   0000038E   E060               LDI     R22, 0
   \   00000390   E070               LDI     R23, 0
   \   00000392   EF0A               LDI     R16, 250
   \   00000394   E010               LDI     R17, 0
   \   00000396   E020               LDI     R18, 0
   \   00000398   E030               LDI     R19, 0
   \   0000039A   ........           CALL    led_blinking
   1091          				state.main_state = PNL_IR_SCENARIO_STEP3;
   \   0000039E   E105               LDI     R16, 21
   \   000003A0   C00C               RJMP    ??ir_pnl_18
   1092          			}
   1093          		}
   1094          		else
   1095          		{
   1096          			if( Time_delay.timer_flex.time_out == 1 )
   \                     ??ir_pnl_1:
   \   000003A2   3001               CPI     R16, 1
   \   000003A4   F479               BRNE    ??ir_pnl_0
   1097          			{
   1098          				led_blinking_disable(0);
   \   000003A6   E000               LDI     R16, 0
   \   000003A8   ........           CALL    led_blinking_disable
   1099          				timer_flex_initial(600000);
   \   000003AC   EC00               LDI     R16, 192
   \   000003AE   E217               LDI     R17, 39
   \   000003B0   E029               LDI     R18, 9
   \   000003B2   E030               LDI     R19, 0
   \   000003B4   ........           CALL    timer_flex_initial
   1100          				state.main_state = PNL_IR_SCENARIO_STEP4;
   \   000003B8   E106               LDI     R16, 22
   \                     ??ir_pnl_18:
   \   000003BA   E910               LDI     R17, 144
   \   000003BC   9300....           STS     (state + 2), R16
   \   000003C0   9310....           STS     (state + 3), R17
   1101          			}
   1102          		}
   1103          	}
   1104          
   1105          	if(state.main_state == PNL_IR_SCENARIO_STEP21)
   \                     ??ir_pnl_0:
   \   000003C4   9100....           LDS     R16, (state + 2)
   \   000003C8   9110....           LDS     R17, (state + 3)
   \   000003CC   3104               CPI     R16, 20
   \   000003CE   E920               LDI     R18, 144
   \   000003D0   0712               CPC     R17, R18
   \   000003D2   F469               BRNE    ??ir_pnl_19
   1106          	{
   1107          		if( Time_delay.timer_flex.time_out == 1 )
   \   000003D4   9100....           LDS     R16, (Time_delay + 157)
   \   000003D8   3001               CPI     R16, 1
   \   000003DA   F449               BRNE    ??ir_pnl_19
   1108          		{
   1109          			led_blinking_disable(0);
   \   000003DC   E000               LDI     R16, 0
   \   000003DE   ........           CALL    led_blinking_disable
   1110          			state.main_state = PNL_IR_SCENARIO_STEP7;
   \   000003E2   E107               LDI     R16, 23
   \   000003E4   E910               LDI     R17, 144
   \   000003E6   9300....           STS     (state + 2), R16
   \   000003EA   9310....           STS     (state + 3), R17
   1111          		}
   1112          	}
   1113          
   1114          	if(state.main_state == PNL_IR_SCENARIO_STEP3)
   \                     ??ir_pnl_19:
   \   000003EE   9100....           LDS     R16, (state + 2)
   \   000003F2   9110....           LDS     R17, (state + 3)
   \   000003F6   3105               CPI     R16, 21
   \   000003F8   E920               LDI     R18, 144
   \   000003FA   0712               CPC     R17, R18
   \   000003FC   F009               BREQ    $+2+2
   \   000003FE   C063               RJMP    ??ir_pnl_20
   1115          	{
   1116          		strncpy(buffer_tx,"B1009300",9);
   \   00000400   E049               LDI     R20, 9
   \   00000402   E050               LDI     R21, 0
   \   00000404   ....               LDI     R18, LOW(`?<Constant "B1009300">`)
   \   00000406   ....               LDI     R19, (`?<Constant "B1009300">`) >> 8
   \   00000408   018E               MOVW    R17:R16, R29:R28
   \   0000040A   5F0D               SUBI    R16, 253
   \   0000040C   4F1F               SBCI    R17, 255
   \   0000040E   ........           CALL    strncpy
   \   00000412   9100....           LDS     R16, (temp_ns + 1)
   \   00000416   2300               TST     R16
   \   00000418   F4A1               BRNE    ??ir_pnl_21
   1117          		
   1118          		if(id_compare_flag == 0)
   1119          		{
   1120          			g_ns_index--;
   \   0000041A   ....               LDI     R20, LOW(g_ns_index)
   \   0000041C   ....               LDI     R21, (g_ns_index) >> 8
   \   0000041E   ........           CALL    __eeget8_16
   \   00000422   950A               DEC     R16
   \   00000424   ....               LDI     R20, LOW(g_ns_index)
   \   00000426   ....               LDI     R21, (g_ns_index) >> 8
   \   00000428   ........           CALL    __eeput8_16
   1121          			if(g_ns_index == 0xFF)
   \   0000042C   ....               LDI     R20, LOW(g_ns_index)
   \   0000042E   ....               LDI     R21, (g_ns_index) >> 8
   \   00000430   ........           CALL    __eeget8_16
   \   00000434   3F0F               CPI     R16, 255
   \   00000436   F429               BRNE    ??ir_pnl_21
   1122          				g_ns_index = 15;
   \   00000438   E00F               LDI     R16, 15
   \   0000043A   ....               LDI     R20, LOW(g_ns_index)
   \   0000043C   ....               LDI     R21, (g_ns_index) >> 8
   \   0000043E   ........           CALL    __eeput8_16
   1123          		}
   1124          		
   1125              temp_ns = ee_scenario[g_ns_index].ns_number;
   \                     ??ir_pnl_21:
   \   00000442   ....               LDI     R20, LOW(g_ns_index)
   \   00000444   ....               LDI     R21, (g_ns_index) >> 8
   \   00000446   ........           CALL    __eeget8_16
   \   0000044A   2F40               MOV     R20, R16
   \   0000044C   E050               LDI     R21, 0
   \   0000044E   E007               LDI     R16, 7
   \   00000450   E010               LDI     R17, 0
   \   00000452   ........           CALL    ?S_EC_MUL_L02
   \   00000456   ....               LDI     R20, LOW(ee_scenario)
   \   00000458   ....               LDI     R21, (ee_scenario) >> 8
   \   0000045A   0F40               ADD     R20, R16
   \   0000045C   1F51               ADC     R21, R17
   \   0000045E   ........           CALL    __eeget8_16
   \   00000462   9300....           STS     temp_ns, R16
   1126          		CharToStr(ee_scenario[g_ns_index].ns_number,buffer);
   \   00000466   019E               MOVW    R19:R18, R29:R28
   \   00000468   ........           CALL    CharToStr
   1127          
   1128          		if(id_compare_flag == 0)
   \   0000046C   9100....           LDS     R16, (temp_ns + 1)
   \   00000470   2300               TST     R16
   \   00000472   F449               BRNE    ??ir_pnl_22
   1129          		{
   1130          			g_ns_index++;
   \   00000474   ....               LDI     R20, LOW(g_ns_index)
   \   00000476   ....               LDI     R21, (g_ns_index) >> 8
   \   00000478   ........           CALL    __eeget8_16
   \   0000047C   9503               INC     R16
   \   0000047E   ....               LDI     R20, LOW(g_ns_index)
   \   00000480   ....               LDI     R21, (g_ns_index) >> 8
   \   00000482   ........           CALL    __eeput8_16
   1131          			//if(g_ns_index >= 16)
   1132          				//g_ns_index = 0;
   1133          		}
   1134          
   1135          		buffer_tx[2] = buffer[0];
   \                     ??ir_pnl_22:
   \   00000486   8108               LD      R16, Y
   \   00000488   830D               STD     Y+5, R16
   1136          		buffer_tx[3] = buffer[1];
   \   0000048A   8109               LDD     R16, Y+1
   \   0000048C   830E               STD     Y+6, R16
   1137          		send_frame_pp_broad(buffer_tx,TRANS_DELAY);
   \   0000048E   E322               LDI     R18, 50
   \   00000490   E030               LDI     R19, 0
   \   00000492   018E               MOVW    R17:R16, R29:R28
   \   00000494   5F0D               SUBI    R16, 253
   \   00000496   4F1F               SBCI    R17, 255
   \   00000498   ........           CALL    send_frame_pp_broad
   1138          
   1139          		buffer_tx[5] = '0';
   \   0000049C   E300               LDI     R16, 48
   \   0000049E   8708               STD     Y+8, R16
   1140          		send_frame_pp_broad(buffer_tx,TRANS_DELAY);
   \   000004A0   E322               LDI     R18, 50
   \   000004A2   E030               LDI     R19, 0
   \   000004A4   018E               MOVW    R17:R16, R29:R28
   \   000004A6   5F0D               SUBI    R16, 253
   \   000004A8   4F1F               SBCI    R17, 255
   \   000004AA   ........           CALL    send_frame_pp_broad
   1141          
   1142          		timer_flex_initial(600000);
   \   000004AE   EC00               LDI     R16, 192
   \   000004B0   E217               LDI     R17, 39
   \   000004B2   E029               LDI     R18, 9
   \   000004B4   E030               LDI     R19, 0
   \   000004B6   ........           CALL    timer_flex_initial
   1143          
   1144          		state.main_state = PNL_IR_SCENARIO_STEP4;
   \   000004BA   E106               LDI     R16, 22
   \   000004BC   E910               LDI     R17, 144
   \   000004BE   9300....           STS     (state + 2), R16
   \   000004C2   9310....           STS     (state + 3), R17
   1145          	}
   1146          
   1147          	if(state.main_state == PNL_IR_SCENARIO_STEP4)
   \                     ??ir_pnl_20:
   \   000004C6   9100....           LDS     R16, (state + 2)
   \   000004CA   9110....           LDS     R17, (state + 3)
   \   000004CE   3106               CPI     R16, 22
   \   000004D0   E920               LDI     R18, 144
   \   000004D2   0712               CPC     R17, R18
   \   000004D4   F449               BRNE    ??ir_pnl_23
   1148          	{
   1149          		if( Time_delay.timer_flex.time_out == 1 )
   \   000004D6   9100....           LDS     R16, (Time_delay + 157)
   \   000004DA   3001               CPI     R16, 1
   \   000004DC   F429               BRNE    ??ir_pnl_23
   1150          		{
   1151          			state.main_state = PNL_IR_SCENARIO_STEP7;
   \   000004DE   E107               LDI     R16, 23
   \   000004E0   9300....           STS     (state + 2), R16
   \   000004E4   9320....           STS     (state + 3), R18
   1152          		}
   1153          	}
   1154          
   1155          	if(state.main_state == PNL_IR_SCENARIO_STEP7)
   \                     ??ir_pnl_23:
   \   000004E8   9100....           LDS     R16, (state + 2)
   \   000004EC   9110....           LDS     R17, (state + 3)
   \   000004F0   3107               CPI     R16, 23
   \   000004F2   0712               CPC     R17, R18
   \   000004F4   F009               BREQ    $+2+2
   \   000004F6   C06B               RJMP    ??ir_pnl_24
   1156          	{
   1157          		if(is_scenario_full()==0 || flags.scenario_last_assigned)
   \   000004F8   ....               RCALL   is_scenario_full
   \   000004FA   2300               TST     R16
   \   000004FC   F039               BREQ    ??ir_pnl_25
   \   000004FE   ....               LDI     R30, LOW(flags)
   \   00000500   ....               LDI     R31, (flags) >> 8
   \   00000502   8102               LDD     R16, Z+2
   \   00000504   8113               LDD     R17, Z+3
   \   00000506   2F01               MOV     R16, R17
   \   00000508   FF07               SBRS    R16, 7
   \   0000050A   C059               RJMP    ??ir_pnl_26
   1158          		{
   1159          			flags.scenario_last_assigned = 0;
   \                     ??ir_pnl_25:
   \   0000050C   ....               LDI     R30, LOW(flags)
   \   0000050E   ....               LDI     R31, (flags) >> 8
   \   00000510   8102               LDD     R16, Z+2
   \   00000512   8113               LDD     R17, Z+3
   \   00000514   771F               ANDI    R17, 0x7F
   \   00000516   8313               STD     Z+3, R17
   \   00000518   8302               STD     Z+2, R16
   1160          			strncpy(buffer_tx,"B1009100",9);
   \   0000051A   E049               LDI     R20, 9
   \   0000051C   E050               LDI     R21, 0
   \   0000051E   ....               LDI     R18, LOW((`?<Constant "B1009300">` + 222))
   \   00000520   ....               LDI     R19, HIGH((`?<Constant "B1009300">` + 222))
   \   00000522   018E               MOVW    R17:R16, R29:R28
   \   00000524   5F0D               SUBI    R16, 253
   \   00000526   4F1F               SBCI    R17, 255
   \   00000528   ........           CALL    strncpy
   \   0000052C   9100....           LDS     R16, (temp_ns + 1)
   \   00000530   2300               TST     R16
   \   00000532   F4A1               BRNE    ??ir_pnl_27
   1161          		
   1162          			if(id_compare_flag == 0)
   1163          			{
   1164          				g_ns_index--;
   \   00000534   ....               LDI     R20, LOW(g_ns_index)
   \   00000536   ....               LDI     R21, (g_ns_index) >> 8
   \   00000538   ........           CALL    __eeget8_16
   \   0000053C   950A               DEC     R16
   \   0000053E   ....               LDI     R20, LOW(g_ns_index)
   \   00000540   ....               LDI     R21, (g_ns_index) >> 8
   \   00000542   ........           CALL    __eeput8_16
   1165          				if(g_ns_index == 0xFF)
   \   00000546   ....               LDI     R20, LOW(g_ns_index)
   \   00000548   ....               LDI     R21, (g_ns_index) >> 8
   \   0000054A   ........           CALL    __eeget8_16
   \   0000054E   3F0F               CPI     R16, 255
   \   00000550   F429               BRNE    ??ir_pnl_27
   1166          					g_ns_index = 15;
   \   00000552   E00F               LDI     R16, 15
   \   00000554   ....               LDI     R20, LOW(g_ns_index)
   \   00000556   ....               LDI     R21, (g_ns_index) >> 8
   \   00000558   ........           CALL    __eeput8_16
   1167          			}
   1168          
   1169          			CharToStr(ee_scenario[g_ns_index].ns_number,buffer);
   \                     ??ir_pnl_27:
   \   0000055C   019E               MOVW    R19:R18, R29:R28
   \   0000055E   ....               LDI     R20, LOW(g_ns_index)
   \   00000560   ....               LDI     R21, (g_ns_index) >> 8
   \   00000562   ........           CALL    __eeget8_16
   \   00000566   2F40               MOV     R20, R16
   \   00000568   E050               LDI     R21, 0
   \   0000056A   E007               LDI     R16, 7
   \   0000056C   E010               LDI     R17, 0
   \   0000056E   ........           CALL    ?S_EC_MUL_L02
   \   00000572   ....               LDI     R20, LOW(ee_scenario)
   \   00000574   ....               LDI     R21, (ee_scenario) >> 8
   \   00000576   0F40               ADD     R20, R16
   \   00000578   1F51               ADC     R21, R17
   \   0000057A   ........           CALL    __eeget8_16
   \   0000057E   ........           CALL    CharToStr
   1170          		
   1171          			if(id_compare_flag == 0)
   \   00000582   9100....           LDS     R16, (temp_ns + 1)
   \   00000586   2300               TST     R16
   \   00000588   F449               BRNE    ??ir_pnl_28
   1172          			{
   1173          				g_ns_index++;
   \   0000058A   ....               LDI     R20, LOW(g_ns_index)
   \   0000058C   ....               LDI     R21, (g_ns_index) >> 8
   \   0000058E   ........           CALL    __eeget8_16
   \   00000592   9503               INC     R16
   \   00000594   ....               LDI     R20, LOW(g_ns_index)
   \   00000596   ....               LDI     R21, (g_ns_index) >> 8
   \   00000598   ........           CALL    __eeput8_16
   1174          				//if(g_ns_index >= 16)
   1175          					//g_ns_index = 0;
   1176          			}
   1177          
   1178          			buffer_tx[2] = buffer[0];
   \                     ??ir_pnl_28:
   \   0000059C   8108               LD      R16, Y
   \   0000059E   830D               STD     Y+5, R16
   1179          			buffer_tx[3] = buffer[1];
   \   000005A0   8109               LDD     R16, Y+1
   \   000005A2   830E               STD     Y+6, R16
   1180          			send_frame_pp_broad(buffer_tx,TRANS_DELAY);
   \   000005A4   E322               LDI     R18, 50
   \   000005A6   E030               LDI     R19, 0
   \   000005A8   018E               MOVW    R17:R16, R29:R28
   \   000005AA   5F0D               SUBI    R16, 253
   \   000005AC   4F1F               SBCI    R17, 255
   \   000005AE   ........           CALL    send_frame_pp_broad
   1181          			send_frame_pp_broad("B000990F",TRANS_DELAY);
   \   000005B2   E322               LDI     R18, 50
   \   000005B4   E030               LDI     R19, 0
   \   000005B6   ....               LDI     R16, LOW((`?<Constant "B1009300">` + 231))
   \   000005B8   ....               LDI     R17, HIGH((`?<Constant "B1009300">` + 231))
   \   000005BA   ........           CALL    send_frame_pp_broad
   1182          			led_blinking_disable(0);
   1183          			state.main_state = STATE_NORMAL;
   1184          		}
   1185          		else
   1186          		{
   1187          			//send_frame_pp_broad("B000990F",TRANS_DELAY);
   1188          			led_blinking_disable(0);
   \                     ??ir_pnl_26:
   \   000005BE   E000               LDI     R16, 0
   \   000005C0   ........           CALL    led_blinking_disable
   1189          			state.main_state = STATE_NORMAL;
   \   000005C4   E000               LDI     R16, 0
   \   000005C6   9300....           STS     (state + 2), R16
   \   000005CA   9300....           STS     (state + 3), R16
   1190          		}
   1191          	}
   1192          
   1193          	if(state.main_state == PNL_IR_SCENARIO_STEP8)
   \                     ??ir_pnl_24:
   \   000005CE   9100....           LDS     R16, (state + 2)
   \   000005D2   9110....           LDS     R17, (state + 3)
   \   000005D6   3108               CPI     R16, 24
   \   000005D8   E920               LDI     R18, 144
   \   000005DA   0712               CPC     R17, R18
   \   000005DC   F461               BRNE    ??ir_pnl_29
   1194          	{
   1195          		if( Time_delay.timer_flex.time_out == 1 )
   \   000005DE   9100....           LDS     R16, (Time_delay + 157)
   \   000005E2   3001               CPI     R16, 1
   \   000005E4   F441               BRNE    ??ir_pnl_29
   1196          		{
   1197          			led_blinking_disable(0);
   \   000005E6   E000               LDI     R16, 0
   \   000005E8   ........           CALL    led_blinking_disable
   1198          			state.main_state = STATE_NORMAL;
   \   000005EC   E000               LDI     R16, 0
   \   000005EE   9300....           STS     (state + 2), R16
   \   000005F2   9300....           STS     (state + 3), R16
   1199          		}
   1200          	}
   1201          	
   1202          	return 0;
   \                     ??ir_pnl_29:
   \   000005F6   E000               LDI     R16, 0
   \   000005F8   9664               ADIW    R29:R28, 20
   \   000005FA   9508               RET
   1203          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     temp_ns:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   1204          

   \                                 In  segment CODE, align 2, keep-with-next
   1205          void setting_diagnostic_ir(unsigned char *data)
   \                     setting_diagnostic_ir:
   1206          {
   1207          	if( flags.dimmer_mode == 0)
   \   00000000   ....               LDI     R30, LOW(flags)
   \   00000002   ....               LDI     R31, (flags) >> 8
   \   00000004   8120               LD      R18, Z
   \   00000006   8131               LDD     R19, Z+1
   \   00000008   2F23               MOV     R18, R19
   \   0000000A   FD21               SBRC    R18, 1
   \   0000000C   C008               RJMP    ??setting_diagnostic_ir_0
   1208          	{
   1209          		if(flags.load_status == 0)
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   FD27               SBRC    R18, 7
   \   00000014   C002               RJMP    ??setting_diagnostic_ir_1
   1210          			*data = 0x00;
   \   00000016   E020               LDI     R18, 0
   \   00000018   C004               RJMP    ??setting_diagnostic_ir_2
   1211          		else
   1212          			*data = 0x64;
   \                     ??setting_diagnostic_ir_1:
   \   0000001A   E624               LDI     R18, 100
   \   0000001C   C002               RJMP    ??setting_diagnostic_ir_2
   1213          	}
   1214          	else
   1215          	{
   1216          		*data = parameters.dimmer_value;
   \                     ??setting_diagnostic_ir_0:
   \   0000001E   9120....           LDS     R18, parameters
   \                     ??setting_diagnostic_ir_2:
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8320               ST      Z, R18
   1217          	}
   1218          
   1219          	if(flags.detection)
   \   00000026   ....               LDI     R30, LOW(flags)
   \   00000028   ....               LDI     R31, (flags) >> 8
   \   0000002A   8120               LD      R18, Z
   \   0000002C   8131               LDD     R19, Z+1
   \   0000002E   2F23               MOV     R18, R19
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   FF22               SBRS    R18, 2
   \   00000034   C003               RJMP    ??setting_diagnostic_ir_3
   1220          		SetBit(*(data+1),3);
   \   00000036   8121               LDD     R18, Z+1
   \   00000038   6028               ORI     R18, 0x08
   \   0000003A   C002               RJMP    ??setting_diagnostic_ir_4
   1221          	else
   1222          		ClrBit(*(data+1),3);
   \                     ??setting_diagnostic_ir_3:
   \   0000003C   8121               LDD     R18, Z+1
   \   0000003E   7F27               ANDI    R18, 0xF7
   \                     ??setting_diagnostic_ir_4:
   \   00000040   8321               STD     Z+1, R18
   1223          
   1224          	if(flags.time_delay_during)
   \   00000042   ....               LDI     R30, LOW(flags)
   \   00000044   ....               LDI     R31, (flags) >> 8
   \   00000046   8120               LD      R18, Z
   \   00000048   8131               LDD     R19, Z+1
   \   0000004A   2F23               MOV     R18, R19
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   FF23               SBRS    R18, 3
   \   00000050   C003               RJMP    ??setting_diagnostic_ir_5
   1225          		SetBit(*(data+1),2);
   \   00000052   8121               LDD     R18, Z+1
   \   00000054   6024               ORI     R18, 0x04
   \   00000056   C002               RJMP    ??setting_diagnostic_ir_6
   1226          	else
   1227          		ClrBit(*(data+1),2);
   \                     ??setting_diagnostic_ir_5:
   \   00000058   8121               LDD     R18, Z+1
   \   0000005A   7F2B               ANDI    R18, 0xFB
   \                     ??setting_diagnostic_ir_6:
   \   0000005C   8321               STD     Z+1, R18
   1228          
   1229          	if(flags.walk_through_en)
   \   0000005E   ....               LDI     R30, LOW(flags)
   \   00000060   ....               LDI     R31, (flags) >> 8
   \   00000062   8120               LD      R18, Z
   \   00000064   8131               LDD     R19, Z+1
   \   00000066   2F23               MOV     R18, R19
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   FF24               SBRS    R18, 4
   \   0000006C   C003               RJMP    ??setting_diagnostic_ir_7
   1230          		SetBit(*(data+1),1);
   \   0000006E   8121               LDD     R18, Z+1
   \   00000070   6022               ORI     R18, 0x02
   \   00000072   C002               RJMP    ??setting_diagnostic_ir_8
   1231          	else
   1232          		ClrBit(*(data+1),1);
   \                     ??setting_diagnostic_ir_7:
   \   00000074   8121               LDD     R18, Z+1
   \   00000076   7F2D               ANDI    R18, 0xFD
   \                     ??setting_diagnostic_ir_8:
   \   00000078   8321               STD     Z+1, R18
   1233          
   1234          	if(flags.re_triger_en)
   \   0000007A   ....               LDI     R30, LOW(flags)
   \   0000007C   ....               LDI     R31, (flags) >> 8
   \   0000007E   8120               LD      R18, Z
   \   00000080   8131               LDD     R19, Z+1
   \   00000082   2F23               MOV     R18, R19
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   FF25               SBRS    R18, 5
   \   00000088   C003               RJMP    ??setting_diagnostic_ir_9
   1235          		SetBit(*(data+1),0);
   \   0000008A   8121               LDD     R18, Z+1
   \   0000008C   6021               ORI     R18, 0x01
   \   0000008E   C002               RJMP    ??setting_diagnostic_ir_10
   1236          	else
   1237          		ClrBit(*(data+1),0);
   \                     ??setting_diagnostic_ir_9:
   \   00000090   8121               LDD     R18, Z+1
   \   00000092   7F2E               ANDI    R18, 0xFE
   \                     ??setting_diagnostic_ir_10:
   \   00000094   8321               STD     Z+1, R18
   1238          
   1239          	if(flags.exemption_en)
   \   00000096   ....               LDI     R30, LOW(flags)
   \   00000098   ....               LDI     R31, (flags) >> 8
   \   0000009A   8120               LD      R18, Z
   \   0000009C   8131               LDD     R19, Z+1
   \   0000009E   2F23               MOV     R18, R19
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   FF26               SBRS    R18, 6
   \   000000A4   C003               RJMP    ??setting_diagnostic_ir_11
   1240          		SetBit(*(data+1),4);
   \   000000A6   8121               LDD     R18, Z+1
   \   000000A8   6120               ORI     R18, 0x10
   \   000000AA   C002               RJMP    ??setting_diagnostic_ir_12
   1241          	else
   1242          		ClrBit(*(data+1),4);
   \                     ??setting_diagnostic_ir_11:
   \   000000AC   8121               LDD     R18, Z+1
   \   000000AE   7E2F               ANDI    R18, 0xEF
   \                     ??setting_diagnostic_ir_12:
   \   000000B0   8321               STD     Z+1, R18
   1243          
   1244          	if(flags.regulation_en)
   \   000000B2   ....               LDI     R30, LOW(flags)
   \   000000B4   ....               LDI     R31, (flags) >> 8
   \   000000B6   8120               LD      R18, Z
   \   000000B8   8131               LDD     R19, Z+1
   \   000000BA   2F23               MOV     R18, R19
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   8101               LDD     R16, Z+1
   \   000000C0   FF27               SBRS    R18, 7
   \   000000C2   C002               RJMP    ??setting_diagnostic_ir_13
   1245          		SetBit(*(data+1),5);
   \   000000C4   6200               ORI     R16, 0x20
   \   000000C6   C001               RJMP    ??setting_diagnostic_ir_14
   1246          	else
   1247          		ClrBit(*(data+1),5);
   \                     ??setting_diagnostic_ir_13:
   \   000000C8   7D0F               ANDI    R16, 0xDF
   \                     ??setting_diagnostic_ir_14:
   \   000000CA   8301               STD     Z+1, R16
   1248          }
   \   000000CC   9508               RET
   1249          

   \                                 In  segment CODE, align 2, keep-with-next
   1250          unsigned char get_current_scenario_number(void)
   \                     get_current_scenario_number:
   1251          {
   1252            unsigned char i = 16;
   1253          
   1254          	for(i=0;i<16;i++)
   \   00000000   E060               LDI     R22, 0
   \   00000002   C001               RJMP    ??get_current_scenario_number_0
   \                     ??get_current_scenario_number_1:
   \   00000004   9563               INC     R22
   \                     ??get_current_scenario_number_0:
   \   00000006   3160               CPI     R22, 16
   \   00000008   F530               BRCC    ??get_current_scenario_number_2
   1255          	{
   1256          		if( (g_ir_reception[2] == ee_scenario[i].id[0]) && (g_ir_reception[3] == ee_scenario[i].id[1]) && (g_ir_reception[4] == ee_scenario[i].id[2]))
   \   0000000A   2F46               MOV     R20, R22
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   E007               LDI     R16, 7
   \   00000010   E010               LDI     R17, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   ....               LDI     R18, LOW(ee_scenario)
   \   00000018   ....               LDI     R19, (ee_scenario) >> 8
   \   0000001A   0F20               ADD     R18, R16
   \   0000001C   1F31               ADC     R19, R17
   \   0000001E   ....               LDI     R30, LOW(g_ir_reception)
   \   00000020   ....               LDI     R31, (g_ir_reception) >> 8
   \   00000022   8112               LDD     R17, Z+2
   \   00000024   01A9               MOVW    R21:R20, R19:R18
   \   00000026   5F4E               SUBI    R20, 254
   \   00000028   4F5F               SBCI    R21, 255
   \   0000002A   ........           CALL    __eeget8_16
   \   0000002E   1710               CP      R17, R16
   \   00000030   F749               BRNE    ??get_current_scenario_number_1
   \   00000032   8113               LDD     R17, Z+3
   \   00000034   01A9               MOVW    R21:R20, R19:R18
   \   00000036   5F4D               SUBI    R20, 253
   \   00000038   4F5F               SBCI    R21, 255
   \   0000003A   ........           CALL    __eeget8_16
   \   0000003E   1710               CP      R17, R16
   \   00000040   F709               BRNE    ??get_current_scenario_number_1
   \   00000042   8114               LDD     R17, Z+4
   \   00000044   5F2C               SUBI    R18, 252
   \   00000046   4F3F               SBCI    R19, 255
   \   00000048   01A9               MOVW    R21:R20, R19:R18
   \   0000004A   ........           CALL    __eeget8_16
   \   0000004E   1710               CP      R17, R16
   \   00000050   F6C9               BRNE    ??get_current_scenario_number_1
   1257          		{
   1258          			return i;
   \                     ??get_current_scenario_number_3:
   \   00000052   2F06               MOV     R16, R22
   \   00000054   9508               RET
   1259          		}
   1260          	}
   1261          
   1262            if(i == 16)
   \                     ??get_current_scenario_number_2:
   \   00000056   F7E9               BRNE    ??get_current_scenario_number_3
   1263              i = 0;
   \   00000058   E060               LDI     R22, 0
   \   0000005A   CFFB               RJMP    ??get_current_scenario_number_3
   1264          
   1265            return i;
   1266          }
   1267          

   \                                 In  segment CODE, align 2, keep-with-next
   1268          unsigned char is_scenario_full(void)
   \                     is_scenario_full:
   1269          {
   1270          	for(unsigned char i=0;i<16;i++)
   \   00000000   E060               LDI     R22, 0
   \   00000002   C001               RJMP    ??is_scenario_full_0
   \                     ??is_scenario_full_1:
   \   00000004   9563               INC     R22
   \                     ??is_scenario_full_0:
   \   00000006   3160               CPI     R22, 16
   \   00000008   F488               BRCC    ??is_scenario_full_2
   1271          	{
   1272          		if(ee_scenario[i].confed == 0)
   \   0000000A   ....               LDI     R18, LOW((ee_scenario + 6))
   \   0000000C   ....               LDI     R19, HIGH((ee_scenario + 6))
   \   0000000E   2F46               MOV     R20, R22
   \   00000010   E050               LDI     R21, 0
   \   00000012   E007               LDI     R16, 7
   \   00000014   E010               LDI     R17, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   0F20               ADD     R18, R16
   \   0000001C   1F31               ADC     R19, R17
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   ........           CALL    __eeget8_16
   \   00000024   2300               TST     R16
   \   00000026   F771               BRNE    ??is_scenario_full_1
   1273          		{
   1274          			return 0;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   9508               RET
   1275          		}
   1276          	}
   1277          	
   1278          	return 1;
   \                     ??is_scenario_full_2:
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   9508               RET
   1279          }

   \                                 In  segment INTVEC, offset 0x70, root
   \                     `??usart1_rx_ser??INTVEC 112`:
   \   00000070   ........           JMP     usart1_rx_ser

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??usart_tx_ser??INTVEC 120`:
   \   00000078   ........           JMP     usart_tx_ser

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "B1009300">>`:
   \   00000000   314230303339       DC8 "B1009300"
   \              303000      
   \                     `?<Initializer for <Constant "D200090811000066"`:
   \   00000009   324430303930       DC8 "D200090811000066"
   \              383031313030
   \              3030363600  
   \                     `?<Initializer for <Constant "D20001428C000B01"`:
   \   0000001A   324430303130       DC8 "D20001428C000B01"
   \              323443383030
   \              4230313000  
   \                     `?<Initializer for <Constant "D20001428C000B02"`:
   \   0000002B   324430303130       DC8 "D20001428C000B02"
   \              323443383030
   \              4230323000  
   \                     `?<Initializer for <Constant "D20001428C000B03"`:
   \   0000003C   324430303130       DC8 "D20001428C000B03"
   \              323443383030
   \              4230333000  
   \                     `?<Initializer for <Constant "D20001428C000B04"`:
   \   0000004D   324430303130       DC8 "D20001428C000B04"
   \              323443383030
   \              4230343000  
   \                     `?<Initializer for <Constant "D20001428C000B05"`:
   \   0000005E   324430303130       DC8 "D20001428C000B05"
   \              323443383030
   \              4230353000  
   \                     `?<Initializer for <Constant "D20001428C000B06"`:
   \   0000006F   324430303130       DC8 "D20001428C000B06"
   \              323443383030
   \              4230363000  
   \                     `?<Initializer for <Constant "D20001428C000B07"`:
   \   00000080   324430303130       DC8 "D20001428C000B07"
   \              323443383030
   \              4230373000  
   \                     `?<Initializer for <Constant "D20001428C000802"`:
   \   00000091   324430303130       DC8 "D20001428C000802"
   \              323443383030
   \              3830323000  
   \                     `?<Initializer for <Constant "D20001428C000947"`:
   \   000000A2   324430303130       DC8 "D20001428C000947"
   \              323443383030
   \              3930373400  
   \                     `?<Initializer for <Constant "D20001428C0008F0"`:
   \   000000B3   324430303130       DC8 "D20001428C0008F0"
   \              323443383030
   \              3830304600  
   \                     `?<Initializer for <Constant "B0009900">>`:
   \   000000C4   304230303939       DC8 "B0009900"
   \              303000      
   \                     `?<Initializer for <Constant "D20001428C000A05"`:
   \   000000CD   324430303130       DC8 "D20001428C000A05"
   \              323443383030
   \              4130353000  
   \                     `?<Initializer for <Constant "B1009100">>`:
   \   000000DE   314230303139       DC8 "B1009100"
   \              303000      
   \                     `?<Initializer for <Constant "B000990F">>`:
   \   000000E7   304230303939       DC8 "B000990F"
   \              463000      

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for decode_IR>_0`:
   \   00000000   07                 DB      7
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??decode_IR_16) /2
   \   00000004   ....               DW      (??decode_IR_41) /2
   \   00000006   07                 DB      0x7
   \   00000007   ....               DW      (??decode_IR_26) /2
   \   00000009   1E                 DB      0x1e
   \   0000000A   ....               DW      (??decode_IR_42) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??decode_IR_46) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??decode_IR_48) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??decode_IR_49) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??decode_IR_50) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??decode_IR_51) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??decode_IR_52) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??decode_IR_53) /2
   \   00000021   01                 DB      0x1
   \   00000022   ....               DW      (??decode_IR_54) /2
   \   00000024   01                 DB      0x1
   \   00000025   ....               DW      (??decode_IR_56) /2
   \   00000027   01                 DB      0x1
   \   00000028   ....               DW      (??decode_IR_61) /2
   \   0000002A   01                 DB      0x1
   \   0000002B   ....               DW      (??decode_IR_62) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??decode_IR_64) /2
   \   00000030   FB                 DB      251
   \   00000031   00                 DB      0

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "B1009300">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "B1009300">>`
   \   00000009                      DS8 17
   \   0000001A                      REQUIRE `?<Initializer for <Constant "D200090811000066"`
   \   0000001A                      DS8 17
   \   0000002B                      REQUIRE `?<Initializer for <Constant "D20001428C000B01"`
   \   0000002B                      DS8 17
   \   0000003C                      REQUIRE `?<Initializer for <Constant "D20001428C000B02"`
   \   0000003C                      DS8 17
   \   0000004D                      REQUIRE `?<Initializer for <Constant "D20001428C000B03"`
   \   0000004D                      DS8 17
   \   0000005E                      REQUIRE `?<Initializer for <Constant "D20001428C000B04"`
   \   0000005E                      DS8 17
   \   0000006F                      REQUIRE `?<Initializer for <Constant "D20001428C000B05"`
   \   0000006F                      DS8 17
   \   00000080                      REQUIRE `?<Initializer for <Constant "D20001428C000B06"`
   \   00000080                      DS8 17
   \   00000091                      REQUIRE `?<Initializer for <Constant "D20001428C000B07"`
   \   00000091                      DS8 17
   \   000000A2                      REQUIRE `?<Initializer for <Constant "D20001428C000802"`
   \   000000A2                      DS8 17
   \   000000B3                      REQUIRE `?<Initializer for <Constant "D20001428C000947"`
   \   000000B3                      DS8 17
   \   000000C4                      REQUIRE `?<Initializer for <Constant "D20001428C0008F0"`
   \   000000C4                      DS8 9
   \   000000CD                      REQUIRE `?<Initializer for <Constant "B0009900">>`
   \   000000CD                      DS8 17
   \   000000DE                      REQUIRE `?<Initializer for <Constant "D20001428C000A05"`
   \   000000DE                      DS8 9
   \   000000E7                      REQUIRE `?<Initializer for <Constant "B1009100">>`
   \   000000E7                      DS8 9
   \   000000F0                      REQUIRE `?<Initializer for <Constant "B000990F">>`

   Maximum stack usage in bytes:

     Function                     CSTACK RSTACK
     --------                     ------ ------
     IR_36kHz                         0      2
       -> PWM_output_init             0      2
     PWM_output_init                  0      2
     _calculate_crc                   0      2
     close_IR_36kHz                   0      2
     decode_IR                       66      4
       -> _calculate_crc             66      2
       -> timer_IR_initial           66      2
       -> send_aux_frame             66      2
       -> frame_ON_send              66      2
       -> send_aux_frame             66      2
       -> frame_OFF_send             66      2
       -> strncpy                    66      2
       -> CharToStr                  66      2
       -> send_frame_pp_broad        66      2
       -> send_aux_frame             66      2
       -> strncpy                    66      2
       -> send_frame_pp_ext_broad    66      2
       -> CharToStr                  66      2
       -> strncpy                    66      2
       -> CharToStr                  66      2
       -> send_frame_pp_ext_broad    66      2
       -> led_blinking               66      2
       -> timer_flex_initial         66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_group_pnl_frame       66      2
       -> send_frame_pp_ext_broad    66      2
       -> led_blinking_normal        66      2
       -> send_group_frame           66      2
       -> send_frame_pp_ext_broad    66      2
       -> CharToStr                  66      2
       -> strncpy                    66      2
       -> send_frame_pp_ext_broad    66      2
       -> factory_default            66      2
       -> system_reset               66      2
       -> send_frame_pp_ext_broad    66      2
       -> send_aux_frame             66      2
       -> timer_dimmer_initial       66      2
       -> send_group_frame           66      2
       -> timer_dimmer_initial       66      2
       -> send_aux_frame             66      2
       -> read_KO                    66      2
       -> StrToChar                  66      2
       -> StrToChar                  66      2
       -> StrToChar                  66      2
       -> StrToChar                  66      2
       -> put_s1                     66      2
       -> is_scenario_full           66      2
       -> send_frame_pp_broad        66      2
       -> strncpy                    66      2
       -> CharToStr                  66      2
       -> send_frame_pp_ext_broad    66      2
       -> timer_flex_initial         66      2
       -> led_blinking               66      2
       -> timer_flex_initial         66      2
       -> write_KO                   66      2
       -> write_ee_KO                66      2
       -> write_KO                   66      2
       -> write_ee_KO                66      2
       -> write_KO                   66      2
       -> write_ee_KO                66      2
       -> buzzer_ms                  66      2
       -> send_aux_frame             66      2
     get_current_scenario_number      0      4
     init_USART1                      0      2
     ir_buffer_clear                  0      2
     ir_pnl                          20      4
       -> is_scenario_full           20      2
       -> led_blinking               20      2
       -> led_blinking               20      2
       -> timer_flex_initial         20      2
       -> led_blinking               20      2
       -> led_blinking_disable       20      2
       -> timer_flex_initial         20      2
       -> led_blinking_disable       20      2
       -> strncpy                    20      2
       -> CharToStr                  20      2
       -> send_frame_pp_broad        20      2
       -> send_frame_pp_broad        20      2
       -> timer_flex_initial         20      2
       -> is_scenario_full           20      2
       -> strncpy                    20      2
       -> CharToStr                  20      2
       -> send_frame_pp_broad        20      2
       -> send_frame_pp_broad        20      2
       -> led_blinking_disable       20      2
       -> led_blinking_disable       20      2
       -> led_blinking_disable       20      2
     is_scenario_full                 0      4
     put_c1                           0      2
     put_s1                           5      2
       -> _calculate_crc              5      2
       -> delay_ms                    5      2
       -> put_c1                      5      2
       -> put_c1                      5      2
       -> delay_ms                    5      2
     setting_diagnostic_ir            0      2
     timer_IR_initial                 0      2
     usart1_rx_ser                    9      2
     usart_tx_ser                     5      2


   Segment part sizes:

     Function/Label                           Bytes
     --------------                           -----
     _A_UDR1                                     1
     _A_UBRR1                                    2
     _A_UCSR1C                                   1
     _A_UCSR1B                                   1
     _A_UCSR1A                                   1
     _A_OCR1B                                    2
     _A_OCR1A                                    2
     _A_ICR1                                     2
     _A_TCCR1B                                   1
     _A_TCCR1A                                   1
     usart1_rx_ser                             178
     usart_tx_ser                               80
     put_c1                                     80
     put_s1                                     96
     init_USART1                                32
     _calculate_crc                             32
     PWM_output_init                            14
     IR_36kHz                                   34
     close_IR_36kHz                             20
     timer_IR_initial                           42
     decode_IR                                3176
     ns_400ms                                    1
     ir_buffer_clear                            46
     ir_pnl                                   1532
     temp_ns                                     2
     id_compare_flag
     setting_diagnostic_ir                     206
     get_current_scenario_number                92
     is_scenario_full                           48
     ??usart1_rx_ser??INTVEC 112                 4
     ??usart_tx_ser??INTVEC 120                  4
     ?<Initializer for <Constant "B1009300">>  240
     ?<Jumptable for decode_IR>_0               50
     ?<Constant "B1009300">                    240
      Others                                    12

 
    14 bytes in segment ABSOLUTE
 5 708 bytes in segment CODE
    12 bytes in segment INITTAB
     8 bytes in segment INTVEC
   240 bytes in segment NEAR_I
   240 bytes in segment NEAR_ID
     3 bytes in segment NEAR_Z
    50 bytes in segment SWITCH
 
 5 998 bytes of CODE memory (+ 20 bytes shared)
   243 bytes of DATA memory (+ 14 bytes shared)

Errors: none
Warnings: none

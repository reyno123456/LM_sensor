///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR   11/Dec/2009  23:21:32 /
// Copyright 1996-2009 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\avr\LM_Finial_Test\decode_scs_next.c                 /
//    Command line =  D:\avr\LM_Finial_Test\decode_scs_next.c --cpu=m644p     /
//                    -ms -o D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D  /
//                    LM018 -D FINAL_VERSION2 -lCN                            /
//                    D:\avr\LM_Finial_Test\Release\List\ -lA                 /
//                    D:\avr\LM_Finial_Test\Release\List\ --diag_suppress     /
//                    Pa082,Pe167,Pe186 --initializers_in_flash -z6           /
//                    --no_inline --no_cross_call --no_tbaa                   /
//                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR    /
//                    Systems\Embedded Workbench 5.3\avr\INC\" -I             /
//                    "C:\Program Files\IAR Systems\Embedded Workbench        /
//                    5.3\avr\INC\CLIB\" --eeprom_size 2048                   /
//    List file    =  D:\avr\LM_Finial_Test\Release\List\decode_scs_next.s90  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME decode_scs_next

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega644P"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?CV_SWITCH_L06
        EXTERN ?EPILOGUE_B3_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?L_EC_MUL_L03
        EXTERN ?ML_EEPROM_SRAM_16_16_L07
        EXTERN ?ML_FLASH_SRAM_16EC_16_L07
        EXTERN ?ML_SRAM_EEPROM_16_16_L07
        EXTERN ?ML_SRAM_SRAM_16_L07
        EXTERN ?PROLOGUE3_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?S_EC_MUL_L02
        EXTERN ?need_segment_init
        EXTERN __eeget16_16
        EXTERN __eeget8_16
        EXTERN __eeput16_16
        EXTERN __eeput8_16

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBLIC KO_answer_frame
        FUNCTION KO_answer_frame,0a1203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC KO_setting_error_frame
        FUNCTION KO_setting_error_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC KO_setting_procedure
        FUNCTION KO_setting_procedure,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC address_answer_frame
        FUNCTION address_answer_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC address_setting_error_frame
        FUNCTION address_setting_error_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC aux_procedure
        FUNCTION aux_procedure,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC configuration_answer_frame
        FUNCTION configuration_answer_frame,0a1203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC configuration_procedure
        FUNCTION configuration_procedure,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 78, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC configuration_receive_answer_frame
        FUNCTION configuration_receive_answer_frame,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC configuration_setting_frame
        FUNCTION configuration_setting_frame,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC diagnostic_frame
        FUNCTION diagnostic_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC dimmer_convert
        FUNCTION dimmer_convert,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC frame_buffer_clear
        FUNCTION frame_buffer_clear,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC id_frame
        FUNCTION id_frame,0a1203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC ko_answer_all
        FUNCTION ko_answer_all,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC not_allowed_response
        FUNCTION not_allowed_response,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC org_ext_broad
        FUNCTION org_ext_broad,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC parameter_all_answer
        FUNCTION parameter_all_answer,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC parameter_answer_frame
        FUNCTION parameter_answer_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC parameter_request_error_frame
        FUNCTION parameter_request_error_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 19, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC parameter_set
        FUNCTION parameter_set,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC parameter_setting_error_answer
        FUNCTION parameter_setting_error_answer,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC parameter_specified_index_answer
        FUNCTION parameter_specified_index_answer,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC scenario_remove
        FUNCTION scenario_remove,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC send_aux_frame
        FUNCTION send_aux_frame,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC send_frame_pp
        FUNCTION send_frame_pp,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC send_frame_pp_broad
        FUNCTION send_frame_pp_broad,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC send_frame_pp_ext
        FUNCTION send_frame_pp_ext,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 23, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC send_frame_pp_ext_broad
        FUNCTION send_frame_pp_ext_broad,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC send_group_frame
        FUNCTION send_group_frame,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC send_group_pnl_frame
        FUNCTION send_group_pnl_frame,021203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC write_parameter_scenario
        FUNCTION write_parameter_scenario,0203H
        ARGFRAME RSTACK, 0, STACK
        LOCFRAME RSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN put_s
        FUNCTION put_s,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN delay_ms
        FUNCTION delay_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN is_gateway_busy
        FUNCTION is_gateway_busy,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN CharToStr
        FUNCTION CharToStr,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN strncpy
        FUNCTION strncpy,010202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN timer_flex_initial
        FUNCTION timer_flex_initial,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN ID_setting
        FUNCTION ID_setting,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN system_reset
        FUNCTION system_reset,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN PIR_SENSE_SET
        FUNCTION PIR_SENSE_SET,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN US_SENSE_SET
        FUNCTION US_SENSE_SET,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN write_KO
        FUNCTION write_KO,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN write_ee_KO
        FUNCTION write_ee_KO,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN configuration_checking
        FUNCTION configuration_checking,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN manual_reception_buffer_clear
        FUNCTION manual_reception_buffer_clear,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN StrToChar
        FUNCTION StrToChar,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking_normal
        FUNCTION led_blinking_normal,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN read_KO
        FUNCTION read_KO,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN KO_parameter_initial_temp
        FUNCTION KO_parameter_initial_temp,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN factory_default
        FUNCTION factory_default,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN KO_parameter_initial
        FUNCTION KO_parameter_initial,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN remember_parameter
        FUNCTION remember_parameter,0200H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking_ms
        FUNCTION led_blinking_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN Configurators
        EXTERN DLL
        EXTERN Delay_Time_set
        EXTERN IR_reception
        EXTERN KO
        EXTERN KO_conf
        EXTERN SCS_received
        EXTERN Sensor_mode
        EXTERN Time_delay
        EXTERN ee_ID
        EXTERN ee_KO
        EXTERN ee_KO_conf
        EXTERN ee_KO_last
        EXTERN ee_configurators
        EXTERN ee_flags
        EXTERN ee_parameter
        EXTERN ee_product_information
        EXTERN ee_scenario
        EXTERN ee_scenario_index
        EXTERN ee_variable
        EXTERN flags
        EXTERN flags_muti_step
        EXTERN flash_KO
        EXTERN g_asc_reception_buffer
        EXTERN g_reception_buffer
        EXTERN key_result
        EXTERN product_information
        EXTERN scs_frame
        EXTERN state
        EXTERN temp_product_information
        EXTERN temp_variable

// D:\avr\LM_Finial_Test\decode_scs_next.c
//    1 #include <ioavr.h>
//    2 #include <inavr.h>
//    3 #include <stdio.h>
//    4 #include "usart.h"
//    5 #include "board.h"
//    6 #include "moudle_SCS.h"
//    7 #include "decode_scs.h"
//    8 #include "stdlib.h"
//    9 #include "global_variable.h"
//   10 #include "decode_scs_next.h"
//   11 #include "application.h"
//   12 #include <string.h>
//   13 #include "configuration.h"
//   14 #include "function_service.h"
//   15 #include "PIR.h"
//   16 #include "US.h"
//   17 

        RSEG CODE:CODE:NOROOT(1)
//   18 void send_frame_pp(char *data, unsigned int ms)
send_frame_pp:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function send_frame_pp
//   19 {
        FUNCALL send_frame_pp, put_s
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp, delay_ms
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp, put_s
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp, is_gateway_busy
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 13
        CFI CFA_Y Y+17
        MOVW    R27:R26, R19:R18
//   20 	unsigned char i;
//   21 	unsigned char buffer[13];
//   22 	unsigned char temp;
//   23 
//   24 	buffer[0] = '$';
        LDI     R18, 36
        ST      Y, R18
//   25 	buffer[1] = '0';
        LDI     R18, 48
        STD     Y+1, R18
//   26 	buffer[2] = '3';
        LDI     R18, 51
        STD     Y+2, R18
//   27 	for(i=0;i<8;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_0
//   28 	{
//   29 		buffer[i+3] = *(data+i);
??send_frame_pp_1:
        LDI     R25, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R24
        ADC     R31, R25
        LD      R18, Z
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        STD     Z+3, R18
//   30 	}
        INC     R24
??send_frame_pp_0:
        CPI     R24, 8
        BRCS    ??send_frame_pp_1
//   31 
//   32 	buffer[11] = 13;
        LDI     R16, 13
        STD     Y+11, R16
//   33 	buffer[12] = 0;
        LDI     R16, 0
        STD     Y+12, R16
//   34 
//   35 	put_s(buffer);
        MOVW    R17:R16, R29:R28
        CALL    put_s
//   36 	delay_ms(ms);
        MOVW    R17:R16, R27:R26
        CALL    delay_ms
//   37 	
//   38 	for(i=0;i<125;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_2
//   39   {
//   40 		temp = is_gateway_busy();
//   41 		if(temp == 0x07 || temp == 0x01)
//   42 		{
//   43 			put_s(buffer);
??send_frame_pp_3:
        MOVW    R17:R16, R29:R28
        CALL    put_s
//   44 		}
??send_frame_pp_4:
        INC     R24
??send_frame_pp_2:
        CPI     R24, 125
        BRCC    ??send_frame_pp_5
        CALL    is_gateway_busy
        CPI     R16, 7
        BREQ    ??send_frame_pp_3
        CPI     R16, 1
        BREQ    ??send_frame_pp_3
//   45 		else if(temp == 0x02)
        CPI     R16, 2
        BRNE    ??send_frame_pp_4
//   46 		{
//   47 			break;
//   48 		}
//   49   }
//   50 }
??send_frame_pp_5:
        ADIW    R29:R28, 13
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock0
//   51 

        RSEG CODE:CODE:NOROOT(1)
//   52 void send_frame_pp_broad(char *data, unsigned int ms)
send_frame_pp_broad:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function send_frame_pp_broad
//   53 {
        FUNCALL send_frame_pp_broad, put_s
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_broad, delay_ms
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_broad, put_s
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_broad, is_gateway_busy
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 13
        CFI CFA_Y Y+17
        MOVW    R27:R26, R19:R18
//   54 	unsigned char i;
//   55 	unsigned char buffer[13];
//   56 	unsigned char temp;
//   57 
//   58 	buffer[0] = '$';
        LDI     R18, 36
        ST      Y, R18
//   59 	buffer[1] = '0';
        LDI     R18, 48
        STD     Y+1, R18
//   60 	buffer[2] = '4';
        LDI     R18, 52
        STD     Y+2, R18
//   61 	for(i=0;i<8;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_broad_0
//   62 	{
//   63 		buffer[i+3] = *(data+i);
??send_frame_pp_broad_1:
        LDI     R25, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R24
        ADC     R31, R25
        LD      R18, Z
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        STD     Z+3, R18
//   64 	}
        INC     R24
??send_frame_pp_broad_0:
        CPI     R24, 8
        BRCS    ??send_frame_pp_broad_1
//   65 
//   66 	buffer[11] = 13;
        LDI     R16, 13
        STD     Y+11, R16
//   67 	buffer[12] = 0;
        LDI     R16, 0
        STD     Y+12, R16
//   68 
//   69 	put_s(buffer);
        MOVW    R17:R16, R29:R28
        CALL    put_s
//   70 	delay_ms(ms);
        MOVW    R17:R16, R27:R26
        CALL    delay_ms
//   71 	
//   72 	for(i=0;i<250;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_broad_2
//   73   {
//   74 		temp = is_gateway_busy();
//   75 		if(temp == 0x07 || temp == 0x01)
//   76 		{
//   77 			put_s(buffer);
??send_frame_pp_broad_3:
        MOVW    R17:R16, R29:R28
        CALL    put_s
//   78 		}
??send_frame_pp_broad_4:
        INC     R24
??send_frame_pp_broad_2:
        CPI     R24, 250
        BRCC    ??send_frame_pp_broad_5
        CALL    is_gateway_busy
        CPI     R16, 7
        BREQ    ??send_frame_pp_broad_3
        CPI     R16, 1
        BREQ    ??send_frame_pp_broad_3
//   79 		else if(temp == 0x02)
        CPI     R16, 2
        BRNE    ??send_frame_pp_broad_4
//   80 		{
//   81 			break;
//   82 		}
//   83   }
//   84 	
//   85 }
??send_frame_pp_broad_5:
        ADIW    R29:R28, 13
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock1
//   86 

        RSEG CODE:CODE:NOROOT(1)
//   87 void send_frame_pp_ext(char *data, unsigned int ms)
send_frame_pp_ext:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function send_frame_pp_ext
//   88 {
        FUNCALL send_frame_pp_ext, put_s
        LOCFRAME CSTACK, 23, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext, delay_ms
        LOCFRAME CSTACK, 23, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 21
        CFI CFA_Y Y+23
        MOVW    R25:R24, R19:R18
//   89 	unsigned char i;
//   90 	unsigned char buffer[21];
//   91 
//   92 	buffer[0] = '$';
        LDI     R18, 36
        ST      Y, R18
//   93 	buffer[1] = '0';
        LDI     R18, 48
        STD     Y+1, R18
//   94 	buffer[2] = '5';
        LDI     R18, 53
        STD     Y+2, R18
//   95 	for(i=0;i<16;i++)
        LDI     R18, 0
        RJMP    ??send_frame_pp_ext_0
//   96 	{
//   97 		buffer[i+3] = *(data+i);
??send_frame_pp_ext_1:
        LDI     R19, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R18
        ADC     R31, R19
        LD      R20, Z
        MOVW    R31:R30, R29:R28
        ADD     R30, R18
        ADC     R31, R19
        STD     Z+3, R20
//   98 	}
        INC     R18
??send_frame_pp_ext_0:
        CPI     R18, 16
        BRCS    ??send_frame_pp_ext_1
//   99 	buffer[19] = 13;
        LDI     R16, 13
        STD     Y+19, R16
//  100 	buffer[20] = 0;
        LDI     R16, 0
        STD     Y+20, R16
//  101 
//  102 	put_s(buffer);
        MOVW    R17:R16, R29:R28
        CALL    put_s
//  103 
//  104 	delay_ms(ms);
        MOVW    R17:R16, R25:R24
        CALL    delay_ms
//  105 }
        ADIW    R29:R28, 21
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock2
//  106 

        RSEG CODE:CODE:NOROOT(1)
//  107 void send_frame_pp_ext_broad(char *data, unsigned int ms)
send_frame_pp_ext_broad:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function send_frame_pp_ext_broad
//  108 {
        FUNCALL send_frame_pp_ext_broad, CharToStr
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext_broad, CharToStr
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext_broad, put_s
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext_broad, delay_ms
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext_broad, put_s
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_frame_pp_ext_broad, is_gateway_busy
        LOCFRAME CSTACK, 28, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 24
        CFI CFA_Y Y+28
        MOVW    R27:R26, R19:R18
//  109 	unsigned char i;
//  110 	unsigned char buffer[21];
//  111 	unsigned char buffer_char[3];
//  112 	unsigned char temp = 0;
//  113 
//  114 	buffer[0] = '$';
        LDI     R18, 36
        STD     Y+3, R18
//  115 	buffer[1] = '0';
        LDI     R18, 48
        STD     Y+4, R18
//  116 	buffer[2] = '6';
        LDI     R18, 54
        STD     Y+5, R18
//  117 	for(i=0;i<16;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_ext_broad_0
//  118 	{
//  119 		buffer[i+3] = *(data+i);
??send_frame_pp_ext_broad_1:
        LDI     R25, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R24
        ADC     R31, R25
        LD      R18, Z
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        ADD     R30, R24
        ADC     R31, R25
        STD     Z+3, R18
//  120 	}
        INC     R24
??send_frame_pp_ext_broad_0:
        CPI     R24, 16
        BRCS    ??send_frame_pp_ext_broad_1
//  121 	buffer[19] = 13;
        LDI     R16, 13
        STD     Y+22, R16
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??send_frame_pp_ext_broad_2
//  122 
//  123 	//add by 2009 02 18
//  124 	if(product_information.conf_type == 3)
//  125 	{
//  126 		buffer[5] = '0';
??send_frame_pp_ext_broad_3:
        LDI     R16, 48
        STD     Y+8, R16
//  127 		buffer[6] = '0';
        RJMP    ??send_frame_pp_ext_broad_4
//  128 	}
//  129 	else if( product_information.conf_type == 2 )
??send_frame_pp_ext_broad_2:
        LDS     R16, product_information
        CPI     R16, 2
        LDS     R16, (g_reception_buffer + 7)
        BRNE    ??send_frame_pp_ext_broad_5
//  130 	{
//  131 		if(g_reception_buffer[7] == '3')
        CPI     R16, 51
        BREQ    ??send_frame_pp_ext_broad_3
//  132 		{
//  133 			buffer[5] = '0';
//  134 			buffer[6] = '0';
//  135 		}
//  136 		else
//  137 		{
//  138 			CharToStr( ee_KO_conf.GR, buffer_char);
        MOVW    R19:R18, R29:R28
        LDI     R20, LOW((ee_KO_conf + 6))
        LDI     R21, HIGH((ee_KO_conf + 6))
        RJMP    ??send_frame_pp_ext_broad_6
//  139 			buffer[5] = buffer_char[0];
//  140 			buffer[6] = buffer_char[1];
//  141 		}
//  142 	}
//  143 	else
//  144 	{
//  145 		if(g_reception_buffer[7] == '3')
??send_frame_pp_ext_broad_5:
        CPI     R16, 51
        BREQ    ??send_frame_pp_ext_broad_3
//  146 		{
//  147 			buffer[5] = '0';
//  148 			buffer[6] = '0';
//  149 		}
//  150 		else
//  151 		{
//  152 			CharToStr( ee_KO_conf.DesAdd , buffer_char);
        MOVW    R19:R18, R29:R28
        LDI     R20, LOW((ee_KO_conf + 2))
        LDI     R21, HIGH((ee_KO_conf + 2))
??send_frame_pp_ext_broad_6:
        CALL    __eeget8_16
        CALL    CharToStr
//  153 			buffer[5] = buffer_char[0];
        LD      R16, Y
        STD     Y+8, R16
//  154 			buffer[6] = buffer_char[1];
        LDD     R16, Y+1
??send_frame_pp_ext_broad_4:
        STD     Y+9, R16
//  155 		}
//  156 	}
//  157 
//  158   if( product_information.cen_system == CEN )
        LDS     R16, (product_information + 4)
        CPI     R16, 1
        BRNE    ??send_frame_pp_ext_broad_7
//  159   {
//  160     buffer[5] = product_information.local_A;
        LDS     R16, (product_information + 2)
        STD     Y+8, R16
//  161     buffer[6] = product_information.local_PL;
        LDS     R16, (product_information + 3)
        RJMP    ??send_frame_pp_ext_broad_8
//  162   }
//  163   else
//  164   {
//  165     buffer[5] = '0';
??send_frame_pp_ext_broad_7:
        LDI     R16, 48
        STD     Y+8, R16
//  166 		buffer[6] = '0';
??send_frame_pp_ext_broad_8:
        STD     Y+9, R16
//  167   }
//  168 
//  169 	buffer[20] = 0;
        LDI     R16, 0
        STD     Y+23, R16
//  170 	put_s(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    put_s
//  171   delay_ms(ms);
        MOVW    R17:R16, R27:R26
        CALL    delay_ms
//  172   /*
//  173   if(is_gateway_busy() != 0x02)
//  174   {
//  175     put_s(buffer);
//  176     delay_ms(ms);
//  177   }
//  178 	delay_ms(ms);
//  179   */
//  180 
//  181   for(i=0;i<250;i++)
        LDI     R24, 0
        RJMP    ??send_frame_pp_ext_broad_9
//  182   {
//  183 		temp = is_gateway_busy();
//  184 		if(temp == 0x07 || temp == 0x01)
//  185 		{
//  186 			put_s(buffer);
??send_frame_pp_ext_broad_10:
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    put_s
//  187 		}
??send_frame_pp_ext_broad_11:
        INC     R24
??send_frame_pp_ext_broad_9:
        CPI     R24, 250
        BRCC    ??send_frame_pp_ext_broad_12
        CALL    is_gateway_busy
        CPI     R16, 7
        BREQ    ??send_frame_pp_ext_broad_10
        CPI     R16, 1
        BREQ    ??send_frame_pp_ext_broad_10
//  188 		else if(temp == 0x02)
        CPI     R16, 2
        BRNE    ??send_frame_pp_ext_broad_11
//  189 		{
//  190 			break;
//  191 		}
//  192   }
//  193 }
??send_frame_pp_ext_broad_12:
        ADIW    R29:R28, 24
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock3
//  194 

        RSEG CODE:CODE:NOROOT(1)
//  195 void  org_ext_broad(char *data, unsigned int ms)
org_ext_broad:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function org_ext_broad
//  196 {
        FUNCALL org_ext_broad, put_s
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL org_ext_broad, delay_ms
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL org_ext_broad, put_s
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL org_ext_broad, is_gateway_busy
        LOCFRAME CSTACK, 25, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 21
        CFI CFA_Y Y+25
        MOVW    R27:R26, R19:R18
//  197 	unsigned char i;
//  198 	unsigned char buffer[21];
//  199 	unsigned char temp = 0;
//  200 	
//  201 	buffer[0] = '$';
        LDI     R18, 36
        ST      Y, R18
//  202 	buffer[1] = '0';
        LDI     R18, 48
        STD     Y+1, R18
//  203 	buffer[2] = '6';
        LDI     R18, 54
        STD     Y+2, R18
//  204 	for(i=0;i<16;i++)
        LDI     R24, 0
        RJMP    ??org_ext_broad_0
//  205 	{
//  206 		buffer[i+3] = *(data+i);
??org_ext_broad_1:
        LDI     R25, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R24
        ADC     R31, R25
        LD      R18, Z
        MOVW    R31:R30, R29:R28
        ADD     R30, R24
        ADC     R31, R25
        STD     Z+3, R18
//  207 	}
        INC     R24
??org_ext_broad_0:
        CPI     R24, 16
        BRCS    ??org_ext_broad_1
//  208 	buffer[19] = 13;
        LDI     R16, 13
        STD     Y+19, R16
//  209 
//  210 	//add by 2009 02 18
//  211 
//  212 	put_s(buffer);
        MOVW    R17:R16, R29:R28
        CALL    put_s
//  213 
//  214 	delay_ms(ms);
        MOVW    R17:R16, R27:R26
        CALL    delay_ms
//  215 
//  216   for(i=0;i<250;i++)
        LDI     R24, 0
        RJMP    ??org_ext_broad_2
//  217   {
//  218 		temp = is_gateway_busy();
//  219 		if(temp == 0x07 || temp == 0x01)
//  220 		{
//  221 			put_s(buffer);
??org_ext_broad_3:
        MOVW    R17:R16, R29:R28
        CALL    put_s
//  222 		}
??org_ext_broad_4:
        INC     R24
??org_ext_broad_2:
        CPI     R24, 250
        BRCC    ??org_ext_broad_5
        CALL    is_gateway_busy
        CPI     R16, 7
        BREQ    ??org_ext_broad_3
        CPI     R16, 1
        BREQ    ??org_ext_broad_3
//  223 		else if(temp == 0x02)
        CPI     R16, 2
        BRNE    ??org_ext_broad_4
//  224 		{
//  225 			break;
//  226 		}
//  227   }
//  228 }
??org_ext_broad_5:
        ADIW    R29:R28, 21
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock4
//  229 

        RSEG CODE:CODE:NOROOT(1)
//  230 void id_frame(void)
id_frame:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function id_frame
//  231 {
        FUNCALL id_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, timer_flex_initial
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, ID_setting
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, system_reset
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, diagnostic_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, diagnostic_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL id_frame, strcmp
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 17
        CFI CFA_Y Y+21
//  232 	unsigned char i;
//  233 	unsigned char buffer_tx[17];
//  234 	static unsigned char ID_buffer[9] = "00000000";
//  235 
//  236 	strncpy(buffer_tx,"D000010400000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D000010400000000">`)
        LDI     R19, (`?<Constant "D000010400000000">`) >> 8
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  237 	buffer_tx[16] = 0;
        LDI     R16, 0
        STD     Y+16, R16
        LDI     R20, LOW(ee_ID)
        LDI     R21, (ee_ID) >> 8
        CALL    __eeget8_16
        STD     Y+8, R16
//  238 
//  239 	i = 8;
//  240 	buffer_tx[i++] = ee_ID[0];
//  241 	buffer_tx[i++] = ee_ID[1];
        LDI     R20, LOW((ee_ID + 1))
        LDI     R21, HIGH((ee_ID + 1))
        CALL    __eeget8_16
        STD     Y+9, R16
//  242 	buffer_tx[i++] = ee_ID[2];
        LDI     R20, LOW((ee_ID + 2))
        LDI     R21, HIGH((ee_ID + 2))
        CALL    __eeget8_16
        STD     Y+10, R16
//  243 	buffer_tx[i++] = ee_ID[3];
        LDI     R20, LOW((ee_ID + 3))
        LDI     R21, HIGH((ee_ID + 3))
        CALL    __eeget8_16
        STD     Y+11, R16
//  244 	buffer_tx[i++] = ee_ID[4];
        LDI     R20, LOW((ee_ID + 4))
        LDI     R21, HIGH((ee_ID + 4))
        CALL    __eeget8_16
        STD     Y+12, R16
//  245 	buffer_tx[i++] = ee_ID[5];
        LDI     R20, LOW((ee_ID + 5))
        LDI     R21, HIGH((ee_ID + 5))
        CALL    __eeget8_16
        STD     Y+13, R16
//  246 	buffer_tx[i++] = ee_ID[6];
        LDI     R20, LOW((ee_ID + 6))
        LDI     R21, HIGH((ee_ID + 6))
        CALL    __eeget8_16
        STD     Y+14, R16
//  247 	buffer_tx[i++] = ee_ID[7];
        LDI     R20, LOW((ee_ID + 7))
        LDI     R21, HIGH((ee_ID + 7))
        CALL    __eeget8_16
        STD     Y+15, R16
        LDS     R16, (g_reception_buffer + 7)
        SUBI    R16, 50
        BREQ    ??id_frame_0
        DEC     R16
        BREQ    ??id_frame_1
        SUBI    R16, 2
        BRNE    $+2+2
        RJMP    ??id_frame_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??id_frame_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??id_frame_4
        DEC     R16
        BRNE    $+2+2
        RJMP    ??id_frame_5
        DEC     R16
        BRNE    $+2+2
        RJMP    ??id_frame_6
        SUBI    R16, 8
        BRNE    $+2+2
        RJMP    ??id_frame_7
        DEC     R16
        BRNE    $+2+2
        RJMP    ??id_frame_8
        RJMP    ??id_frame_9
//  248 
//  249 	switch(g_reception_buffer[7])
//  250 	{
//  251 		case '0':
//  252 			//reserved
//  253 		break;
//  254 
//  255 		case '1':
//  256 			//reserved
//  257 		break;
//  258 
//  259 		case '2':
//  260 			//if(product_information.ID_factory_assigned == 0)
//  261 			//{
//  262 				for(i=0;i<8;i++)
??id_frame_0:
        LDI     R16, 0
        RJMP    ??id_frame_10
//  263 				{
//  264 					ID_buffer[i] = g_reception_buffer[i+8];
??id_frame_11:
        LDI     R17, 0
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        ADD     R30, R16
        ADC     R31, R17
        LDD     R18, Z+8
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(??ID_buffer) & 0xFFFF))
        SBCI    R31, (-(??ID_buffer) & 0xFFFF) >> 8
        ST      Z, R18
//  265 				}
        INC     R16
??id_frame_10:
        CPI     R16, 8
        BRCS    ??id_frame_11
//  266 				timer_flex_initial(10000);
        LDI     R16, 16
        LDI     R17, 39
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
//  267 				state.id_setting = 1;
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x80
        RJMP    ??id_frame_12
//  268 			//}
//  269 		break;
//  270 
//  271 		case '3':
//  272 			//ID request
//  273 			if(flags.id_ack == 0)
??id_frame_1:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRC    R16, 1
        RJMP    ??id_frame_9
//  274 			{
//  275 				if(flags.id_request_enabled)
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 2
        RJMP    ??id_frame_9
//  276 				{
//  277 					if(ee_product_information.ID_confed)
        LDI     R20, LOW((ee_product_information + 1))
        LDI     R21, HIGH((ee_product_information + 1))
        CALL    __eeget8_16
        TST     R16
        BRNE    $+2+2
        RJMP    ??id_frame_9
//  278 					{
//  279 						asm("nop");
        nop
//  280 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??id_frame_13:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
        RJMP    ??id_frame_9
//  281 					}
//  282 				}
//  283 			}
//  284 		break;
//  285 
//  286 		case '5':
//  287 			//if(state.id_setting == 1 && product_information.ID_factory_assigned == 0)
//  288 			if(state.id_setting == 1)
??id_frame_2:
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 7
        RJMP    ??id_frame_9
//  289 			{	
//  290 				state.id_setting = 0;
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0x7F
        STD     Z+1, R17
        ST      Z, R16
//  291 				if((g_reception_buffer[8] == ID_buffer[0]) && (g_reception_buffer[9] == ID_buffer[1]) && (g_reception_buffer[10] == ID_buffer[2]) && (g_reception_buffer[11] == ID_buffer[3]) && (g_reception_buffer[12] == ID_buffer[4]) && (g_reception_buffer[13] == ID_buffer[5]) && (g_reception_buffer[14] == ID_buffer[6]) && (g_reception_buffer[15] == ID_buffer[7]))
        LDI     R26, LOW(??ID_buffer)
        LDI     R27, (??ID_buffer) >> 8
        LDS     R16, (g_reception_buffer + 8)
        LDS     R17, ??ID_buffer
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 9)
        LDS     R17, (??ID_buffer + 1)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 10)
        LDS     R17, (??ID_buffer + 2)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 11)
        LDS     R17, (??ID_buffer + 3)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 12)
        LDS     R17, (??ID_buffer + 4)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 13)
        LDS     R17, (??ID_buffer + 5)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??id_frame_14
        LDS     R16, (g_reception_buffer + 14)
        LDS     R17, (??ID_buffer + 6)
        CP      R16, R17
        BRNE    ??id_frame_14
        LDS     R16, (g_reception_buffer + 15)
        LDS     R17, (??ID_buffer + 7)
        CP      R16, R17
        BRNE    ??id_frame_14
//  292 				{
//  293 					ID_setting(ID_buffer);
        MOVW    R17:R16, R27:R26
        CALL    ID_setting
//  294 					ee_product_information.ID_confed = 0x01;
        LDI     R24, LOW(ee_product_information)
        LDI     R25, (ee_product_information) >> 8
        LDI     R16, 1
        LDI     R20, LOW((ee_product_information + 1))
        LDI     R21, HIGH((ee_product_information + 1))
        CALL    __eeput8_16
//  295 					strncpy(buffer_tx,"D000010400000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D000010400000000">`)
        LDI     R19, (`?<Constant "D000010400000000">`) >> 8
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  296 					strncpy(&buffer_tx[8],ID_buffer,9);
        LDI     R20, 9
        LDI     R21, 0
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R29:R28
        SUBI    R16, 248
        SBCI    R17, 255
        CALL    strncpy
//  297 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
//  298 					flags.id_confed = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x01
        STD     Z+1, R17
        ST      Z, R16
//  299 					ee_product_information.ID_factory_assigned = 1;
        LDI     R20, ((ee_product_information + 5) & 0xff) & 0xFF
        LDI     R21, (((ee_product_information + 5) >> 8) & 0xff) & 0xFF
        CALL    __eeget16_16
        ORI     R16, 0x01
        ADIW    R25:R24, 5
        MOVW    R21:R20, R25:R24
        CALL    __eeput16_16
//  300 					if( product_information.ID_factory_assigned == 0 ) system_reset();
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+5
        SBRC    R16, 0
        RJMP    ??id_frame_9
        CALL    system_reset
        RJMP    ??id_frame_9
//  301 				}
//  302 				else
//  303 				{
//  304 					buffer_tx[7] = 'E';
??id_frame_14:
        LDI     R16, 69
        STD     Y+7, R16
//  305 					strncpy(&buffer_tx[8],"00000000",9);
        LDI     R20, 9
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D000010400000000">` + 17))
        LDI     R19, HIGH((`?<Constant "D000010400000000">` + 17))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 248
        SBCI    R17, 255
        CALL    strncpy
//  306 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??id_frame_13
//  307 				}
//  308 			}
//  309 		break;
//  310 
//  311 		case '6':
//  312 			if(ee_product_information.ID_confed)
??id_frame_3:
        LDI     R20, LOW((ee_product_information + 1))
        LDI     R21, HIGH((ee_product_information + 1))
        CALL    __eeget8_16
        TST     R16
        BRNE    $+2+2
        RJMP    ??id_frame_9
//  313 			{
//  314 				if((g_reception_buffer[8] == ee_ID[0])
//  315 					&& (g_reception_buffer[9] == ee_ID[1])
//  316 					&& (g_reception_buffer[10] == ee_ID[2])
//  317 					&& (g_reception_buffer[11] == ee_ID[3])
//  318 				 	&& (g_reception_buffer[12] == ee_ID[4])
//  319 				 	&& (g_reception_buffer[13] == ee_ID[5])
//  320 				 	&& (g_reception_buffer[14] == ee_ID[6])
//  321 				 	&& (g_reception_buffer[15] == ee_ID[7]))
        LDS     R17, (g_reception_buffer + 8)
        LDI     R20, LOW(ee_ID)
        LDI     R21, (ee_ID) >> 8
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 9)
        LDI     R20, LOW((ee_ID + 1))
        LDI     R21, HIGH((ee_ID + 1))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 10)
        LDI     R20, LOW((ee_ID + 2))
        LDI     R21, HIGH((ee_ID + 2))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 11)
        LDI     R20, LOW((ee_ID + 3))
        LDI     R21, HIGH((ee_ID + 3))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 12)
        LDI     R20, LOW((ee_ID + 4))
        LDI     R21, HIGH((ee_ID + 4))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 13)
        LDI     R20, LOW((ee_ID + 5))
        LDI     R21, HIGH((ee_ID + 5))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 14)
        LDI     R20, LOW((ee_ID + 6))
        LDI     R21, HIGH((ee_ID + 6))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 15)
        LDI     R20, LOW((ee_ID + 7))
        LDI     R21, HIGH((ee_ID + 7))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
//  322 				{
//  323 					// ID configuration
//  324 					state.programming = 1;
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x01
        STD     Z+1, R17
        ST      Z, R16
//  325 					flags.png = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x20
        STD     Z+1, R17
        ST      Z, R16
//  326 					//send_frame_pp_ext_broad("D200013481040000",TRANS_DELAY);
//  327           state.main_state = STATE_PROGRAMMING;
        LDI     R16, 0
        LDI     R17, 32
        STS     (state + 2), R16
        STS     (state + 3), R17
//  328 					//KO_SCENARIO_TRANS_DELAY = 80;
//  329 					diagnostic_frame();
        RCALL   diagnostic_frame
//  330 					//KO_SCENARIO_TRANS_DELAY = 80;
//  331 					flags.AA_received = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R17, 0xBF
        STD     Z+3, R17
        STD     Z+2, R16
//  332 					flags.parameter_setting_wrong = 0;
        LDD     R16, Z+4
        LDD     R17, Z+5
        ANDI    R16, 0xFD
        STD     Z+5, R17
        STD     Z+4, R16
//  333 					flags.parameter_write_right = 0;
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R16, 0x7F
        STD     Z+3, R17
        STD     Z+2, R16
        RJMP    ??id_frame_9
//  334 					//png_dian
//  335 				}
//  336 			}
//  337 		break;
//  338 
//  339 		case '7':
//  340 			if(ee_product_information.ID_confed)
??id_frame_4:
        LDI     R20, LOW((ee_product_information + 1))
        LDI     R21, HIGH((ee_product_information + 1))
        CALL    __eeget8_16
        TST     R16
        BRNE    $+2+2
        RJMP    ??id_frame_9
//  341 			{
//  342 				if((g_reception_buffer[8] == ee_ID[0])
//  343 					&& (g_reception_buffer[9] == ee_ID[1])
//  344 					&& (g_reception_buffer[10] == ee_ID[2])
//  345 					&& (g_reception_buffer[11] == ee_ID[3])
//  346 				 	&& (g_reception_buffer[12] == ee_ID[4])
//  347 				 	&& (g_reception_buffer[13] == ee_ID[5])
//  348 				 	&& (g_reception_buffer[14] == ee_ID[6])
//  349 				 	&& (g_reception_buffer[15] == ee_ID[7]))
        LDS     R17, (g_reception_buffer + 8)
        LDI     R20, LOW(ee_ID)
        LDI     R21, (ee_ID) >> 8
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 9)
        LDI     R20, LOW((ee_ID + 1))
        LDI     R21, HIGH((ee_ID + 1))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 10)
        LDI     R20, LOW((ee_ID + 2))
        LDI     R21, HIGH((ee_ID + 2))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 11)
        LDI     R20, LOW((ee_ID + 3))
        LDI     R21, HIGH((ee_ID + 3))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 12)
        LDI     R20, LOW((ee_ID + 4))
        LDI     R21, HIGH((ee_ID + 4))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 13)
        LDI     R20, LOW((ee_ID + 5))
        LDI     R21, HIGH((ee_ID + 5))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 14)
        LDI     R20, LOW((ee_ID + 6))
        LDI     R21, HIGH((ee_ID + 6))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
        LDS     R17, (g_reception_buffer + 15)
        LDI     R20, LOW((ee_ID + 7))
        LDI     R21, HIGH((ee_ID + 7))
        CALL    __eeget8_16
        CP      R17, R16
        BREQ    $+2+2
        RJMP    ??id_frame_9
//  350 				{
//  351 					// ID configuration
//  352 					// only send diagnostic frame
//  353 					//TRANS_DELAY = 60;							//too big cause PnG timing error, too small cause interface chip lost frames
//  354           state.main_state = STATE_TEST;
        LDI     R16, 1
        LDI     R17, 32
        STS     (state + 2), R16
        STS     (state + 3), R17
//  355 					diagnostic_frame();			//modified 2009 1 9
        RCALL   diagnostic_frame
        RJMP    ??id_frame_9
//  356 				}
//  357 			}
//  358     break;
//  359 
//  360 		case '8':
//  361 			//ID request not conf
//  362 			if(flags.id_ack == 0)
??id_frame_5:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRC    R16, 1
        RJMP    ??id_frame_9
//  363 			{
//  364 				if(flags.id_request_enabled)
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 2
        RJMP    ??id_frame_9
//  365 				{
//  366 					if(product_information.ID_confed)
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+1
        TST     R16
        BREQ    ??id_frame_9
//  367 					{
//  368 						if(product_information.conf_type == 3 )
        LD      R16, Z
        CPI     R16, 3
        BRNE    ??id_frame_9
//  369 						{
//  370 							asm("nop");
        nop
//  371 							send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??id_frame_13
//  372 						}
//  373 					}
//  374 				}
//  375 			}
//  376 		break;
//  377 
//  378 		case '9':
//  379 			//ID request conf
//  380 			if(flags.id_ack == 0)
??id_frame_6:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRC    R16, 1
        RJMP    ??id_frame_9
//  381 			{
//  382 				if(flags.id_request_enabled)
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 2
        RJMP    ??id_frame_9
//  383 				{
//  384 					if(product_information.ID_confed)
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+1
        TST     R16
        BREQ    ??id_frame_9
//  385 					{
//  386 						if(product_information.conf_type == 0 || product_information.conf_type == 1 || product_information.conf_type == 2)
        LD      R16, Z
        TST     R16
        BREQ    ??id_frame_15
        LD      R16, Z
        CPI     R16, 1
        BREQ    ??id_frame_15
        LD      R16, Z
        CPI     R16, 2
        BRNE    ??id_frame_9
//  387 						{
//  388 							asm("nop");
??id_frame_15:
        nop
//  389 							send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??id_frame_13
//  390 						}
//  391 					}
//  392 				}
//  393 			}
//  394 		break;
//  395 
//  396 		case 'A':
//  397 			if(strcmp(&buffer_tx[8],&g_reception_buffer[8]) == 0)
??id_frame_7:
        LDI     R18, LOW((g_reception_buffer + 8))
        LDI     R19, HIGH((g_reception_buffer + 8))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 248
        SBCI    R17, 255
        CALL    strcmp
        OR      R16, R17
        BRNE    ??id_frame_9
//  398 				flags.id_ack = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x02
        RJMP    ??id_frame_12
//  399 		break;
//  400 
//  401 		case 'B':
//  402 		  flags.id_ack = 0;
??id_frame_8:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0xFD
        STD     Z+1, R17
        ST      Z, R16
//  403 
//  404 			flags.id_request_enabled = 1;
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x04
??id_frame_12:
        STD     Z+1, R17
        ST      Z, R16
//  405 			if( product_information.conf_type == 3 )
//  406 			{
//  407 				//send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  408 			}
//  409 		break;
//  410 /*
//  411 		case 'C':
//  412 			if(g_asc_reception_buffer[4] == 0x00 && g_asc_reception_buffer[5] == 0x00 && g_asc_reception_buffer[6] == 0x00 && g_asc_reception_buffer[7] == 0x00)
//  413 			{
//  414 				product_information.ID_factory_assigned = 0; // for reassigned ID
//  415 			}
//  416 		break;
//  417 */		
//  418 		default: break;
//  419 	}
//  420 }
??id_frame_9:
        ADIW    R29:R28, 17
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock5

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D000010400000000">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D000010400000000"`
        DS8 9
        REQUIRE `?<Initializer for <Constant "00000000">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D200013415000000">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200013415000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200013416000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200013483000000"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C0000AA"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D2000134830000EE"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D200013410100000"`
        DS8 9
        REQUIRE `?<Initializer for <Constant "FFFFFFFF">>`
        DS8 8
        REQUIRE `?<Initializer for <Constant "C0000AA">>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D20001348C0001FA">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C0001FA"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C0000FA"`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D20001348B020381">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348B020381"`
        DS8 3
        REQUIRE `?<Initializer for <Constant "01">>`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348B01AF02"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348B000000"`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D20001348C0000AB">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C0000AB"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C0000EE"`
        DS8 17
        REQUIRE `?<Initializer for <Constant "D20001348C000A09"`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
??ID_buffer:
        DS8 9
        REQUIRE `?<Initializer for ID_buffer>`
//  421 

        RSEG CODE:CODE:NOROOT(1)
//  422 void parameter_set(unsigned char data)
parameter_set:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function parameter_set
//  423 {
//  424 	switch(data)
//  425 	{
//  426 		//case 0x80:
//  427 			
//  428 	}
//  429 }
        RET
        CFI EndBlock cfiBlock6
//  430 

        RSEG CODE:CODE:NOROOT(1)
//  431 void diagnostic_frame(void)
diagnostic_frame:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function diagnostic_frame
//  432 {
        FUNCALL diagnostic_frame, configuration_answer_frame
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, configuration_answer_frame
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, configuration_answer_frame
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, configuration_answer_frame
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, ko_answer_all
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, configuration_answer_frame
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL diagnostic_frame, frame_buffer_clear
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        SBIW    R29:R28, 17
        CFI CFA_Y Y+17
//  433 	unsigned char i;
//  434 	unsigned char buffer_tx[17] = "D000010400059876";
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D000010400059876">`)
        LDI     R31, (`?<Constant "D000010400059876">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
//  435 
//  436   __disable_interrupt();
        CLI
//  437 	flags.diagnostic = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ORI     R16, 0x10
        STD     Z+1, R17
        ST      Z, R16
//  438 	//configuration_answer_frame(0x80);
//  439 	//send_frame_pp_ext_broad("D200013480052322",1);
//  440 	configuration_answer_frame(0x80);
        LDI     R16, 128
        RCALL   configuration_answer_frame
//  441 	configuration_answer_frame(0x81);
        LDI     R16, 129
        RCALL   configuration_answer_frame
//  442 	configuration_answer_frame(0x83);
        LDI     R16, 131
        RCALL   configuration_answer_frame
//  443 	configuration_answer_frame(0x86);
        LDI     R16, 134
        RCALL   configuration_answer_frame
//  444 	//id_frame('3',1);
//  445   for(i=0;i<8;i++)
        LDI     R18, 0
        RJMP    ??diagnostic_frame_0
//  446   {
//  447     buffer_tx[8+i] = ee_ID[i];
??diagnostic_frame_1:
        LDI     R19, 0
        LDI     R20, LOW(ee_ID)
        LDI     R21, (ee_ID) >> 8
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeget8_16
        MOVW    R31:R30, R29:R28
        ADD     R30, R18
        ADC     R31, R19
        STD     Z+8, R16
//  448   }
        INC     R18
??diagnostic_frame_0:
        CPI     R18, 8
        BRCS    ??diagnostic_frame_1
//  449 	send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
//  450   ko_answer_all();
        CALL    ko_answer_all
//  451 	configuration_answer_frame(0x8C);
        LDI     R16, 140
        RCALL   configuration_answer_frame
//  452 	frame_buffer_clear();
        RCALL   frame_buffer_clear
//  453   __enable_interrupt();
        SEI
//  454 	flags.diagnostic = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0xEF
        STD     Z+1, R17
        ST      Z, R16
//  455 }
        ADIW    R29:R28, 17
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock7
//  456 
//  457 //unsigned char data[7];

        RSEG CODE:CODE:NOROOT(1)
//  458 void configuration_setting_frame(unsigned char value)
configuration_setting_frame:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function configuration_setting_frame
//  459 {
        FUNCALL configuration_setting_frame, PIR_SENSE_SET
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, US_SENSE_SET
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_ee_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_ee_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_ee_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, configuration_answer_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, configuration_checking
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, strncpy
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, manual_reception_buffer_clear
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, KO_setting_procedure
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, configuration_procedure
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, KO_answer_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_KO
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, parameter_setting_error_answer
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, write_parameter_scenario
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, parameter_setting_error_answer
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, parameter_setting_error_answer
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, address_setting_error_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_setting_frame, address_setting_error_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 17
        CFI CFA_Y Y+21
//  460 	unsigned char i;
//  461 	unsigned char buffer_tx[17];			// 20090216
//  462 	unsigned int write_parameter_resutl = 1;
//  463   unsigned char flag_configurator;
//  464 	//unsigned char *p_KO = &KO_conf;
//  465 	//unsigned char *p_ee_KO = &ee_KO_conf;
//  466 
//  467 	switch (value)
        SUBI    R16, 128
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_0
        DEC     R16
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_1
        DEC     R16
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_3
        SUBI    R16, 8
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_4
        DEC     R16
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_5
        DEC     R16
        BRNE    $+2+2
        RJMP    ??configuration_setting_frame_6
        SUBI    R16, 136
        BREQ    ??configuration_setting_frame_7
        DEC     R16
        BREQ    ??configuration_setting_frame_8
        RJMP    ??configuration_setting_frame_9
??configuration_setting_frame_7:
        LDS     R16, (g_asc_reception_buffer + 7)
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 4
        BRCS    $+2+2
        RJMP    ??configuration_setting_frame_9
        LDS     R16, (g_asc_reception_buffer + 7)
        STS     (KO_conf + 20), R16
//  468 	{
//  469 		case 0x15:
//  470 			if(g_asc_reception_buffer[7] >= 0 && g_asc_reception_buffer[7] <= 3)
//  471 			{
//  472 				KO_conf.PirSens = g_asc_reception_buffer[7];
//  473 				ee_KO_conf.PirSens = g_asc_reception_buffer[7];
        LDS     R16, (g_asc_reception_buffer + 7)
        LDI     R20, LOW((ee_KO_conf + 20))
        LDI     R21, HIGH((ee_KO_conf + 20))
        CALL    __eeput8_16
//  474 				KO_conf.USSens = g_asc_reception_buffer[7];
        LDS     R16, (g_asc_reception_buffer + 7)
        STS     (KO_conf + 21), R16
//  475 				ee_KO_conf.USSens = g_asc_reception_buffer[7];
        LDS     R16, (g_asc_reception_buffer + 7)
        LDI     R20, LOW((ee_KO_conf + 21))
        LDI     R21, HIGH((ee_KO_conf + 21))
        CALL    __eeput8_16
//  476 				PIR_SENSE_SET();
        CALL    PIR_SENSE_SET
//  477 				US_SENSE_SET();
        CALL    US_SENSE_SET
//  478 				strncpy(buffer_tx,"D200013415000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D200013415000000">`)
        LDI     R19, (`?<Constant "D200013415000000">`) >> 8
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  479 				buffer_tx[14] = g_reception_buffer[14];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+14
        STD     Y+14, R16
//  480 				buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
        STD     Y+15, R16
//  481 				send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??configuration_setting_frame_10:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
        RJMP    ??configuration_setting_frame_9
//  482 			}
??configuration_setting_frame_8:
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 60
        BRCS    $+2+2
        RJMP    ??configuration_setting_frame_9
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 60
        BRCS    $+2+2
        RJMP    ??configuration_setting_frame_9
//  483 		break;
//  484 		
//  485 		case 0x16:
//  486 			//#define INDEX_HOURS 10
//  487 			//#define INDEX_MINUTES 11
//  488 			//#define INDEX_SECONDS 12
//  489 			if(g_asc_reception_buffer[6] <= 0x3B && g_asc_reception_buffer[7] <= 0x3B)
//  490 			{
//  491 				write_KO(INDEX_HOURS,g_asc_reception_buffer[5]);
        LDS     R17, (g_asc_reception_buffer + 5)
        LDI     R16, 10
        CALL    write_KO
//  492 				write_ee_KO(INDEX_HOURS,g_asc_reception_buffer[5]);
        LDS     R17, (g_asc_reception_buffer + 5)
        LDI     R16, 10
        CALL    write_ee_KO
//  493 				
//  494 				write_KO(INDEX_MINUTES,g_asc_reception_buffer[6]);
        LDS     R17, (g_asc_reception_buffer + 6)
        LDI     R16, 11
        CALL    write_KO
//  495 				write_ee_KO(INDEX_MINUTES,g_asc_reception_buffer[6]);
        LDS     R17, (g_asc_reception_buffer + 6)
        LDI     R16, 11
        CALL    write_ee_KO
//  496 				
//  497 				write_KO(INDEX_SECONDS,g_asc_reception_buffer[7]);
        LDS     R17, (g_asc_reception_buffer + 7)
        LDI     R16, 12
        CALL    write_KO
//  498 				write_ee_KO(INDEX_SECONDS,g_asc_reception_buffer[7]);
        LDS     R17, (g_asc_reception_buffer + 7)
        LDI     R16, 12
        CALL    write_ee_KO
//  499 				
//  500 				strncpy(buffer_tx,"D200013416000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 17))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 17))
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  501 				strncpy(&buffer_tx[10],&g_reception_buffer[10],7);
        LDI     R20, 7
        LDI     R21, 0
        LDI     R18, LOW((g_reception_buffer + 10))
        LDI     R19, HIGH((g_reception_buffer + 10))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 246
        SBCI    R17, 255
        CALL    strncpy
        LDS     R24, (KO_conf + 12)
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
        LDS     R20, (KO_conf + 11)
        LDI     R21, 0
        LDI     R16, 60
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        ADD     R24, R16
        ADC     R25, R17
        ADC     R26, R18
        ADC     R27, R18
        LDS     R16, (KO_conf + 10)
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R20, 16
        LDI     R21, 14
        LDI     R22, 0
        LDI     R23, 0
        CALL    ?L_EC_MUL_L03
        ADD     R24, R16
        ADC     R25, R17
        ADC     R26, R18
        ADC     R27, R19
        LDI     R30, LOW(Delay_Time_set)
        LDI     R31, (Delay_Time_set) >> 8
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
//  502 
//  503 				Delay_Time_set =  KO_conf.Seconds + (unsigned long int)(KO_conf.Minutes*60) + (unsigned long int)(KO_conf.Hours)*3600;
//  504 				Time_delay.timer_delay_set.count = Delay_Time_set;
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDI     R30, LOW(Time_delay)
        LDI     R31, (Time_delay) >> 8
        STD     Z+26, R16
        STD     Z+27, R17
        STD     Z+28, R18
        STD     Z+29, R19
//  505 				
//  506 				send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??configuration_setting_frame_10
//  507 			}
//  508 			
//  509 		break;
//  510 		
//  511     case 0x80:
//  512 			if(product_information.ID_factory_assigned == 0)
??configuration_setting_frame_0:
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+5
        SBRC    R16, 0
        RJMP    ??configuration_setting_frame_9
//  513 			{
//  514       	for(i=0;i<6;i++)
        LDI     R18, 0
??configuration_setting_frame_11:
        CPI     R18, 6
        BRCS    $+2+2
        RJMP    ??configuration_setting_frame_9
//  515       	{
//  516         	ee_parameter.device_modle[i] = g_reception_buffer[i+10];
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        LDD     R16, Z+10
        LDI     R20, LOW(ee_parameter)
        LDI     R21, (ee_parameter) >> 8
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeput8_16
//  517       	}
        INC     R18
        RJMP    ??configuration_setting_frame_11
//  518 			}
//  519     break;
//  520 
//  521 		case 0x81:
//  522 			if(product_information.ID_factory_assigned == 0)
??configuration_setting_frame_1:
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+5
        SBRC    R16, 0
        RJMP    ??configuration_setting_frame_9
//  523 			{
//  524 				for(i=0;i<6;i++)
        LDI     R18, 0
??configuration_setting_frame_12:
        CPI     R18, 6
        BRCS    $+2+2
        RJMP    ??configuration_setting_frame_9
//  525       	{
//  526 					ee_parameter.software_version[i] = g_reception_buffer[i+10];
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        LDD     R16, Z+10
        LDI     R20, LOW((ee_parameter + 6))
        LDI     R21, HIGH((ee_parameter + 6))
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeput8_16
//  527       	}
        INC     R18
        RJMP    ??configuration_setting_frame_12
//  528 			}
//  529 		break;
//  530 
//  531 		case 0x82:
//  532 			if(product_information.ID_factory_assigned == 0)
??configuration_setting_frame_2:
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+5
        SBRC    R16, 0
        RJMP    ??configuration_setting_frame_9
//  533 			{
//  534 				for(i=0;i<6;i++)
        LDI     R18, 0
        RJMP    ??configuration_setting_frame_13
//  535       	{
//  536 					ee_parameter.hardware_version[i] = g_reception_buffer[i+10];
??configuration_setting_frame_14:
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        LDD     R16, Z+10
        LDI     R20, LOW((ee_parameter + 12))
        LDI     R21, HIGH((ee_parameter + 12))
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeput8_16
//  537       	}
        INC     R18
??configuration_setting_frame_13:
        CPI     R18, 6
        BRCS    ??configuration_setting_frame_14
//  538       	configuration_answer_frame(0x82);
        LDI     R16, 130
        RCALL   configuration_answer_frame
        RJMP    ??configuration_setting_frame_9
//  539 			}
//  540 		break;
//  541 
//  542 		case 0x83:
//  543 			switch(state.main_state)
??configuration_setting_frame_3:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_setting_frame_9
//  544 			{		
//  545 				case STATE_PROGRAMMING_DURING:
//  546 					strncpy(&temp_variable.configurators,&g_reception_buffer[10],7);
        LDI     R20, 7
        LDI     R21, 0
        LDI     R18, LOW((g_reception_buffer + 10))
        LDI     R19, HIGH((g_reception_buffer + 10))
        LDI     R16, LOW((temp_variable + 7))
        LDI     R17, HIGH((temp_variable + 7))
        CALL    strncpy
//  547           //temp_variable.configurators[0] =
//  548 					flag_configurator = configuration_checking(&temp_variable.configurators);
//  549 					if(flag_configurator)
        LDI     R16, LOW((temp_variable + 7))
        LDI     R17, HIGH((temp_variable + 7))
        CALL    configuration_checking
        TST     R16
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        BREQ    ??configuration_setting_frame_15
//  550 					{
//  551 						flags.virtul_configuration_right = 1;
        ORI     R16, 0x40
        STD     Z+1, R17
        ST      Z, R16
//  552 						strncpy(buffer_tx,"D200013483000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 34))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 34))
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  553 						strncpy(&buffer_tx[10],&temp_variable.configurators,7);
        LDI     R20, 7
        LDI     R21, 0
        LDI     R18, LOW((temp_variable + 7))
        LDI     R19, HIGH((temp_variable + 7))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 246
        SBCI    R17, 255
        CALL    strncpy
//  554 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
//  555 						strncpy(buffer_tx,"D20001348C0000AA",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 51))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 51))
        RJMP    ??configuration_setting_frame_16
//  556 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  557 					}
//  558 					else
//  559 					{
//  560 						flags.virtul_configuration_right = 0;
??configuration_setting_frame_15:
        ANDI    R16, 0xBF
        STD     Z+1, R17
        ST      Z, R16
//  561 						strncpy(buffer_tx,"D2000134830000EE",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 68))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 68))
??configuration_setting_frame_16:
        MOVW    R17:R16, R29:R28
        CALL    strncpy
//  562 						send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        RCALL   send_frame_pp_ext_broad
//  563 					}
//  564           manual_reception_buffer_clear();
        CALL    manual_reception_buffer_clear
        RJMP    ??configuration_setting_frame_9
//  565 				break;
//  566 
//  567 				default:break;
//  568 			}
//  569 		break;
//  570 		
//  571 		case 0x8B:
//  572       if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_setting_frame_4:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_setting_frame_9
//  573 				KO_setting_procedure();
        CALL    KO_setting_procedure
        RJMP    ??configuration_setting_frame_9
//  574 		break;
//  575 		
//  576 		case 0x8C:
//  577 			configuration_procedure();
??configuration_setting_frame_5:
        CALL    configuration_procedure
        RJMP    ??configuration_setting_frame_9
//  578 		break;
//  579 
//  580 		case 0x8D:
//  581 			if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_setting_frame_6:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_setting_frame_9
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+7
        SBRC    R16, 7
        RJMP    ??configuration_setting_frame_17
//  582 			{
//  583       	if(GetBit(g_asc_reception_buffer[7],7) == 0)
//  584       	{
//  585       	  //parameter writing
//  586 					if(g_asc_reception_buffer[CHANNEL] == 0x01)
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 1
        BRNE    ??configuration_setting_frame_18
//  587 					{
//  588 						if(product_information.conf_type == NONE_CONFED)
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??configuration_setting_frame_19
//  589       	  	{
//  590       	    	KO_answer_frame();
??configuration_setting_frame_20:
        RCALL   KO_answer_frame
        RJMP    ??configuration_setting_frame_9
//  591       	  	}
//  592 						else
//  593 						{
//  594 							write_parameter_resutl = write_KO(g_asc_reception_buffer[6],g_asc_reception_buffer[5]);
??configuration_setting_frame_19:
        LDS     R17, (g_asc_reception_buffer + 5)
        LDS     R16, (g_asc_reception_buffer + 6)
        CALL    write_KO
//  595 							if(write_parameter_resutl == OK)
        MOV     R18, R16
        OR      R18, R17
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        BRNE    ??configuration_setting_frame_21
//  596 							{
//  597 								flags.parameter_write_right = 1;
        LDD     R18, Z+2
        LDD     R19, Z+3
        ORI     R18, 0x80
        STD     Z+3, R19
        STD     Z+2, R18
        RJMP    ??configuration_setting_frame_22
//  598 							}
//  599 							else
//  600 							{
//  601 								flags.parameter_setting_wrong = 1;
??configuration_setting_frame_21:
        LDD     R18, Z+4
        LDD     R19, Z+5
        ORI     R18, 0x02
        STD     Z+5, R19
        STD     Z+4, R18
//  602 							}
//  603 							parameter_setting_error_answer(write_parameter_resutl);
??configuration_setting_frame_22:
        CALL    parameter_setting_error_answer
        RJMP    ??configuration_setting_frame_9
//  604 						}
//  605 					}
//  606 					else if(g_asc_reception_buffer[CHANNEL] >= 0x02 && g_asc_reception_buffer[CHANNEL] <= 0x11)
??configuration_setting_frame_18:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 2
        BRCS    ??configuration_setting_frame_23
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCC    ??configuration_setting_frame_23
//  607 					{
//  608 						if(ee_scenario[g_asc_reception_buffer[CHANNEL] - 2].confed == 0 && flags.scenario_scs_confed == 0)
        LDI     R18, LOW((ee_scenario - 8))
        LDI     R19, HIGH((ee_scenario - 8))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??configuration_setting_frame_24
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 6
        RJMP    ??configuration_setting_frame_20
//  609 						{
//  610 							KO_answer_frame();
//  611 						}
//  612 						else
//  613 						{
//  614 							write_parameter_resutl = write_parameter_scenario();
??configuration_setting_frame_24:
        CALL    write_parameter_scenario
//  615 							parameter_setting_error_answer(write_parameter_resutl);
        RJMP    ??configuration_setting_frame_22
//  616 						}
//  617 					}
//  618       	  else
//  619       	  {
//  620       	    parameter_setting_error_answer(write_parameter_resutl);
??configuration_setting_frame_23:
        LDI     R16, 1
        LDI     R17, 0
        RJMP    ??configuration_setting_frame_22
//  621       	  }
//  622 				}
//  623       	else
//  624       	{
//  625       	  //address writing
//  626       	  if(g_asc_reception_buffer[CHANNEL] == 0x81)
??configuration_setting_frame_17:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 129
        BREQ    $+2+2
        RJMP    ??configuration_setting_frame_25
        LDS     R16, product_information
        CPI     R16, 3
        BREQ    ??configuration_setting_frame_25
//  627       	  {
//  628       	    if(product_information.conf_type != NONE_CONFED)
//  629       	    {
//  630 							if( flags_muti_step.cen_system_step == 1 || product_information.cen_system )
        LDS     R16, flags_muti_step
        CPI     R16, 1
        BREQ    ??configuration_setting_frame_26
        LDS     R16, (product_information + 4)
        TST     R16
        BREQ    ??configuration_setting_frame_25
//  631 							{
//  632       	      	if(g_asc_reception_buffer[BYTE1] == 0x10)
??configuration_setting_frame_26:
        LDS     R16, (g_asc_reception_buffer + 5)
        CPI     R16, 16
        BRNE    ??configuration_setting_frame_9
//  633       	      	{
//  634       	        	if(g_asc_reception_buffer[BYTE2] >= 1 && g_asc_reception_buffer[BYTE2] <= 0xAF)
        LDS     R16, (g_asc_reception_buffer + 6)
        TST     R16
        BREQ    ??configuration_setting_frame_27
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 176
        BRCC    ??configuration_setting_frame_27
        LDI     R16, LOW(temp_product_information)
        LDI     R17, (temp_product_information) >> 8
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDI     R20, 7
        LDI     R21, 0
        CALL    ?ML_SRAM_SRAM_16_L07
//  635       	        	{
//  636       	          	temp_product_information = product_information;
//  637       	          	temp_product_information.conf_type = ADVANCED;
        LDI     R16, 2
        STS     temp_product_information, R16
//  638       	          	temp_product_information.cen_system = 1;
        LDI     R16, 1
        STS     (temp_product_information + 4), R16
//  639       	          	temp_product_information.local_A = g_reception_buffer[12];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STS     (temp_product_information + 2), R16
//  640       	          	temp_product_information.local_PL = g_reception_buffer[13];
        LDD     R16, Z+13
        STS     (temp_product_information + 3), R16
//  641       	          	flags_muti_step.cen_system_step = 2;
        LDI     R16, 2
        STS     flags_muti_step, R16
//  642       	          	flags.KO_conf_right = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x02
        STD     Z+3, R17
        STD     Z+2, R16
        RJMP    ??configuration_setting_frame_9
//  643       	        	}
//  644       	        	else
//  645       	        	{
//  646       	          	address_setting_error_frame();
??configuration_setting_frame_27:
        CALL    address_setting_error_frame
//  647       	          	if(flags_muti_step.cen_system_step == 1)
        LDS     R16, flags_muti_step
        CPI     R16, 1
        BRNE    ??configuration_setting_frame_9
//  648       	            	flags_muti_step.cen_system_step = CONF_WRONG;
        LDI     R16, 4
        STS     flags_muti_step, R16
        RJMP    ??configuration_setting_frame_9
//  649       	        	}
//  650       	      	}
//  651       	    	}
//  652 							else
//  653 							{
//  654 								address_setting_error_frame();
??configuration_setting_frame_25:
        CALL    address_setting_error_frame
//  655 							}
//  656 						}
//  657       	    else if(product_information.conf_type == NONE_CONFED)
//  658       	    {
//  659       	      address_setting_error_frame();
//  660       	    }
//  661       	  }
//  662       	  else
//  663       	  {
//  664       	    address_setting_error_frame();
//  665       	  }
//  666       	
//  667       	}
//  668 			}
//  669 		break;
//  670 
//  671 		default:break;
//  672 	}
//  673 }
??configuration_setting_frame_9:
        ADIW    R29:R28, 17
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock8
//  674 

        RSEG CODE:CODE:NOROOT(1)
//  675 void configuration_answer_frame(unsigned char value)
configuration_answer_frame:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function configuration_answer_frame
//  676 {
        FUNCALL configuration_answer_frame, StrToChar
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, strncpy
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, strncpy
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, strncpy
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, strncpy
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, put_s
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, CharToStr
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, KO_answer_frame
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, strncpy
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, address_answer_frame
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_answer_frame, parameter_answer_frame
        LOCFRAME CSTACK, 32, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 28
        CFI CFA_Y Y+32
        MOV     R24, R16
//  677 	unsigned char buffer_tx[17] = "D200013480000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D200013480000000">`)
        LDI     R31, (`?<Constant "D200013480000000">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
//  678 	unsigned char asc_buffer_tx[8];
//  679 
//  680 	unsigned char i;
//  681 	unsigned char buffer[3];
//  682 	
//  683 	for(i=0;i<8;i++)
        LDI     R26, 0
        RJMP    ??configuration_answer_frame_0
//  684 	{
//  685 		buffer[0] = buffer_tx[i * 2];
??configuration_answer_frame_1:
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        LDI     R16, 2
        MUL     R26, R16
        ADD     R30, R0
        ADC     R31, R1
        LD      R18, Z
        ST      Y, R18
//  686 		buffer[1] = buffer_tx[i * 2 + 1];
        LDD     R16, Z+1
        STD     Y+1, R16
//  687 		buffer[2] = 0;
        LDI     R16, 0
        STD     Y+2, R16
//  688 		asc_buffer_tx[i] = StrToChar(buffer);
        MOVW    R17:R16, R29:R28
        CALL    StrToChar
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 20
        LDI     R27, 0
        ADD     R30, R26
        ADC     R31, R27
        ST      Z, R16
//  689 	}
        INC     R26
??configuration_answer_frame_0:
        CPI     R26, 8
        BRCS    ??configuration_answer_frame_1
//  690 
//  691 	if(value == 0x10 && GetBit(g_asc_reception_buffer[5],4) == 0)
        CPI     R24, 16
        BRNE    ??configuration_answer_frame_2
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+5
        SBRC    R16, 4
        RJMP    ??configuration_answer_frame_2
//  692 	{
//  693 		strncpy(buffer_tx,"D200013410100000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 85))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 85))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        STS     (KO_conf + 35), R16
//  694 		KO_conf.DayLightLevLux[0] = DLL.calc_level&0x00FF;		//  low byte
//  695 		KO_conf.DayLightLevLux[1] = DLL.calc_level>>8;				//  higt byte
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        MOV     R16, R17
        STS     (KO_conf + 36), R16
//  696 		CharToStr(DLL.calc_level&0x00FF,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        CALL    CharToStr
//  697 		buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
//  698 		buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
//  699 		CharToStr(DLL.calc_level>>8,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        MOV     R16, R17
        CALL    CharToStr
//  700 		buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
//  701 		buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
//  702 		send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??configuration_answer_frame_3:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   send_frame_pp_ext_broad
        RJMP    ??configuration_answer_frame_4
//  703 	}
//  704 	else if(value == 0x15)
??configuration_answer_frame_2:
        CPI     R24, 21
        BRNE    ??configuration_answer_frame_5
//  705 	{
//  706 		strncpy(buffer_tx,"D200013415000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D200013415000000">`)
        LDI     R19, (`?<Constant "D200013415000000">`) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
//  707 		CharToStr(KO_conf.PirSens,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 20)
??configuration_answer_frame_6:
        CALL    CharToStr
//  708 		buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
//  709 		buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
??configuration_answer_frame_7:
        STD     Y+18, R16
//  710 		send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??configuration_answer_frame_3
//  711 	}
//  712 	else if(value == 0x16)
??configuration_answer_frame_5:
        CPI     R24, 22
        BRNE    ??configuration_answer_frame_8
//  713 	{
//  714 		strncpy(buffer_tx,"D200013416000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 17))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 17))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 10)
//  715 		CharToStr(KO_conf.Hours,buffer);
        CALL    CharToStr
//  716 		buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
//  717 		buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
//  718 		CharToStr(KO_conf.Minutes,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 11)
        CALL    CharToStr
//  719 		buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
//  720 		buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
//  721 		CharToStr(KO_conf.Seconds,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 12)
        RJMP    ??configuration_answer_frame_6
//  722 		buffer_tx[14] = buffer[0];
//  723 		buffer_tx[15] = buffer[1];
//  724 		send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  725 	}
//  726 	else if(value == 0x80)
??configuration_answer_frame_8:
        CPI     R24, 128
        BRNE    ??configuration_answer_frame_9
//  727 	{
//  728 			buffer_tx[9] = '0';
        LDI     R16, 48
        STD     Y+12, R16
//  729 			for(i=0;i<6;i++)
        LDI     R26, 0
        RJMP    ??configuration_answer_frame_10
//  730       {
//  731         buffer_tx[10+i] = ee_parameter.device_modle[i];
??configuration_answer_frame_11:
        LDI     R27, 0
        LDI     R20, LOW(ee_parameter)
        LDI     R21, (ee_parameter) >> 8
        ADD     R20, R26
        ADC     R21, R27
        CALL    __eeget8_16
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        ADD     R30, R26
        ADC     R31, R27
        STD     Z+10, R16
//  732       }
        INC     R26
??configuration_answer_frame_10:
        CPI     R26, 6
        BRCS    ??configuration_answer_frame_11
//  733 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??configuration_answer_frame_12:
        RJMP    ??configuration_answer_frame_3
//  734 	}
//  735 	else if(value == 0x81)
??configuration_answer_frame_9:
        CPI     R24, 129
        BRNE    ??configuration_answer_frame_13
//  736 	{
//  737 			buffer_tx[9] = '1';
        LDI     R16, 49
        STD     Y+12, R16
//  738 			for(i=0;i<6;i++)
        LDI     R26, 0
??configuration_answer_frame_14:
        CPI     R26, 6
        BRCC    ??configuration_answer_frame_12
//  739       {
//  740 				buffer_tx[10+i] = ee_parameter.software_version[i];
        LDI     R20, LOW((ee_parameter + 6))
        LDI     R21, HIGH((ee_parameter + 6))
        LDI     R27, 0
        ADD     R20, R26
        ADC     R21, R27
        CALL    __eeget8_16
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        ADD     R30, R26
        ADC     R31, R27
        STD     Z+10, R16
//  741       }
        INC     R26
        RJMP    ??configuration_answer_frame_14
//  742 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  743 	}
//  744 	else if(value == 0x82)
??configuration_answer_frame_13:
        CPI     R24, 130
        BRNE    ??configuration_answer_frame_15
//  745 	{
//  746 			buffer_tx[9] = '2';
        LDI     R16, 50
        STD     Y+12, R16
//  747 			for(i=0;i<6;i++)
        LDI     R26, 0
??configuration_answer_frame_16:
        CPI     R26, 6
        BRCC    ??configuration_answer_frame_12
//  748       {
//  749 				buffer_tx[10+i] = ee_parameter.hardware_version[i];
        LDI     R20, LOW((ee_parameter + 12))
        LDI     R21, HIGH((ee_parameter + 12))
        LDI     R27, 0
        ADD     R20, R26
        ADC     R21, R27
        CALL    __eeget8_16
        MOVW    R31:R30, R29:R28
        ADIW    R31:R30, 3
        ADD     R30, R26
        ADC     R31, R27
        STD     Z+10, R16
//  750       }
        INC     R26
        RJMP    ??configuration_answer_frame_16
//  751 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  752 	}
//  753 	else if(value == 0x83)
??configuration_answer_frame_15:
        CPI     R24, 131
        BRNE    ??configuration_answer_frame_17
//  754 	{
//  755       buffer_tx[9] = '3';
        LDI     R16, 51
        STD     Y+12, R16
//  756 			buffer_tx[10] = Configurators.A;
        LDI     R30, LOW(Configurators)
        LDI     R31, (Configurators) >> 8
        LDD     R16, Z+1
        STD     Y+13, R16
//  757 			buffer_tx[11] = Configurators.PL;
        LDD     R16, Z+2
        STD     Y+14, R16
//  758 			buffer_tx[12] = Configurators.M;
        LDD     R16, Z+3
        STD     Y+15, R16
//  759 			buffer_tx[13] = Configurators.S;
        LDD     R16, Z+4
        STD     Y+16, R16
//  760 			buffer_tx[14] = Configurators.T;
        LDD     R16, Z+5
        STD     Y+17, R16
//  761 			buffer_tx[15] = '0';
        LDI     R16, 48
        RJMP    ??configuration_answer_frame_7
//  762 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  763       //send_frame_pp_ext_broad("D200013483000000",TRANS_DELAY);
//  764 	}
//  765 	else if(value == 0x84)
??configuration_answer_frame_17:
        CPI     R24, 132
        BRNE    ??configuration_answer_frame_18
//  766 	{
//  767 			strncpy(&buffer_tx[8],"FFFFFFFF",9);
        LDI     R20, 9
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 102))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 102))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 245
??configuration_answer_frame_19:
        SBCI    R17, 255
        CALL    strncpy
//  768 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??configuration_answer_frame_3
//  769 	}
//  770 	else if(value == 0x85)
??configuration_answer_frame_18:
        CPI     R24, 133
        BRNE    ??configuration_answer_frame_20
//  771 	{
//  772 		//strncpy(&buffer_tx[0],"$24\r",5);
//  773 		buffer_tx[0] = '$';
        LDI     R16, 36
        STD     Y+3, R16
//  774 		buffer_tx[1] = '2';
        LDI     R16, 50
        STD     Y+4, R16
//  775 		buffer_tx[2] = '4';
        LDI     R16, 52
        STD     Y+5, R16
//  776 		buffer_tx[3] = 0x0D;
        LDI     R16, 13
        STD     Y+6, R16
//  777 		buffer_tx[4] = 0;
        LDI     R16, 0
        STD     Y+7, R16
//  778 		put_s(buffer_tx);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    put_s
        RJMP    ??configuration_answer_frame_4
//  779 			//delay_ms(100);
//  780 			/*
//  781 			for(i=0;i<DEEP;i++)
//  782 			{
//  783 				if(scs_frame[i].finished == 1)
//  784 				{
//  785 					scs_frame[i].finished = 0;
//  786 					if((scs_frame[i].byte[1] == '2') && ((scs_frame[i].byte[2] == '5')))
//  787 					{
//  788 						strncpy(&buffer_tx[10],&scs_frame[i].byte[3],7);
//  789 						break;
//  790 					}
//  791 				}
//  792 			}
//  793 			buffer_tx[9] = '5';
//  794 			//strncpy(&buffer_tx[10],&g_reception_SCS.pipe[2],7);
//  795 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  796 			*/
//  797 			
//  798 	}
//  799 	else if(value == 0x86)
??configuration_answer_frame_20:
        CPI     R24, 134
        BRNE    ??configuration_answer_frame_21
//  800 	{
//  801 			SetBit(asc_buffer_tx[7],0);		//not busy
//  802 			SetBit(asc_buffer_tx[7],1);	  //hardware failure
//  803 			SetBit(asc_buffer_tx[7],2);		//wrong configuration
//  804 			SetBit(asc_buffer_tx[7],3);		//system failure
//  805 	
//  806 			SetBit(asc_buffer_tx[7],5);			//device not disabled
//  807 			SetBit(asc_buffer_tx[7],6);			//ID right
        LDD     R16, Y+27
        ORI     R16, 0x6F
        STD     Y+27, R16
//  808 			
//  809 			if( product_information.conf_type == BASIC_PHYSICAL )
        LDS     R16, product_information
        TST     R16
        BRNE    ??configuration_answer_frame_22
//  810 			{
//  811         SetBit(asc_buffer_tx[7],4);
//  812 				SetBit(asc_buffer_tx[7],7);
        LDD     R16, Y+27
        ORI     R16, 0x90
        RJMP    ??configuration_answer_frame_23
//  813 			}
//  814 			else if(product_information.conf_type == BASIC_VIRTUAL)
??configuration_answer_frame_22:
        LDS     R16, product_information
        CPI     R16, 1
        BRNE    ??configuration_answer_frame_24
//  815 			{
//  816 				ClrBit(asc_buffer_tx[7],4);
//  817         SetBit(asc_buffer_tx[7],7);
        LDD     R16, Y+27
        ANDI    R16, 0xEF
        STD     Y+27, R16
        LDD     R16, Y+27
        ORI     R16, 0x80
        RJMP    ??configuration_answer_frame_23
//  818 			}
//  819       else if(product_information.conf_type == ADVANCED)
??configuration_answer_frame_24:
        LDS     R16, product_information
        CPI     R16, 2
        BRNE    ??configuration_answer_frame_25
//  820       {
//  821         ClrBit(asc_buffer_tx[7],4);
//  822         ClrBit(asc_buffer_tx[7],7);
        LDI     R16, 111
??configuration_answer_frame_23:
        STD     Y+27, R16
//  823       }
//  824 
//  825 			buffer_tx[9] = '6';
??configuration_answer_frame_25:
        LDI     R16, 54
        STD     Y+12, R16
//  826 			buffer_tx[10] = 'F';
        LDI     R16, 70
        STD     Y+13, R16
//  827 			buffer_tx[11] = 'F';
        STD     Y+14, R16
//  828 			buffer_tx[12] = 'F';
        STD     Y+15, R16
//  829 			buffer_tx[13] = 'F';
        STD     Y+16, R16
//  830       CharToStr(asc_buffer_tx[7],buffer);
        MOVW    R19:R18, R29:R28
        LDD     R16, Y+27
        CALL    CharToStr
//  831 			buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
//  832 			buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
//  833       asm("nop");
        nop
//  834 
//  835 			//buffer_tx[15] = '1';		//manual		
//  836 			//buffer_tx[14] = '6';
//  837 			//buffer_tx[15] = 'F';	
//  838 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        RJMP    ??configuration_answer_frame_3
//  839 	}
//  840 	else if(value == 0x88)
??configuration_answer_frame_21:
        CPI     R24, 136
        BRNE    $+2+2
        RJMP    ??configuration_answer_frame_4
//  841 	{
//  842 			//strncpy(&buffer_tx[9],"8000000",8);
//  843 			//send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  844 	}
//  845   else if(value == 0x89)
        CPI     R24, 137
        BRNE    ??configuration_answer_frame_26
//  846   {
//  847     SetBit(asc_buffer_tx[7],0);		//not busy
//  848 			SetBit(asc_buffer_tx[7],1);	  //hardware failure
//  849 			SetBit(asc_buffer_tx[7],2);		//wrong configuration
//  850 			SetBit(asc_buffer_tx[7],3);		//system failure
//  851 	
//  852 			SetBit(asc_buffer_tx[7],5);			//device not disabled
//  853 			SetBit(asc_buffer_tx[7],6);			//ID right
        LDD     R16, Y+27
        ORI     R16, 0x6F
        STD     Y+27, R16
//  854 			
//  855 			if( product_information.conf_type == BASIC_PHYSICAL )
        LDS     R16, product_information
        TST     R16
        BRNE    ??configuration_answer_frame_27
//  856 			{
//  857         SetBit(asc_buffer_tx[7],4);
//  858 				SetBit(asc_buffer_tx[7],7);
        LDD     R16, Y+27
        ORI     R16, 0x90
        RJMP    ??configuration_answer_frame_28
//  859 			}
//  860 			else if(product_information.conf_type == BASIC_VIRTUAL)
??configuration_answer_frame_27:
        LDS     R16, product_information
        CPI     R16, 1
        BRNE    ??configuration_answer_frame_29
//  861 			{
//  862 				ClrBit(asc_buffer_tx[7],4);
//  863         SetBit(asc_buffer_tx[7],7);
        LDD     R16, Y+27
        ANDI    R16, 0xEF
        STD     Y+27, R16
        LDD     R16, Y+27
        ORI     R16, 0x80
        RJMP    ??configuration_answer_frame_28
//  864 			}
//  865       else if(product_information.conf_type == ADVANCED)
??configuration_answer_frame_29:
        LDS     R16, product_information
        CPI     R16, 2
        BRNE    ??configuration_answer_frame_30
//  866       {
//  867         ClrBit(asc_buffer_tx[7],4);
//  868         ClrBit(asc_buffer_tx[7],7);
        LDI     R16, 111
??configuration_answer_frame_28:
        STD     Y+27, R16
//  869       }
//  870 
//  871 			buffer_tx[9] = '9';
??configuration_answer_frame_30:
        LDI     R16, 57
        STD     Y+12, R16
//  872 			buffer_tx[10] = 'F';
        LDI     R16, 70
        STD     Y+13, R16
//  873 			buffer_tx[11] = 'F';
        STD     Y+14, R16
//  874 			buffer_tx[12] = 'F';
        STD     Y+15, R16
//  875 			buffer_tx[13] = 'F';
        STD     Y+16, R16
//  876       CharToStr(asc_buffer_tx[7],buffer);
        MOVW    R19:R18, R29:R28
        LDD     R16, Y+27
        RJMP    ??configuration_answer_frame_6
//  877 			buffer_tx[14] = buffer[0];
//  878 			buffer_tx[15] = buffer[1];
//  879 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  880   }
//  881 	else if(value == 0x8B)
??configuration_answer_frame_26:
        CPI     R24, 139
        BRNE    ??configuration_answer_frame_31
//  882 	{
//  883     if(GetBit(g_asc_reception_buffer[5],1) == 0)    //every device
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+5
        SBRC    R16, 1
        RJMP    ??configuration_answer_frame_32
//  884     {
//  885 		  KO_answer_frame();
??configuration_answer_frame_33:
        RCALL   KO_answer_frame
        RJMP    ??configuration_answer_frame_4
//  886     }
//  887     else //device in programming/test state
//  888     {
//  889       if(state.main_state == STATE_PROGRAMMING_DURING || state.main_state == STATE_TEST_DURING)
??configuration_answer_frame_32:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    ??configuration_answer_frame_33
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BRNE    ??configuration_answer_frame_4
        RJMP    ??configuration_answer_frame_33
//  890       {
//  891         KO_answer_frame();
//  892       }
//  893     }
//  894 	}
//  895 	else if(value == 0x8C)
??configuration_answer_frame_31:
        CPI     R24, 140
        BRNE    ??configuration_answer_frame_34
//  896 	{
//  897 			strncpy(&buffer_tx[9],"C0000AA",8);
        LDI     R20, 8
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D200013415000000">` + 111))
        LDI     R19, HIGH((`?<Constant "D200013415000000">` + 111))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 244
        RJMP    ??configuration_answer_frame_19
//  898 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
//  899 	}
//  900 	else if(value == 0x8D)
??configuration_answer_frame_34:
        CPI     R24, 141
        BRNE    ??configuration_answer_frame_4
//  901 	{
//  902 			if(GetBit(g_asc_reception_buffer[7],7)) //address answer
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+7
        SBRS    R16, 7
        RJMP    ??configuration_answer_frame_35
//  903 			{
//  904         if(GetBit(g_asc_reception_buffer[5],1))
        LDD     R16, Z+5
        SBRS    R16, 1
        RJMP    ??configuration_answer_frame_36
//  905         {
//  906           if(state.main_state == STATE_PROGRAMMING_DURING || state.main_state == STATE_TEST_DURING)
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    ??configuration_answer_frame_36
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BRNE    ??configuration_answer_frame_4
//  907           {
//  908             address_answer_frame();
??configuration_answer_frame_36:
        RCALL   address_answer_frame
        RJMP    ??configuration_answer_frame_4
//  909           }
//  910         }
//  911         else
//  912         {
//  913           address_answer_frame();
//  914         }
//  915       }
//  916 			else //parameter request
//  917 			{
//  918 				parameter_answer_frame();
??configuration_answer_frame_35:
        RCALL   parameter_answer_frame
//  919 			}
//  920 	}
//  921 }
??configuration_answer_frame_4:
        ADIW    R29:R28, 28
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock9
//  922 

        RSEG CODE:CODE:NOROOT(1)
//  923 void configuration_receive_answer_frame(void)
configuration_receive_answer_frame:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function configuration_receive_answer_frame
//  924 {
        FUNCALL configuration_receive_answer_frame, led_blinking_normal
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_receive_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_receive_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
//  925 	switch(g_asc_reception_buffer[4])
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+4
        SUBI    R16, 128
        BREQ    ??configuration_receive_answer_frame_0
        SUBI    R16, 141
        BREQ    ??configuration_receive_answer_frame_1
        RJMP    ??configuration_receive_answer_frame_2
//  926 	{
//  927 		case 0x80:
//  928       state.main_state = STATE_NORMAL;
??configuration_receive_answer_frame_0:
        LDI     R16, 0
        STS     (state + 2), R16
        STS     (state + 3), R16
//  929 			led_blinking_normal();
        CALL    led_blinking_normal
//  930 			if(state.main_state == STATE_TEST_DURING)
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BRNE    ??configuration_receive_answer_frame_3
//  931 			{
//  932 				send_frame_pp_ext_broad("D20001348C0001FA",TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW(`?<Constant "D20001348C0001FA">`)
        LDI     R17, (`?<Constant "D20001348C0001FA">`) >> 8
??configuration_receive_answer_frame_4:
        RCALL   send_frame_pp_ext_broad
        RJMP    ??configuration_receive_answer_frame_2
//  933 			}
//  934       else if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_receive_answer_frame_3:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BRNE    ??configuration_receive_answer_frame_2
//  935       {
//  936         send_frame_pp_ext_broad("D20001348C0000FA",TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "D20001348C0001FA">` + 17))
        LDI     R17, HIGH((`?<Constant "D20001348C0001FA">` + 17))
        RJMP    ??configuration_receive_answer_frame_4
//  937       }
??configuration_receive_answer_frame_1:
        LDS     R16, (KO_conf + 1)
        CPI     R16, 2
        BRNE    ??configuration_receive_answer_frame_5
        LDS     R16, (KO_conf + 5)
        LDD     R17, Z+1
        CP      R16, R17
        BREQ    ??configuration_receive_answer_frame_6
??configuration_receive_answer_frame_5:
        LDS     R16, (KO_conf + 1)
        TST     R16
        BRNE    ??configuration_receive_answer_frame_2
        LDS     R16, (KO_conf + 2)
        LDD     R17, Z+1
        CP      R16, R17
        BRNE    ??configuration_receive_answer_frame_2
//  938 		break;
//  939 		
//  940 		case 0x0D:
//  941 		  if(((KO_conf.AddressType ==2)&&(KO_conf.Reference == g_asc_reception_buffer[1]))
//  942 					||((KO_conf.AddressType ==0)&&(KO_conf.DesAdd == g_asc_reception_buffer[1])))
//  943 			{
//  944 				//if(Time_delay.regulation.time_out == 1)
//  945 				//{
//  946 				//	Time_delay.regulation.time_out = 0;
//  947 				//	DLL.start_regulation = 0;
//  948 				//	ClrBit(KO_conf.status[0],Status_Regulationing);
//  949 				//}
//  950 				if((g_asc_reception_buffer[5] ==0x00)||(g_asc_reception_buffer[5] ==0x01))	
??configuration_receive_answer_frame_6:
        LDD     R16, Z+5
        TST     R16
        BREQ    ??configuration_receive_answer_frame_7
        LDD     R16, Z+5
        CPI     R16, 1
        BRNE    ??configuration_receive_answer_frame_8
//  951 				{
//  952 						if(g_asc_reception_buffer[5] == 0x00)
??configuration_receive_answer_frame_7:
        LDD     R16, Z+5
        TST     R16
        LDI     R26, LOW((Sensor_mode + 7))
        LDI     R27, HIGH((Sensor_mode + 7))
        LD      R16, X
        BRNE    ??configuration_receive_answer_frame_9
//  953 						{
//  954 							Sensor_mode.power_on_flag = 1;
        ORI     R16, 0x20
        ST      X, R16
//  955 							KO_conf.status[1] = g_asc_reception_buffer[6];		//reyno 0616
        LDD     R16, Z+6
        RJMP    ??configuration_receive_answer_frame_10
//  956 						}
//  957 						else
//  958 						{
//  959 							Sensor_mode.power_on_flag = 0;
??configuration_receive_answer_frame_9:
        ANDI    R16, 0xDF
        ST      X, R16
//  960 							KO_conf.status[1] = Status_OFF;		//reyno 0616
        LDI     R16, 0
??configuration_receive_answer_frame_10:
        STS     (KO_conf + 46), R16
//  961 						}
//  962 						///////////////////////////////////////////////
//  963 				}
//  964 				if(g_asc_reception_buffer[5] == 0x0D)							
??configuration_receive_answer_frame_8:
        LDD     R16, Z+5
        CPI     R16, 13
        BRNE    ??configuration_receive_answer_frame_2
//  965 				{
//  966 					//reyno 0612/////////////////////////////////////
//  967 					Sensor_mode.power_on_flag = 1;
        LDI     R26, LOW((Sensor_mode + 7))
        LDI     R27, HIGH((Sensor_mode + 7))
        LD      R16, X
        ORI     R16, 0x20
        ST      X, R16
//  968 					KO_conf.status[1] = g_asc_reception_buffer[6];
        LDD     R16, Z+6
        STS     (KO_conf + 46), R16
//  969 					/////////////////////////////////////////////////
//  970 					SCS_received.P2P_dimmer_flag = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+2
        ORI     R16, 0x02
        STD     Z+2, R16
//  971 					SCS_received.P2P_actuator_flag = 0;
        LDD     R16, Z+2
        ANDI    R16, 0xFE
        STD     Z+2, R16
//  972 				}
//  973 			}
//  974 		break;
//  975 
//  976 		default:break;
//  977 	}
//  978 }
??configuration_receive_answer_frame_2:
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock10
//  979 

        RSEG CODE:CODE:NOROOT(1)
//  980 void KO_answer_frame(void)
KO_answer_frame:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function KO_answer_frame
//  981 {
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, manual_reception_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, strncpy
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 20
        CFI CFA_Y Y+21
//  982   unsigned char i;
//  983   unsigned char temp;
//  984   volatile unsigned char buffer_tx[17];
//  985   unsigned char buffer[3];
//  986   unsigned char ko_channel = g_asc_reception_buffer[7];
        LDS     R24, (g_asc_reception_buffer + 7)
//  987 
//  988   ClrBit(ko_channel,7);
        ANDI    R24, 0x7F
//  989 
//  990 	strncpy(buffer_tx,"D20001348B020381",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D20001348B020381">`)
        LDI     R19, (`?<Constant "D20001348B020381">`) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
//  991   if(ko_channel > NUM_KO_TOTAL)
        CPI     R24, 18
        BRCS    ??KO_answer_frame_0
//  992   {
//  993     buffer_tx[10] = 'F';
        LDI     R16, 70
        STD     Y+13, R16
//  994     buffer_tx[11] = 'F';
        STD     Y+14, R16
//  995     buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
//  996     buffer_tx[13] = '4';
        LDI     R16, 52
        STD     Y+16, R16
//  997     temp = g_asc_reception_buffer[7];
        LDS     R22, (g_asc_reception_buffer + 7)
//  998     SetBit(temp,7);
//  999     CharToStr(temp,buffer);
        MOVW    R19:R18, R29:R28
        ORI     R22, 0x80
        MOV     R16, R22
        CALL    CharToStr
// 1000     buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1001     buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 1002     send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   send_frame_pp_ext_broad
        RJMP    ??KO_answer_frame_1
// 1003   }
// 1004   else
// 1005   {
// 1006     //if( GetBit(g_asc_reception_buffer[7],7) == 0 )
// 1007 		//{
// 1008 			if(ko_channel == 0x00)
??KO_answer_frame_0:
        TST     R24
        BREQ    $+2+2
        RJMP    ??KO_answer_frame_2
// 1009 			{
// 1010 				strncpy(buffer_tx,"D20001348B020381",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW(`?<Constant "D20001348B020381">`)
        LDI     R19, (`?<Constant "D20001348B020381">`) >> 8
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 1011         buffer_tx[10] = KO[0];
        LDI     R30, LOW(KO)
        LDI     R31, (KO) >> 8
        LD      R16, Z
        STD     Y+13, R16
// 1012         buffer_tx[11] = KO[1];
        LDD     R16, Z+1
        STD     Y+14, R16
// 1013         buffer_tx[12] = KO[2];
        LDD     R16, Z+2
        STD     Y+15, R16
// 1014         buffer_tx[13] = KO[3];
        LDD     R16, Z+3
        STD     Y+16, R16
// 1015 				if( product_information.conf_type == 3 )
        LDS     R16, product_information
        CPI     R16, 3
        BREQ    ??KO_answer_frame_3
// 1016 				{
// 1017 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1018 				}
// 1019 				else
// 1020 				{
// 1021 					strncpy(&buffer_tx[14],"01",3);
        LDI     R20, 3
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D20001348B020381">` + 17))
        LDI     R19, HIGH((`?<Constant "D20001348B020381">` + 17))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 239
        SBCI    R17, 255
        CALL    strncpy
// 1022 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??KO_answer_frame_3:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   send_frame_pp_ext_broad
// 1023 				}
// 1024 
// 1025 				strncpy(buffer_tx,"D20001348B01AF02",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D20001348B020381">` + 20))
        LDI     R19, HIGH((`?<Constant "D20001348B020381">` + 20))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 1026         temp = 0;
// 1027 				for(i=0;i<16;i++)
        LDI     R24, 0
        RJMP    ??KO_answer_frame_4
// 1028 				{
// 1029 					temp = 0x02 + i;
// 1030 					
// 1031 					if( ee_scenario[i].confed == 0)             //
// 1032 					{																																		//
// 1033 						SetBit(temp,7);																										//
// 1034 					}																																		//
// 1035 					else																																/////////////////
// 1036 					{																																		/////////////////
// 1037 						ClrBit(temp,7);																										/////////////////
??KO_answer_frame_5:
        ANDI    R22, 0x7F
// 1038 					}																																		
// 1039 					
// 1040 					CharToStr(temp,buffer);
??KO_answer_frame_6:
        MOVW    R19:R18, R29:R28
        MOV     R16, R22
        CALL    CharToStr
// 1041 					buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1042 					buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 1043 /*
// 1044 					/////////////////////////////////////////////////////////////////////////////////////
// 1045 					//             For solve the bug that interface always lost the first frame        //
// 1046 					if((temp == 0x02) || (temp == 0x82))																										/////////////////
// 1047 					{																																		/////////////////
// 1048 						if( ee_scenario[i].confed  == 0)						/////////////////
// 1049 							send_frame_pp_ext_broad("D20001348B01AF82",KO_SCENARIO_TRANS_DELAY);				/////////////////
// 1050 						else																															/////////////////
// 1051 							send_frame_pp_ext_broad("D20001348B01AF02",KO_SCENARIO_TRANS_DELAY);				/////////////////
// 1052 					}																																		/////////////////
// 1053 					/////////////////////////////////////////////////////////////////////////////////////
// 1054 */
// 1055 
// 1056 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);	
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   send_frame_pp_ext_broad
// 1057           //frame_buffer_clear();
// 1058           manual_reception_buffer_clear();
        CALL    manual_reception_buffer_clear
        INC     R24
??KO_answer_frame_4:
        CPI     R24, 16
        BRCS    $+2+2
        RJMP    ??KO_answer_frame_1
        MOV     R22, R24
        SUBI    R22, 254
        LDI     R18, LOW((ee_scenario + 6))
        LDI     R19, HIGH((ee_scenario + 6))
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??KO_answer_frame_5
        ORI     R22, 0x80
        RJMP    ??KO_answer_frame_6
// 1059 				}
// 1060 			}
// 1061 			else
// 1062 			{
// 1063 				if(ko_channel == 0x01)
??KO_answer_frame_2:
        CPI     R24, 1
        BRNE    ??KO_answer_frame_7
// 1064 				{
// 1065 					strncpy(buffer_tx,"D20001348B000000",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D20001348B020381">` + 37))
        LDI     R19, HIGH((`?<Constant "D20001348B020381">` + 37))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 1066           buffer_tx[10] = KO[0];
        LDI     R30, LOW(KO)
        LDI     R31, (KO) >> 8
        LD      R16, Z
        STD     Y+13, R16
// 1067           buffer_tx[11] = KO[1];
        LDD     R16, Z+1
        STD     Y+14, R16
// 1068           buffer_tx[12] = KO[2];
        LDD     R16, Z+2
        STD     Y+15, R16
// 1069           buffer_tx[13] = KO[3];
        LDD     R16, Z+3
        STD     Y+16, R16
// 1070 					if( product_information.conf_type == 3 )
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??KO_answer_frame_8
// 1071 					{
// 1072 						buffer_tx[14] = '8';
        LDI     R16, 56
        RJMP    ??KO_answer_frame_9
// 1073             buffer_tx[15] = '1';
// 1074 					}
// 1075 					else
// 1076 					{
// 1077 						buffer_tx[14] = '0';
??KO_answer_frame_8:
        LDI     R16, 48
??KO_answer_frame_9:
        STD     Y+17, R16
// 1078             buffer_tx[15] = '1';
        LDI     R16, 49
        RJMP    ??KO_answer_frame_10
// 1079 					}
// 1080           send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1081 				}
// 1082         else
// 1083         {
// 1084         if((ko_channel >= 2) && (ko_channel <= 17))
??KO_answer_frame_7:
        CPI     R24, 2
        BRCS    ??KO_answer_frame_11
        CPI     R24, 18
        BRCC    ??KO_answer_frame_11
// 1085 				{
// 1086 					strncpy(buffer_tx,"D20001348B01AF02",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D20001348B020381">` + 20))
        LDI     R19, HIGH((`?<Constant "D20001348B020381">` + 20))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 1087 					temp = ko_channel - 2;
        SUBI    R24, 2
        MOV     R22, R24
// 1088 					if( ee_scenario[temp].confed  == 0)
        LDI     R18, LOW((ee_scenario + 6))
        LDI     R19, HIGH((ee_scenario + 6))
        MOV     R20, R22
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??KO_answer_frame_12
// 1089 					{						
// 1090 						SetBit(temp,7);
        ORI     R22, 0x80
        RJMP    ??KO_answer_frame_13
// 1091 					}
// 1092 					else
// 1093 					{
// 1094 						ClrBit(temp,7);
??KO_answer_frame_12:
        ANDI    R22, 0x7F
// 1095 					}
// 1096           temp += 2;
// 1097 					CharToStr(temp,buffer);
??KO_answer_frame_13:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 254
        RJMP    ??KO_answer_frame_14
// 1098 					buffer_tx[14] = buffer[0];
// 1099 					buffer_tx[15] = buffer[1];
// 1100 					//if(i == 2)
// 1101 					//{
// 1102 						//send_frame_pp_ext_broad(buffer_tx,0);
// 1103 					//}
// 1104 					send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1105 				}
// 1106         else
// 1107         {
// 1108           buffer_tx[10] = 'F';
??KO_answer_frame_11:
        LDI     R16, 70
        STD     Y+13, R16
// 1109           buffer_tx[11] = 'F';
        STD     Y+14, R16
// 1110           buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 1111           buffer_tx[13] = '4';
        LDI     R16, 52
        STD     Y+16, R16
// 1112           temp = g_asc_reception_buffer[7];
        LDS     R22, (g_asc_reception_buffer + 7)
// 1113           SetBit(temp,7);
// 1114           CharToStr(temp,buffer);
        MOVW    R19:R18, R29:R28
        ORI     R22, 0x80
??KO_answer_frame_14:
        MOV     R16, R22
        CALL    CharToStr
// 1115           buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1116           buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
??KO_answer_frame_10:
        STD     Y+18, R16
// 1117           send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        RCALL   send_frame_pp_ext_broad
// 1118         }
// 1119         }
// 1120         //delay_ms(50);
// 1121         //manual_reception_buffer_clear();
// 1122         asm("nop");
        nop
// 1123 			}
// 1124 		//}
// 1125   }
// 1126 }
??KO_answer_frame_1:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock11
// 1127 

        RSEG CODE:CODE:NOROOT(1)
// 1128 void parameter_answer_frame(void)
parameter_answer_frame:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function parameter_answer_frame
// 1129 {
// 1130 	if(GetBit(g_asc_reception_buffer[5],1)) //ask for the programming or test state answer
        FUNCALL parameter_answer_frame, parameter_all_answer
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_answer_frame, parameter_specified_index_answer
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+5
        SBRS    R16, 1
        RJMP    ??parameter_answer_frame_0
// 1131 	{
// 1132 		if(state.main_state == STATE_TEST_DURING || state.main_state == STATE_PROGRAMMING_DURING)
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BREQ    ??parameter_answer_frame_1
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BRNE    ??parameter_answer_frame_2
// 1133 		{
// 1134 			if(g_asc_reception_buffer[7] == 0x00) //every key object
??parameter_answer_frame_1:
        LDS     R16, (g_asc_reception_buffer + 7)
        TST     R16
        BRNE    ??parameter_answer_frame_3
// 1135 			{
// 1136 	      parameter_all_answer();
??parameter_answer_frame_4:
        RCALL   parameter_all_answer
        RET
// 1137 	    }
// 1138 			else if(g_asc_reception_buffer[7] <= NUM_KO_TOTAL)
??parameter_answer_frame_3:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCC    ??parameter_answer_frame_2
// 1139 			{
// 1140 				parameter_specified_index_answer();
??parameter_answer_frame_5:
        RCALL   parameter_specified_index_answer
        RET
// 1141 			}
// 1142 		}
// 1143 	}
// 1144 	else
// 1145 	{
// 1146 		if(g_asc_reception_buffer[7] == 0x00) //every key object
??parameter_answer_frame_0:
        LDS     R16, (g_asc_reception_buffer + 7)
        TST     R16
        BREQ    ??parameter_answer_frame_4
// 1147 		{
// 1148 	    parameter_all_answer();
// 1149 	  }
// 1150 		else if(g_asc_reception_buffer[7] <= NUM_KO_TOTAL)
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCS    ??parameter_answer_frame_5
// 1151 		{
// 1152 			parameter_specified_index_answer();
// 1153 		}
// 1154 	}
// 1155 }
??parameter_answer_frame_2:
        RET
        CFI EndBlock cfiBlock12
// 1156 

        RSEG CODE:CODE:NOROOT(1)
// 1157 void frame_buffer_clear(void)
frame_buffer_clear:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function frame_buffer_clear
// 1158 {
        MOVW    R19:R18, R27:R26
// 1159   for(unsigned char i=0;i<DEEP;i++)
        LDI     R20, 0
        RJMP    ??frame_buffer_clear_0
// 1160 	{
// 1161 		scs_frame[i].finished = 0;
// 1162     for(unsigned char j=0;j<NUMBER_BYTE_SCS;j++)
// 1163     {
// 1164       scs_frame[i].byte[j] = 0;
??frame_buffer_clear_1:
        MOVW    R27:R26, R31:R30
        ADD     R26, R16
        ADC     R27, R21
        ST      X, R21
// 1165     }
        INC     R16
??frame_buffer_clear_2:
        CPI     R16, 20
        BRCS    ??frame_buffer_clear_1
        INC     R20
??frame_buffer_clear_0:
        CPI     R20, 35
        BRCC    ??frame_buffer_clear_3
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R30, LOW(scs_frame)
        LDI     R31, (scs_frame) >> 8
        ADD     R30, R16
        ADC     R31, R17
        LDI     R16, 0
        STD     Z+22, R21
        RJMP    ??frame_buffer_clear_2
// 1166 	}
// 1167 }
??frame_buffer_clear_3:
        MOVW    R27:R26, R19:R18
        RET
        CFI EndBlock cfiBlock13
// 1168 

        RSEG CODE:CODE:NOROOT(1)
// 1169 void parameter_request_error_frame(void)
parameter_request_error_frame:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function parameter_request_error_frame
// 1170 {
        FUNCALL parameter_request_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 19, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        SBIW    R29:R28, 17
        CFI CFA_Y Y+17
// 1171 	unsigned char buffer_tx[17] = "D20001348D000000";
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348D000000">`)
        LDI     R31, (`?<Constant "D20001348D000000">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1172 		
// 1173 		buffer_tx[10] = g_reception_buffer[12];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+10, R16
// 1174   	buffer_tx[11] = g_reception_buffer[13];
        LDD     R16, Z+13
        STD     Y+11, R16
// 1175   	buffer_tx[12] = 'F';
        LDI     R16, 70
        STD     Y+12, R16
// 1176   	buffer_tx[13] = 'F';
        STD     Y+13, R16
// 1177   	buffer_tx[14] = g_reception_buffer[14];
        LDD     R16, Z+14
        STD     Y+14, R16
// 1178   	buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
        STD     Y+15, R16
// 1179   	send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);	
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_ext_broad
// 1180 }
        ADIW    R29:R28, 17
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock14
// 1181 

        RSEG CODE:CODE:NOROOT(1)
// 1182 void not_allowed_response(unsigned char ko_channel)
not_allowed_response:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function not_allowed_response
// 1183 {
        FUNCALL not_allowed_response, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL not_allowed_response, CharToStr
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL not_allowed_response, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        SBIW    R29:R28, 20
        CFI CFA_Y Y+20
        MOV     R22, R16
// 1184 	unsigned char buffer_tx[17] = "D20001348D000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        LDI     R30, LOW(`?<Constant "D20001348D000000">_1`)
        LDI     R31, (`?<Constant "D20001348D000000">_1`) >> 8
        MOVW    R17:R16, R19:R18
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1185   unsigned char buffer[3];
// 1186   unsigned char temp;
// 1187   	
// 1188   if(ko_channel == 0x01)
        CPI     R22, 1
        BRNE    ??not_allowed_response_0
// 1189   {
// 1190   	buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+12, R16
// 1191     buffer_tx[10] = KO[0];
        LDI     R30, LOW(KO)
        LDI     R31, (KO) >> 8
        LD      R16, Z
        STD     Y+13, R16
// 1192     buffer_tx[11] = KO[1];
        LDD     R16, Z+1
        STD     Y+14, R16
// 1193     buffer_tx[12] = KO[2];
        LDD     R16, Z+2
        STD     Y+15, R16
// 1194     buffer_tx[13] = KO[3];
        LDD     R16, Z+3
        STD     Y+16, R16
// 1195     buffer_tx[14] = '8';
        LDI     R16, 56
        STD     Y+17, R16
// 1196     buffer_tx[15] = '1';
        LDI     R16, 49
        RJMP    ??not_allowed_response_1
// 1197     send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1198   }
// 1199   else if(ko_channel <= NUM_KO_TOTAL)
??not_allowed_response_0:
        CPI     R22, 18
        BRCC    ??not_allowed_response_2
// 1200   {
// 1201 		buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+12, R16
// 1202   	buffer_tx[10] = '0';
        LDI     R16, 48
        STD     Y+13, R16
// 1203   	buffer_tx[11] = '1';
        LDI     R16, 49
        STD     Y+14, R16
// 1204   	buffer_tx[12] = 'A';
        LDI     R16, 65
        STD     Y+15, R16
// 1205     buffer_tx[13] = 'F';
        LDI     R16, 70
        STD     Y+16, R16
// 1206     temp = ko_channel;
// 1207     SetBit(temp,7);
// 1208     CharToStr(temp,buffer);
        MOVW    R19:R18, R29:R28
        ORI     R22, 0x80
        MOV     R16, R22
        CALL    CharToStr
// 1209     buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1210     buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
??not_allowed_response_1:
        STD     Y+18, R16
// 1211     send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1212   }
// 1213 }
??not_allowed_response_2:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock15
// 1214 

        RSEG CODE:CODE:NOROOT(1)
// 1215 void parameter_all_answer(void)
parameter_all_answer:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function parameter_all_answer
// 1216 {
        FUNCALL parameter_all_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_all_answer, manual_reception_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 20
        CFI CFA_Y Y+24
// 1217 	unsigned char buffer_tx[17] = "D20001348D000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348D000000">_2`)
        LDI     R31, (`?<Constant "D20001348D000000">_2`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1218   unsigned char buffer[3];
// 1219 	unsigned char i;
// 1220 
// 1221 				if(GetBit(g_asc_reception_buffer[5],2))
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+5
        SBRS    R16, 2
        RJMP    ??parameter_all_answer_0
// 1222 	      {
// 1223 	        if(g_asc_reception_buffer[6] == 0x00)
        LDS     R16, (g_asc_reception_buffer + 6)
        TST     R16
        BREQ    $+2+2
        RJMP    ??parameter_all_answer_1
// 1224 	        {
// 1225 	          //every managered parameter answer      eg: D2 00 01 43 8D 04 00 00
// 1226 	          if(product_information.conf_type == 0x03)
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??parameter_all_answer_2
// 1227 	          {
// 1228 	          	not_allowed_response(0x01);	
        LDI     R16, 1
        RCALL   not_allowed_response
        RJMP    ??parameter_all_answer_3
// 1229 	          }
// 1230 	          else
// 1231 	         	{
// 1232 	          	for(i=1;i<35;i++)
??parameter_all_answer_2:
        LDI     R24, 1
        RJMP    ??parameter_all_answer_4
// 1233 	          	{
// 1234                 if(read_KO(i) != 0xFFFF)
??parameter_all_answer_5:
        MOV     R16, R24
        CALL    read_KO
        CPI     R16, 255
        LDI     R18, 255
        CPC     R17, R18
        BREQ    ??parameter_all_answer_6
// 1235                 {
// 1236 	                CharToStr(read_KO(i),buffer);
        MOV     R16, R24
        CALL    read_KO
        MOVW    R19:R18, R29:R28
        CALL    CharToStr
// 1237 	                buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1238 	                buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1239 	
// 1240 	                CharToStr(i,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 1241 	                buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
// 1242 	                buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
// 1243 	
// 1244 	                buffer_tx[14] = '0';
        LDI     R16, 48
        STD     Y+17, R16
// 1245 	                buffer_tx[15] = '1';
        LDI     R16, 49
        STD     Y+18, R16
// 1246 	                send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1247 									
// 1248 									//if(++temp==3)
// 1249 										//send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1250                 }
// 1251 	          	}
??parameter_all_answer_6:
        INC     R24
??parameter_all_answer_4:
        CPI     R24, 35
        BRCS    ??parameter_all_answer_5
// 1252               frame_buffer_clear();
        RCALL   frame_buffer_clear
// 1253 	        	}	
// 1254 	
// 1255 	          for(i=0;i<16;i++)
??parameter_all_answer_3:
        LDI     R24, 0
        RJMP    ??parameter_all_answer_7
// 1256 	          {
// 1257 	          	if(ee_scenario[i].confed)
// 1258 	          	{
// 1259 	                CharToStr(i+2,buffer);
// 1260 	                buffer_tx[14] = buffer[0];
// 1261 									buffer_tx[15] = buffer[1];
// 1262 	
// 1263 	                //parameter scenario number
// 1264 	                CharToStr(ee_scenario[i].ns_number,buffer);
// 1265 									buffer_tx[10] = buffer[0];
// 1266 									buffer_tx[11] = buffer[1];
// 1267 									buffer_tx[12] = '0';
// 1268 									buffer_tx[13] = '1';
// 1269 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1270 	                //parameter regutation type
// 1271 									CharToStr(ee_scenario[i].reg_type,buffer);
// 1272 									buffer_tx[10] = buffer[0];
// 1273 									buffer_tx[11] = buffer[1];
// 1274 									buffer_tx[12] = '0';
// 1275 									buffer_tx[13] = '3';
// 1276 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1277 	                //parameter ID1
// 1278 									CharToStr(ee_scenario[i].id[0],buffer);
// 1279 									buffer_tx[10] = buffer[0];
// 1280 									buffer_tx[11] = buffer[1];
// 1281 									buffer_tx[12] = '1';
// 1282 									buffer_tx[13] = '4';
// 1283 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1284 							    //parameter ID2
// 1285 									CharToStr(ee_scenario[i].id[1],buffer);
// 1286 									buffer_tx[10] = buffer[0];
// 1287 									buffer_tx[11] = buffer[1];
// 1288 									buffer_tx[12] = '1';
// 1289 									buffer_tx[13] = '5';
// 1290 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1291 	                //parameter ID3
// 1292 									CharToStr(ee_scenario[i].id[2]>>4,buffer);
// 1293 									buffer_tx[10] = buffer[0];
// 1294 									buffer_tx[11] = buffer[1];
// 1295 									buffer_tx[12] = '1';
// 1296 									buffer_tx[13] = '6';
// 1297 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1298 	                //parameter unit number
// 1299 									CharToStr(ee_scenario[i].key_number,buffer);
// 1300 									buffer_tx[10] = buffer[0];
// 1301 									buffer_tx[11] = buffer[1];
// 1302 									buffer_tx[12] = '1';
// 1303 									buffer_tx[13] = '7';
// 1304 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1305 							}
// 1306 							else
// 1307 							{
// 1308 								not_allowed_response(i+2);	
??parameter_all_answer_8:
        MOV     R16, R17
        RCALL   not_allowed_response
// 1309 							}
??parameter_all_answer_9:
        INC     R24
??parameter_all_answer_7:
        CPI     R24, 16
        BRCS    $+2+2
        RJMP    ??parameter_all_answer_10
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R26, LOW(ee_scenario)
        LDI     R27, (ee_scenario) >> 8
        ADD     R26, R16
        ADC     R27, R17
        MOV     R17, R24
        SUBI    R17, 254
        MOVW    R21:R20, R27:R26
        SUBI    R20, 250
        SBCI    R21, 255
        CALL    __eeget8_16
        TST     R16
        BREQ    ??parameter_all_answer_8
        MOVW    R19:R18, R29:R28
        MOV     R16, R17
        CALL    CharToStr
        LD      R16, Y
        STD     Y+17, R16
        LDD     R16, Y+1
        STD     Y+18, R16
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R27:R26
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 48
        STD     Y+15, R16
        LDI     R16, 49
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R27:R26
        SUBI    R20, 255
        SBCI    R21, 255
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 48
        STD     Y+15, R16
        LDI     R16, 51
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R27:R26
        SUBI    R20, 254
        SBCI    R21, 255
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 52
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R27:R26
        SUBI    R20, 253
        SBCI    R21, 255
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 53
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R27:R26
        SUBI    R20, 252
        SBCI    R21, 255
        CALL    __eeget8_16
        SWAP    R16
        ANDI    R16, 0x0F
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 54
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        MOVW    R19:R18, R29:R28
        ADIW    R27:R26, 5
        MOVW    R21:R20, R27:R26
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 55
        STD     Y+16, R16
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        RJMP    ??parameter_all_answer_9
// 1310 	          }
// 1311 
// 1312 	          frame_buffer_clear();
??parameter_all_answer_10:
        RCALL   frame_buffer_clear
        RJMP    ??parameter_all_answer_1
// 1313 	        }
// 1314 	      }
// 1315 	      else
// 1316 	      {
// 1317 	        if(g_asc_reception_buffer[6] <= 0xCF || (g_asc_reception_buffer[6] >= 0xF0 && g_asc_reception_buffer[6] <= 0xF9))
??parameter_all_answer_0:
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 208
        BRCS    ??parameter_all_answer_11
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 240
        BRCC    $+2+2
        RJMP    ??parameter_all_answer_1
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 250
        BRCS    $+2+2
        RJMP    ??parameter_all_answer_1
// 1318 	        {
// 1319 	          //every managered key object answer the specified parameter
// 1320 	          //eg: D2 00 01 43 8D 00 01 00
// 1321 	          if(product_information.conf_type == 0x03)
??parameter_all_answer_11:
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??parameter_all_answer_12
// 1322 	          {
// 1323 	          	not_allowed_response(0x01);	
        LDI     R16, 1
        RCALL   not_allowed_response
        RJMP    ??parameter_all_answer_13
// 1324 	          }
// 1325 	          else if(g_asc_reception_buffer[6] < 35 )
??parameter_all_answer_12:
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 35
        BRCC    ??parameter_all_answer_13
// 1326 	          {
// 1327 							if(read_KO(i) != 0xFFFF)
        MOV     R16, R24
        CALL    read_KO
        CPI     R16, 255
        LDI     R18, 255
        CPC     R17, R18
        BREQ    ??parameter_all_answer_13
// 1328 							{	
// 1329 	            	CharToStr(read_KO(g_asc_reception_buffer[6]),buffer);
        LDS     R16, (g_asc_reception_buffer + 6)
        CALL    read_KO
        MOVW    R19:R18, R29:R28
        CALL    CharToStr
// 1330 	            	buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1331 	            	buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1332 	
// 1333 								CharToStr(i,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 1334 								buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
// 1335 	            	buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
// 1336 	            	//buffer_tx[12] = g_reception_buffer[12];
// 1337 	            	//buffer_tx[13] = g_reception_buffer[13];
// 1338 	
// 1339 	            	buffer_tx[14] = '0';
        LDI     R16, 48
        STD     Y+17, R16
// 1340 	            	buffer_tx[15] = '1';
        LDI     R16, 49
        STD     Y+18, R16
// 1341 	            	send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1342 							}
// 1343 	          }
// 1344 	
// 1345 	          for(i=0;i<16;i++)
??parameter_all_answer_13:
        LDI     R24, 0
        RJMP    ??parameter_all_answer_14
// 1346 	          {
// 1347 	            if(ee_scenario[i].confed == 0x00)
// 1348 	            {
// 1349 	              not_allowed_response(i+2);	
// 1350 	            }
// 1351 	            else
// 1352 	            {
// 1353 	            switch(g_asc_reception_buffer[6])
// 1354 	            {
// 1355 	              case 1: //D2 00 01 43 8D 00 01 02
// 1356 									CharToStr(ee_scenario[i].ns_number,buffer);
// 1357 									buffer_tx[10] = buffer[0];
// 1358 									buffer_tx[11] = buffer[1];
// 1359 	
// 1360 									buffer_tx[12] = '0';
// 1361 									buffer_tx[13] = '1';
// 1362 	
// 1363 	                CharToStr(i+2,buffer);
// 1364 									buffer_tx[14] = buffer[0];
// 1365 									buffer_tx[15] = buffer[1];
// 1366 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1367 							  break;
// 1368 	
// 1369 							  case 3:
// 1370 									CharToStr(ee_scenario[i].reg_type,buffer);
// 1371 									buffer_tx[10] = buffer[0];
// 1372 									buffer_tx[11] = buffer[1];
// 1373 	
// 1374 									buffer_tx[12] = '0';
// 1375 									buffer_tx[13] = '3';
// 1376 	
// 1377 	                CharToStr(i+2,buffer);
// 1378 									buffer_tx[14] = buffer[0];
// 1379 									buffer_tx[15] = buffer[1];
// 1380 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1381 							  break;
// 1382 	
// 1383 							  case 20:
// 1384 									CharToStr(ee_scenario[i].id[0],buffer);
// 1385 									buffer_tx[10] = buffer[0];
// 1386 									buffer_tx[11] = buffer[1];
// 1387 	
// 1388 									buffer_tx[12] = '1';
// 1389 									buffer_tx[13] = '4';
// 1390 	
// 1391 	                CharToStr(i+2,buffer);
// 1392 									buffer_tx[14] = buffer[0];
// 1393 									buffer_tx[15] = buffer[1];
// 1394 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1395 							  break;
// 1396 	
// 1397 	              case 21:
// 1398 									CharToStr(ee_scenario[i].id[1],buffer);
// 1399 									buffer_tx[10] = buffer[0];
// 1400 									buffer_tx[11] = buffer[1];
// 1401 	
// 1402 									buffer_tx[12] = '1';
// 1403 									buffer_tx[13] = '5';
// 1404 	
// 1405 	                CharToStr(i+2,buffer);
// 1406 									buffer_tx[14] = buffer[0];
// 1407 									buffer_tx[15] = buffer[1];
// 1408 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1409 	              break;
// 1410 	
// 1411 	              case 22:
// 1412 									CharToStr(ee_scenario[i].id[2],buffer);
// 1413 									buffer_tx[10] = buffer[0];
// 1414 									buffer_tx[11] = buffer[1];
// 1415 	
// 1416 									buffer_tx[12] = '1';
// 1417 									buffer_tx[13] = '6';
// 1418 	
// 1419 	                CharToStr(i+2,buffer);
// 1420 									buffer_tx[14] = buffer[0];
// 1421 									buffer_tx[15] = buffer[1];
// 1422 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1423 	              break;
// 1424 	
// 1425 	              case 23:
// 1426 									CharToStr(ee_scenario[i].key_number,buffer);
??parameter_all_answer_15:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 251
        SBCI    R23, 255
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1427 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1428 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1429 	
// 1430 									buffer_tx[12] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1431 									buffer_tx[13] = '7';
        LDI     R16, 55
??parameter_all_answer_16:
        STD     Y+16, R16
// 1432 	
// 1433 	                CharToStr(i+2,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        SUBI    R16, 254
        CALL    CharToStr
// 1434 									buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1435 									buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 1436 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
??parameter_all_answer_17:
        INC     R24
??parameter_all_answer_14:
        CPI     R24, 16
        BRCS    $+2+2
        RJMP    ??parameter_all_answer_18
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R22, LOW(ee_scenario)
        LDI     R23, (ee_scenario) >> 8
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        SUBI    R20, 250
        SBCI    R21, 255
        CALL    __eeget8_16
        TST     R16
        BRNE    ??parameter_all_answer_19
        MOV     R16, R24
        SUBI    R16, 254
        RCALL   not_allowed_response
        RJMP    ??parameter_all_answer_17
??parameter_all_answer_19:
        LDS     R16, (g_asc_reception_buffer + 6)
        SUBI    R16, 1
        BREQ    ??parameter_all_answer_20
        SUBI    R16, 2
        BREQ    ??parameter_all_answer_21
        SUBI    R16, 17
        BREQ    ??parameter_all_answer_22
        DEC     R16
        BREQ    ??parameter_all_answer_23
        DEC     R16
        BRNE    $+2+2
        RJMP    ??parameter_all_answer_24
        DEC     R16
        BRNE    $+2+2
        RJMP    ??parameter_all_answer_15
        RJMP    ??parameter_all_answer_17
??parameter_all_answer_20:
        MOVW    R19:R18, R29:R28
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 48
        STD     Y+15, R16
        LDI     R16, 49
        RJMP    ??parameter_all_answer_16
??parameter_all_answer_21:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 255
        SBCI    R23, 255
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 48
        STD     Y+15, R16
        LDI     R16, 51
        RJMP    ??parameter_all_answer_16
??parameter_all_answer_22:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 254
        SBCI    R23, 255
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 52
        RJMP    ??parameter_all_answer_16
??parameter_all_answer_23:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 253
        SBCI    R23, 255
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 53
        RJMP    ??parameter_all_answer_16
??parameter_all_answer_24:
        MOVW    R19:R18, R29:R28
        SUBI    R22, 252
        SBCI    R23, 255
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
        LD      R16, Y
        STD     Y+13, R16
        LDD     R16, Y+1
        STD     Y+14, R16
        LDI     R16, 49
        STD     Y+15, R16
        LDI     R16, 54
        RJMP    ??parameter_all_answer_16
// 1437 	              break;
// 1438 	
// 1439 	              default: break;
// 1440 						  }
// 1441 	            }
// 1442 	          }
// 1443             frame_buffer_clear();
??parameter_all_answer_18:
        RCALL   frame_buffer_clear
// 1444             manual_reception_buffer_clear();
        CALL    manual_reception_buffer_clear
// 1445 	        }
// 1446 	      }	
// 1447 }
??parameter_all_answer_1:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock16
// 1448 

        RSEG CODE:CODE:NOROOT(1)
// 1449 void parameter_specified_index_answer(void)
parameter_specified_index_answer:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function parameter_specified_index_answer
// 1450 {
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, parameter_request_error_frame
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, KO_answer_frame
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, read_KO
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, KO_answer_frame
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_specified_index_answer, not_allowed_response
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 20
        CFI CFA_Y Y+21
// 1451 	unsigned char buffer_tx[17] = "D20001348D000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348D000000">_3`)
        LDI     R31, (`?<Constant "D20001348D000000">_3`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+5
        SBRC    R16, 2
        RJMP    ??parameter_specified_index_answer_0
// 1452   unsigned char buffer[3];
// 1453   unsigned char temp;
// 1454 	unsigned char i;
// 1455 	
// 1456 			if(GetBit(g_asc_reception_buffer[5],2) == 0)
// 1457 	    {
// 1458 	      if(g_asc_reception_buffer[6] <= 0xCF)
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 208
        BRCS    $+2+2
        RJMP    ??parameter_specified_index_answer_1
// 1459 	      {
// 1460 	        if(g_asc_reception_buffer[7] == 0x01)   // key object 1
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 1
        BRNE    ??parameter_specified_index_answer_2
// 1461 	        {
// 1462 	        	if(product_information.conf_type == 3)
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??parameter_specified_index_answer_3
// 1463 	        	{
// 1464 	        		buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+12, R16
// 1465 	        		buffer_tx[10] = KO[0];
        LDI     R30, LOW(KO)
        LDI     R31, (KO) >> 8
        LD      R16, Z
        STD     Y+13, R16
// 1466 	        		buffer_tx[11] = KO[1];
        LDD     R16, Z+1
        STD     Y+14, R16
// 1467 	        		buffer_tx[12] = KO[2];
        LDD     R16, Z+2
        STD     Y+15, R16
// 1468 	        		buffer_tx[13] = KO[3];
        LDD     R16, Z+3
??parameter_specified_index_answer_4:
        STD     Y+16, R16
// 1469 	        		buffer_tx[14] = '0';
        LDI     R16, 48
        STD     Y+17, R16
// 1470 	        		buffer_tx[15] = '1';
        LDI     R16, 49
??parameter_specified_index_answer_5:
        STD     Y+18, R16
// 1471 	        		send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
        RJMP    ??parameter_specified_index_answer_6
// 1472 	        	}
// 1473 	        	else if(g_asc_reception_buffer[6] <= 34)
??parameter_specified_index_answer_3:
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 35
        BRCC    ??parameter_specified_index_answer_7
// 1474 	          {
// 1475 	            CharToStr(read_KO(g_asc_reception_buffer[6]),buffer);
        LDS     R16, (g_asc_reception_buffer + 6)
        CALL    read_KO
        MOVW    R19:R18, R29:R28
        CALL    CharToStr
// 1476 	            buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1477 	            buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1478 	
// 1479 	            buffer_tx[12] = g_reception_buffer[12];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+15, R16
// 1480 	            buffer_tx[13] = g_reception_buffer[13];
        LDD     R16, Z+13
        RJMP    ??parameter_specified_index_answer_4
// 1481 	
// 1482 	            buffer_tx[14] = '0';
// 1483 	            buffer_tx[15] = '1';
// 1484 	            send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1485 	          }
// 1486 	          else //answer 8D request error frame
// 1487 	         	{
// 1488 	         		parameter_request_error_frame();
??parameter_specified_index_answer_7:
        RCALL   parameter_request_error_frame
        RJMP    ??parameter_specified_index_answer_6
// 1489 	         	}
// 1490 	        }
// 1491 	        else
// 1492 	        {
// 1493 	          if(g_asc_reception_buffer[7] >= 2 && g_asc_reception_buffer[7] <= NUM_KO_TOTAL)
??parameter_specified_index_answer_2:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 2
        BRCC    $+2+2
        RJMP    ??parameter_specified_index_answer_6
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCS    $+2+2
        RJMP    ??parameter_specified_index_answer_6
// 1494 	          {
// 1495 	          	if(ee_scenario[g_asc_reception_buffer[7] - 2].confed == 0)
        LDI     R18, LOW((ee_scenario - 8))
        LDI     R19, HIGH((ee_scenario - 8))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??parameter_specified_index_answer_8
// 1496 	          	{
// 1497 	          		buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+12, R16
// 1498 	        			buffer_tx[10] = '0';
        LDI     R16, 48
        STD     Y+13, R16
// 1499 	        			buffer_tx[11] = '1';
        LDI     R16, 49
        STD     Y+14, R16
// 1500 	        			buffer_tx[12] = 'A';
        LDI     R16, 65
        STD     Y+15, R16
// 1501 	        			buffer_tx[13] = 'F';
        LDI     R16, 70
        STD     Y+16, R16
// 1502 	        			temp = g_asc_reception_buffer[7];
        LDS     R16, (g_asc_reception_buffer + 7)
// 1503 	        			SetBit(temp,7);
// 1504 	        			CharToStr(temp,buffer);
        MOVW    R19:R18, R29:R28
        ORI     R16, 0x80
        CALL    CharToStr
// 1505 	        			buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 1506 	        			buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        RJMP    ??parameter_specified_index_answer_5
// 1507 	        			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1508 	          	}
// 1509 	          	else
// 1510 	          	{
// 1511 	             	switch(g_asc_reception_buffer[6])
??parameter_specified_index_answer_8:
        LDS     R16, (g_asc_reception_buffer + 6)
        SUBI    R16, 1
        BREQ    ??parameter_specified_index_answer_9
        SUBI    R16, 2
        BREQ    ??parameter_specified_index_answer_10
        SUBI    R16, 17
        BREQ    ??parameter_specified_index_answer_11
        DEC     R16
        BREQ    ??parameter_specified_index_answer_12
        DEC     R16
        BREQ    ??parameter_specified_index_answer_13
        DEC     R16
        BREQ    ??parameter_specified_index_answer_14
        RJMP    ??parameter_specified_index_answer_15
// 1512 	            	{
// 1513 	              case 1: //D2 00 01 43 8D 00 01 02
// 1514 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].ns_number,buffer);
??parameter_specified_index_answer_9:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 14))
        LDI     R23, HIGH((ee_scenario - 14))
??parameter_specified_index_answer_16:
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
??parameter_specified_index_answer_17:
        CALL    CharToStr
// 1515 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1516 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1517 	
// 1518 									buffer_tx[12] = g_reception_buffer[12];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+15, R16
// 1519 									buffer_tx[13] = g_reception_buffer[13];
        LDD     R16, Z+13
        STD     Y+16, R16
// 1520 	
// 1521 									buffer_tx[14] = g_reception_buffer[14];
        LDD     R16, Z+14
        STD     Y+17, R16
// 1522 									buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
        RJMP    ??parameter_specified_index_answer_5
// 1523 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1524 							  break;
// 1525 	
// 1526 							  case 3:
// 1527 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].reg_type,buffer);
??parameter_specified_index_answer_10:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 13))
        LDI     R23, HIGH((ee_scenario - 13))
        RJMP    ??parameter_specified_index_answer_16
// 1528 									buffer_tx[10] = buffer[0];
// 1529 									buffer_tx[11] = buffer[1];
// 1530 	
// 1531 									buffer_tx[12] = g_reception_buffer[12];
// 1532 									buffer_tx[13] = g_reception_buffer[13];
// 1533 	
// 1534 									buffer_tx[14] = g_reception_buffer[14];
// 1535 									buffer_tx[15] = g_reception_buffer[15];
// 1536 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1537 							  break;
// 1538 	
// 1539 							  case 20:
// 1540 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[0],buffer);
??parameter_specified_index_answer_11:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 12))
        LDI     R23, HIGH((ee_scenario - 12))
        RJMP    ??parameter_specified_index_answer_16
// 1541 									buffer_tx[10] = buffer[0];
// 1542 									buffer_tx[11] = buffer[1];
// 1543 	
// 1544 									buffer_tx[12] = g_reception_buffer[12];
// 1545 									buffer_tx[13] = g_reception_buffer[13];
// 1546 	
// 1547 									buffer_tx[14] = g_reception_buffer[14];
// 1548 									buffer_tx[15] = g_reception_buffer[15];
// 1549 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1550 							  break;
// 1551 	
// 1552 	              case 21:
// 1553 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[1],buffer);
??parameter_specified_index_answer_12:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 11))
        LDI     R23, HIGH((ee_scenario - 11))
        RJMP    ??parameter_specified_index_answer_16
// 1554 									buffer_tx[10] = buffer[0];
// 1555 									buffer_tx[11] = buffer[1];
// 1556 	
// 1557 									buffer_tx[12] = g_reception_buffer[12];
// 1558 									buffer_tx[13] = g_reception_buffer[13];
// 1559 	
// 1560 									buffer_tx[14] = g_reception_buffer[14];
// 1561 									buffer_tx[15] = g_reception_buffer[15];
// 1562 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1563 	              break;
// 1564 	
// 1565 	              case 22:
// 1566 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[2]>>4,buffer);
??parameter_specified_index_answer_13:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 10))
        LDI     R23, HIGH((ee_scenario - 10))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        SWAP    R16
        ANDI    R16, 0x0F
        RJMP    ??parameter_specified_index_answer_17
// 1567 									buffer_tx[10] = buffer[0];
// 1568 									buffer_tx[11] = buffer[1];
// 1569 	
// 1570 									buffer_tx[12] = g_reception_buffer[12];
// 1571 									buffer_tx[13] = g_reception_buffer[13];
// 1572 	
// 1573 									buffer_tx[14] = g_reception_buffer[14];
// 1574 									buffer_tx[15] = g_reception_buffer[15];
// 1575 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1576 	              break;
// 1577 	
// 1578 	              case 23:
// 1579 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].key_number,buffer);
??parameter_specified_index_answer_14:
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 9))
        LDI     R23, HIGH((ee_scenario - 9))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1580 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1581 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1582 	
// 1583 									buffer_tx[12] = g_reception_buffer[12];
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+15, R16
// 1584 									buffer_tx[13] = g_reception_buffer[13];
        LDD     R16, Z+13
        STD     Y+16, R16
// 1585 	
// 1586 									buffer_tx[14] = g_reception_buffer[14];
        LDD     R16, Z+14
        STD     Y+17, R16
// 1587 									buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
        RJMP    ??parameter_specified_index_answer_5
// 1588 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1589 	              break;
// 1590 	
// 1591 	              default:
// 1592 	              	not_allowed_response(g_asc_reception_buffer[7]);
??parameter_specified_index_answer_15:
        LDS     R16, (g_asc_reception_buffer + 7)
        RJMP    ??parameter_specified_index_answer_18
// 1593 	              break;
// 1594 						  }
// 1595 						}
// 1596 	          }
// 1597 	        }
// 1598 	      }
// 1599 	      else if(g_asc_reception_buffer[6] >= 0xFA && g_asc_reception_buffer[6] <= 0xF9) //for updated
??parameter_specified_index_answer_1:
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 250
        BRCS    ??parameter_specified_index_answer_15
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 250
        BRCC    $+2+2
        RJMP    ??parameter_specified_index_answer_6
// 1600 	      {
// 1601 	
// 1602 	      }
// 1603 	      else
// 1604 	      {
// 1605 	       	not_allowed_response(g_asc_reception_buffer[7]);
        RJMP    ??parameter_specified_index_answer_15
// 1606 	      }
// 1607 	    }
// 1608 	    else //every managed parameter
// 1609 	    {
// 1610 	      if(g_asc_reception_buffer[6] == 0x00)   //every parameter accord to the specified key object number
??parameter_specified_index_answer_0:
        LDS     R16, (g_asc_reception_buffer + 6)
        TST     R16
        LDS     R16, (g_asc_reception_buffer + 7)
        BREQ    $+2+2
        RJMP    ??parameter_specified_index_answer_18
// 1611 	      {
// 1612 	        if(g_asc_reception_buffer[7] == 0x01) //main key object   D2 00 01 43 8D 04 00 01
        CPI     R16, 1
        BRNE    ??parameter_specified_index_answer_19
// 1613 	        {
// 1614             if(product_information.conf_type == NONE_CONFED)
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??parameter_specified_index_answer_20
// 1615             {
// 1616               KO_answer_frame();
        RCALL   KO_answer_frame
        RJMP    ??parameter_specified_index_answer_21
// 1617             }
// 1618             else
// 1619             {
// 1620 							temp = 0;
// 1621 	            for(i=1;i<35;i++)
??parameter_specified_index_answer_20:
        LDI     R24, 1
        RJMP    ??parameter_specified_index_answer_22
// 1622 	            {
// 1623                 if(read_KO(i) != 0xFFFF)
??parameter_specified_index_answer_23:
        MOV     R16, R24
        CALL    read_KO
        CPI     R16, 255
        LDI     R18, 255
        CPC     R17, R18
        BREQ    ??parameter_specified_index_answer_24
// 1624                 {
// 1625 	                CharToStr(read_KO(i),buffer);
        MOV     R16, R24
        CALL    read_KO
        MOVW    R19:R18, R29:R28
        CALL    CharToStr
// 1626 	                buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1627 	                buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1628 
// 1629 	                CharToStr(i,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 1630 	                buffer_tx[12] = buffer[0];
        LD      R16, Y
        STD     Y+15, R16
// 1631 	                buffer_tx[13] = buffer[1];
        LDD     R16, Y+1
        STD     Y+16, R16
// 1632 	            		
// 1633 	                buffer_tx[14] = '0';
        LDI     R16, 48
        STD     Y+17, R16
// 1634 	                buffer_tx[15] = '1';
        LDI     R16, 49
        STD     Y+18, R16
// 1635 	                send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1636                 }
// 1637 	            }
??parameter_specified_index_answer_24:
        INC     R24
??parameter_specified_index_answer_22:
        CPI     R24, 35
        BRCS    ??parameter_specified_index_answer_23
// 1638             }
// 1639             frame_buffer_clear();
??parameter_specified_index_answer_21:
        RCALL   frame_buffer_clear
        RJMP    ??parameter_specified_index_answer_6
// 1640 	        }
// 1641 	        else if(g_asc_reception_buffer[7] >= 2 && g_asc_reception_buffer[7] <= NUM_KO_TOTAL) // 16 IR scenario answer Eg: D2 00 01 43 8D 04 00 02
??parameter_specified_index_answer_19:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 2
        BRCC    $+2+2
        RJMP    ??parameter_specified_index_answer_6
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCS    $+2+2
        RJMP    ??parameter_specified_index_answer_6
// 1642 	        {
// 1643             if(ee_scenario[g_asc_reception_buffer[7] - 2].confed == 0)
        LDI     R18, LOW((ee_scenario - 8))
        LDI     R19, HIGH((ee_scenario - 8))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??parameter_specified_index_answer_25
// 1644             {
// 1645               KO_answer_frame();
        RCALL   KO_answer_frame
        RJMP    ??parameter_specified_index_answer_6
// 1646             }
// 1647             else
// 1648             {
// 1649 	                buffer_tx[14] = g_reception_buffer[14];
??parameter_specified_index_answer_25:
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+14
        STD     Y+17, R16
// 1650 									buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
        STD     Y+18, R16
// 1651 	
// 1652 	                //parameter scenario number
// 1653 	                CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].ns_number,buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 14))
        LDI     R23, HIGH((ee_scenario - 14))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1654 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1655 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1656 									buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 1657 									buffer_tx[13] = '1';
        LDI     R16, 49
        STD     Y+16, R16
// 1658 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1659 	                //parameter regutation type
// 1660 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].reg_type,buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 13))
        LDI     R23, HIGH((ee_scenario - 13))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1661 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1662 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1663 									buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 1664 									buffer_tx[13] = '3';
        LDI     R16, 51
        STD     Y+16, R16
// 1665 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1666 	                //parameter ID1
// 1667 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[0],buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 12))
        LDI     R23, HIGH((ee_scenario - 12))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1668 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1669 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1670 									buffer_tx[12] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1671 									buffer_tx[13] = '4';
        LDI     R16, 52
        STD     Y+16, R16
// 1672 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1673 							    //parameter ID2
// 1674 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[1],buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 11))
        LDI     R23, HIGH((ee_scenario - 11))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1675 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1676 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1677 									buffer_tx[12] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1678 									buffer_tx[13] = '5';
        LDI     R16, 53
        STD     Y+16, R16
// 1679 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1680 	                //parameter ID3
// 1681 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].id[2]>>4,buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 10))
        LDI     R23, HIGH((ee_scenario - 10))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        SWAP    R16
        ANDI    R16, 0x0F
        CALL    CharToStr
// 1682 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1683 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1684 									buffer_tx[12] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1685 									buffer_tx[13] = '6';
        LDI     R16, 54
        STD     Y+16, R16
// 1686 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1687 	                //parameter unit number
// 1688 									CharToStr(ee_scenario[g_asc_reception_buffer[7] - 2].key_number,buffer);
        MOVW    R19:R18, R29:R28
        LDI     R22, LOW((ee_scenario - 9))
        LDI     R23, HIGH((ee_scenario - 9))
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
// 1689 									buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1690 									buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1691 									buffer_tx[12] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1692 									buffer_tx[13] = '7';
        LDI     R16, 55
        STD     Y+16, R16
// 1693 									send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1694 	
// 1695 	                frame_buffer_clear();
        RJMP    ??parameter_specified_index_answer_21
// 1696             }
// 1697 	        }
// 1698 	      }
// 1699 	      else // not allowed frame
// 1700 	     	{
// 1701 	     		not_allowed_response(g_asc_reception_buffer[7]);
??parameter_specified_index_answer_18:
        RCALL   not_allowed_response
// 1702 	     	}
// 1703 	    }	
// 1704 }
??parameter_specified_index_answer_6:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock17
// 1705 

        RSEG CODE:CODE:NOROOT(1)
// 1706 void send_aux_frame(unsigned char argument,unsigned char ns,unsigned char scenario_index)
send_aux_frame:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function send_aux_frame
// 1707 {
        FUNCALL send_aux_frame, CharToStr
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, dimmer_convert
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, dimmer_convert
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, CharToStr
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, CharToStr
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_aux_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 14, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 12
        CFI CFA_Y Y+14
        MOV     R25, R16
        MOV     R1, R17
        MOV     R24, R18
// 1708   unsigned char buffer_short[9] = "B1009300";
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "B1009300">`)
        LDI     R31, (`?<Constant "B1009300">`) >> 8
        LDI     R20, 9
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1709   unsigned char buffer[3];
// 1710   signed char temp;
// 1711 
// 1712   CharToStr(ns,buffer);
        SUBI    R18, 247
        SBCI    R19, 255
        MOV     R16, R1
        CALL    CharToStr
// 1713   buffer_short[2] = buffer[0];
        LDD     R16, Y+9
        STD     Y+2, R16
// 1714   buffer_short[3] = buffer[1];
        LDD     R16, Y+10
        STD     Y+3, R16
// 1715 
// 1716   switch(argument)
        SUBI    R25, 1
        BREQ    ??send_aux_frame_0
        DEC     R25
        BREQ    ??send_aux_frame_1
        DEC     R25
        BREQ    ??send_aux_frame_2
        DEC     R25
        BRNE    $+2+2
        RJMP    ??send_aux_frame_3
        SUBI    R25, 3
        BRNE    $+2+2
        RJMP    ??send_aux_frame_4
        SUBI    R25, 2
        BRNE    $+2+2
        RJMP    ??send_aux_frame_5
        RJMP    ??send_aux_frame_6
// 1717   {
// 1718     case ON:
// 1719       buffer_short[4] = '9';
??send_aux_frame_0:
        LDI     R16, 57
        STD     Y+4, R16
// 1720       buffer_short[5] = '3';
        LDI     R16, 51
        STD     Y+5, R16
// 1721       buffer_short[6] = '6';
        LDI     R16, 54
        STD     Y+6, R16
// 1722       buffer_short[7] = '4';
        LDI     R16, 52
??send_aux_frame_7:
        STD     Y+7, R16
// 1723       send_frame_pp_broad(buffer_short,TRANS_DELAY);
        RJMP    ??send_aux_frame_8
// 1724     break;
// 1725 
// 1726     case OFF:
// 1727       buffer_short[4] = '9';
??send_aux_frame_1:
        LDI     R16, 57
        STD     Y+4, R16
// 1728       buffer_short[5] = '4';
        LDI     R16, 52
??send_aux_frame_9:
        STD     Y+5, R16
// 1729       buffer_short[6] = '0';
        LDI     R16, 48
        STD     Y+6, R16
// 1730       buffer_short[7] = '0';
        RJMP    ??send_aux_frame_7
// 1731       send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1732     break;
// 1733 
// 1734     case DIM_STEP:
// 1735       temp = IR_reception.pipe[6];
??send_aux_frame_2:
        LDS     R16, (IR_reception + 6)
// 1736       if(temp > 0)
        CPI     R16, 1
        BRLT    ??send_aux_frame_10
// 1737       {
// 1738         buffer_short[4] = '9';
        LDI     R17, 57
        STD     Y+4, R17
// 1739         buffer_short[5] = '5';
        LDI     R17, 53
        STD     Y+5, R17
// 1740         buffer_short[6] = dimmer_convert(temp);
        RCALL   dimmer_convert
        STD     Y+6, R16
// 1741 				if(scenario_index == OUT_RANGE)
        CPI     R24, 255
        BRNE    ??send_aux_frame_11
// 1742         	buffer_short[7] = '0';
??send_aux_frame_12:
        LDI     R16, 48
        RJMP    ??send_aux_frame_7
// 1743 				else
// 1744 				{
// 1745 					CharToStr(ee_scenario[scenario_index].reg_type,buffer);
// 1746 					buffer_short[7] = buffer[1];
// 1747 				}
// 1748         send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1749       }
// 1750       else if(temp < 0)
??send_aux_frame_10:
        TST     R16
        BRMI    $+2+2
        RJMP    ??send_aux_frame_6
// 1751       {
// 1752         temp = 0 - temp;
// 1753         buffer_short[4] = '9';
        LDI     R17, 57
        STD     Y+4, R17
// 1754         buffer_short[5] = '6';
        LDI     R17, 54
        STD     Y+5, R17
// 1755         buffer_short[6] = dimmer_convert(temp);
        NEG     R16
        RCALL   dimmer_convert
        STD     Y+6, R16
// 1756         if(scenario_index == OUT_RANGE)
        CPI     R24, 255
        BREQ    ??send_aux_frame_12
// 1757         	buffer_short[7] = '0';
// 1758 				else
// 1759 				{
// 1760 					CharToStr(ee_scenario[scenario_index].reg_type,buffer);
// 1761 					buffer_short[7] = buffer[1];
// 1762 				}
// 1763         send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1764       }
??send_aux_frame_11:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        LDI     R22, LOW((ee_scenario + 1))
        LDI     R23, HIGH((ee_scenario + 1))
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        CALL    CharToStr
??send_aux_frame_13:
        LDD     R16, Y+10
        RJMP    ??send_aux_frame_7
// 1765     break;
// 1766 
// 1767     case GO_TO_LEVEL_TIME:
// 1768       if(IR_reception.pipe[6] == 0)
??send_aux_frame_3:
        LDS     R16, (IR_reception + 6)
        TST     R16
        BREQ    ??send_aux_frame_1
// 1769       {
// 1770         buffer_short[4] = '9';
// 1771         buffer_short[5] = '4';
// 1772         buffer_short[6] = '0';
// 1773         buffer_short[7] = '0';
// 1774         send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1775       }
// 1776       else if(IR_reception.pipe[6] <= 0x64)
        LDS     R16, (IR_reception + 6)
        CPI     R16, 101
        BRCS    $+2+2
        RJMP    ??send_aux_frame_0
// 1777       {
// 1778         buffer_short[4] = '9';
        LDI     R16, 57
        STD     Y+4, R16
// 1779         buffer_short[5] = '3';
        LDI     R16, 51
        STD     Y+5, R16
// 1780         CharToStr(IR_reception.pipe[6],buffer);
        MOVW    R19:R18, R29:R28
        SUBI    R18, 247
        SBCI    R19, 255
        LDS     R16, (IR_reception + 6)
        CALL    CharToStr
// 1781         buffer_short[6] = buffer[0];
        LDD     R16, Y+9
        STD     Y+6, R16
// 1782         buffer_short[7] = buffer[1];
        RJMP    ??send_aux_frame_13
// 1783         send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1784       }
// 1785       else
// 1786       {
// 1787         buffer_short[4] = '9';
// 1788         buffer_short[5] = '3';
// 1789         buffer_short[6] = '6';
// 1790         buffer_short[7] = '4';
// 1791         send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1792       }
// 1793     break;
// 1794 
// 1795     case ACTION:
// 1796       buffer_short[4] = '9';
??send_aux_frame_4:
        LDI     R16, 57
        STD     Y+4, R16
// 1797       buffer_short[5] = '3';
        LDI     R16, 51
        RJMP    ??send_aux_frame_9
// 1798       buffer_short[6] = '0';
// 1799       buffer_short[7] = '0';
// 1800       send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 1801     break;
// 1802 		
// 1803 		case DIMMER_STOP:
// 1804 			buffer_short[4] = '9';
??send_aux_frame_5:
        LDI     R16, 57
        STD     Y+4, R16
// 1805       buffer_short[5] = '7';
        LDI     R16, 55
        STD     Y+5, R16
// 1806 			send_frame_pp_broad(buffer_short,TRANS_DELAY);
??send_aux_frame_8:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_broad
// 1807 		break;
// 1808 
// 1809   default:break;
// 1810   }
// 1811 }
??send_aux_frame_6:
        ADIW    R29:R28, 12
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock18
// 1812 

        RSEG CODE:CODE:NOROOT(1)
// 1813 void send_group_pnl_frame(unsigned char send_type,unsigned char GR, unsigned char cmd)
send_group_pnl_frame:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function send_group_pnl_frame
// 1814 {
        FUNCALL send_group_pnl_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_pnl_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 20
        CFI CFA_Y Y+24
        MOV     R19, R16
        MOV     R22, R17
        MOV     R24, R18
// 1815 	unsigned char buffer_tx[17] = "D20001428C000940";
        MOVW    R27:R26, R29:R28
        ADIW    R27:R26, 3
        LDI     R30, LOW(`?<Constant "D20001428C000940">`)
        LDI     R31, (`?<Constant "D20001428C000940">`) >> 8
        MOVW    R17:R16, R27:R26
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1816 	unsigned char buffer[3];
// 1817 	
// 1818 	if(send_type == REQUEST)
        CPI     R19, 51
        BRNE    ??send_group_pnl_frame_0
// 1819 	{
// 1820 		buffer_tx[6] = '4';
        LDI     R16, 52
        STD     Y+9, R16
// 1821 		buffer_tx[7] = '3';
        LDI     R16, 51
        RJMP    ??send_group_pnl_frame_1
// 1822 	}
// 1823 	else if(send_type == SET)
??send_group_pnl_frame_0:
        CPI     R19, 50
        BRNE    ??send_group_pnl_frame_2
// 1824 	{
// 1825 		buffer_tx[6] = '4';
        LDI     R16, 52
        STD     Y+9, R16
// 1826 		buffer_tx[7] = '2';
        LDI     R16, 50
        RJMP    ??send_group_pnl_frame_1
// 1827 	}
// 1828 	else
// 1829 	{
// 1830 		buffer_tx[6] = '3';
??send_group_pnl_frame_2:
        LDI     R16, 51
        STD     Y+9, R16
// 1831 		buffer_tx[7] = '4';
        LDI     R16, 52
??send_group_pnl_frame_1:
        STD     Y+10, R16
// 1832 	}
// 1833 	
// 1834 	CharToStr(GR,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R22
        CALL    CharToStr
// 1835 	buffer_tx[10] = buffer[0];
        LD      R16, Y
        STD     Y+13, R16
// 1836 	buffer_tx[11] = buffer[1];
        LDD     R16, Y+1
        STD     Y+14, R16
// 1837 	
// 1838 	buffer_tx[15] = cmd;
        STD     Y+18, R24
// 1839 	
// 1840 	send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 1841 }
        ADIW    R29:R28, 20
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock19
// 1842 

        RSEG CODE:CODE:NOROOT(1)
// 1843 void ko_answer_all(void)
ko_answer_all:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ko_answer_all
// 1844 {
        FUNCALL ko_answer_all, KO_answer_frame
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
// 1845   unsigned char temp;
// 1846   temp = g_asc_reception_buffer[7];
        LDS     R24, (g_asc_reception_buffer + 7)
// 1847   g_asc_reception_buffer[7] = 0x00;
        LDI     R16, 0
        STS     (g_asc_reception_buffer + 7), R16
// 1848   KO_answer_frame();
        RCALL   KO_answer_frame
// 1849   g_asc_reception_buffer[7] = temp;
        STS     (g_asc_reception_buffer + 7), R24
// 1850 }
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock20
// 1851 

        RSEG CODE:CODE:NOROOT(1)
// 1852 void address_answer_frame(void)
address_answer_frame:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function address_answer_frame
// 1853 {
        FUNCALL address_answer_frame, ko_answer_all
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, KO_answer_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, frame_buffer_clear
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, KO_answer_frame
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_answer_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 21, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 17
        CFI CFA_Y Y+19
// 1854   unsigned char buffer_tx[17] = "D20001348DFEFE00";
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348DFEFE00">`)
        LDI     R31, (`?<Constant "D20001348DFEFE00">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1855   unsigned char i;
// 1856   unsigned char temp;
// 1857 	unsigned char channel_scenario;
// 1858   //ko_answer_all();
// 1859   if(g_asc_reception_buffer[7] == 0x80)
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 128
        BRNE    ??address_answer_frame_0
// 1860   {
// 1861     if(product_information.conf_type == NONE_CONFED)
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LD      R16, Z
        CPI     R16, 3
        BRNE    ??address_answer_frame_1
// 1862     {
// 1863       ko_answer_all();
        RCALL   ko_answer_all
        RJMP    ??address_answer_frame_2
// 1864     }
// 1865     else
// 1866     {
// 1867       if(product_information.cen_system)
??address_answer_frame_1:
        LDD     R16, Z+4
        TST     R16
        BREQ    ??address_answer_frame_3
// 1868       {
// 1869         buffer_tx[10] = '1';
        LDI     R16, 49
        STD     Y+10, R16
// 1870         buffer_tx[11] = '0';
        LDI     R16, 48
        STD     Y+11, R16
// 1871         buffer_tx[12] = product_information.local_A;
        LDD     R16, Z+2
        STD     Y+12, R16
// 1872         buffer_tx[13] = product_information.local_PL;
        LDD     R16, Z+3
        STD     Y+13, R16
// 1873         buffer_tx[14] = '8';
// 1874         buffer_tx[15] = '1';
// 1875         send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1876       }
// 1877       else
// 1878       {
// 1879         buffer_tx[14] = '8';
??address_answer_frame_3:
        LDI     R16, 56
        STD     Y+14, R16
// 1880         buffer_tx[15] = '1';
        LDI     R16, 49
        STD     Y+15, R16
// 1881         send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_ext_broad
// 1882       }
// 1883 
// 1884       temp = g_asc_reception_buffer[CHANNEL];
        LDS     R25, (g_asc_reception_buffer + 7)
// 1885       for(i=0x02;i<=0x11;i++)
        LDI     R24, 2
        RJMP    ??address_answer_frame_4
// 1886       {
// 1887         g_asc_reception_buffer[CHANNEL] = i;
??address_answer_frame_5:
        STS     (g_asc_reception_buffer + 7), R24
// 1888         KO_answer_frame();
        RCALL   KO_answer_frame
// 1889       }
        INC     R24
??address_answer_frame_4:
        CPI     R24, 18
        BRCS    ??address_answer_frame_5
// 1890       g_asc_reception_buffer[CHANNEL] = temp;
        STS     (g_asc_reception_buffer + 7), R25
// 1891       frame_buffer_clear();
        RCALL   frame_buffer_clear
        RJMP    ??address_answer_frame_2
// 1892     }
// 1893   }
// 1894   else if(g_asc_reception_buffer[7] == 0x81)
??address_answer_frame_0:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 129
        BRNE    ??address_answer_frame_6
// 1895   {
// 1896     if(product_information.conf_type == NONE_CONFED)
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LD      R16, Z
        CPI     R16, 3
        BRNE    ??address_answer_frame_7
// 1897     {
// 1898       KO_answer_frame();
??address_answer_frame_8:
        RCALL   KO_answer_frame
        RJMP    ??address_answer_frame_2
// 1899     }
// 1900     else if(product_information.cen_system == 1)
??address_answer_frame_7:
        LDD     R16, Z+4
        CPI     R16, 1
        BRNE    ??address_answer_frame_9
// 1901     {
// 1902       //for CEN system
// 1903       buffer_tx[10] = '1';
        LDI     R16, 49
        STD     Y+10, R16
// 1904       buffer_tx[11] = '0';
        LDI     R16, 48
        STD     Y+11, R16
// 1905       buffer_tx[12] = product_information.local_A;
        LDD     R16, Z+2
        STD     Y+12, R16
// 1906       buffer_tx[13] = product_information.local_PL;
        LDD     R16, Z+3
        STD     Y+13, R16
// 1907       buffer_tx[14] = g_reception_buffer[14];
        RJMP    ??address_answer_frame_10
// 1908       buffer_tx[15] = g_reception_buffer[15];
// 1909       send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1910     }
// 1911     else
// 1912     {
// 1913       buffer_tx[14] = '8';
??address_answer_frame_9:
        LDI     R16, 56
        STD     Y+14, R16
// 1914       buffer_tx[15] = '1';
        LDI     R16, 49
        RJMP    ??address_answer_frame_11
// 1915       send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1916     }
// 1917   }
// 1918   else if(g_asc_reception_buffer[7] <= 0x91 && g_asc_reception_buffer[7] >= 0x82)
??address_answer_frame_6:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 146
        BRCC    ??address_answer_frame_2
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 130
        BRCS    ??address_answer_frame_2
// 1919   {
// 1920 		channel_scenario = g_asc_reception_buffer[CHANNEL];
        LDS     R16, (g_asc_reception_buffer + 7)
// 1921 		ClrBit(channel_scenario,7);
// 1922 		channel_scenario -= 2;
// 1923 		if(ee_scenario[channel_scenario].confed)
        LDI     R18, LOW((ee_scenario + 6))
        LDI     R19, HIGH((ee_scenario + 6))
        ANDI    R16, 0x7F
        SUBI    R16, 2
        LDI     R17, 0
        LDI     R20, 7
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BREQ    ??address_answer_frame_8
// 1924 		{
// 1925 			buffer_tx[14] = g_reception_buffer[14];
??address_answer_frame_10:
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+14
        STD     Y+14, R16
// 1926 			buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
??address_answer_frame_11:
        STD     Y+15, R16
// 1927 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_ext_broad
// 1928 		}
// 1929 		else
// 1930 		{
// 1931     	KO_answer_frame();
// 1932 		}
// 1933     //CharToStr(g_asc_reception_buffer[7], buffer);
// 1934     //buffer_tx[14] = buffer[0];
// 1935     //buffer_tx[15] = buffer[1];
// 1936     //send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1937   }
// 1938 }
??address_answer_frame_2:
        ADIW    R29:R28, 17
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock21
// 1939 

        RSEG CODE:CODE:NOROOT(1)
// 1940 void address_setting_error_frame(void)
address_setting_error_frame:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function address_setting_error_frame
// 1941 {
        FUNCALL address_setting_error_frame, ko_answer_all
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, frame_buffer_clear
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, KO_answer_frame
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL address_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 20
        CFI CFA_Y Y+21
// 1942   unsigned char buffer_tx[17] = "D20001348DFEFE80";
        MOVW    R19:R18, R29:R28
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348DFEFE80">`)
        LDI     R31, (`?<Constant "D20001348DFEFE80">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 1943   unsigned char i;
// 1944   unsigned char buffer[3];
// 1945   unsigned char temp;
// 1946   //ko_answer_all();
// 1947   if(g_asc_reception_buffer[7] == 0x80)
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 128
        BRNE    ??address_setting_error_frame_0
// 1948   {
// 1949     if(product_information.conf_type == NONE_CONFED)
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??address_setting_error_frame_1
// 1950     {
// 1951       ko_answer_all();
        RCALL   ko_answer_all
        RJMP    ??address_setting_error_frame_2
// 1952     }
// 1953     else
// 1954     {
// 1955       for(i=0x81;i<=0x91;i++)
??address_setting_error_frame_1:
        LDI     R24, 129
        RJMP    ??address_setting_error_frame_3
// 1956       {
// 1957         CharToStr(i,buffer);
??address_setting_error_frame_4:
        MOVW    R19:R18, R29:R28
        SUBI    R18, 239
        SBCI    R19, 255
        MOV     R16, R24
        CALL    CharToStr
// 1958         buffer_tx[14] = buffer[0];
        LDD     R16, Y+17
        STD     Y+14, R16
// 1959         buffer_tx[15] = buffer[1];
        LDD     R16, Y+18
        STD     Y+15, R16
// 1960         send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_ext_broad
// 1961       }
        INC     R24
??address_setting_error_frame_3:
        CPI     R24, 146
        BRCS    ??address_setting_error_frame_4
// 1962       frame_buffer_clear();
        RCALL   frame_buffer_clear
        RJMP    ??address_setting_error_frame_2
// 1963     }
// 1964   }
// 1965   else if(g_asc_reception_buffer[7] == 0x81)
??address_setting_error_frame_0:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 129
        BRNE    ??address_setting_error_frame_5
// 1966   {
// 1967     if(product_information.cen_system == 1)
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDD     R16, Z+4
        CPI     R16, 1
        LD      R16, Z
        BRNE    ??address_setting_error_frame_6
// 1968     {
// 1969       //for CEN system
// 1970 
// 1971       if(product_information.conf_type == NONE_CONFED)
        CPI     R16, 3
        BRNE    ??address_setting_error_frame_7
// 1972       {
// 1973         KO_answer_frame();
??address_setting_error_frame_8:
        RCALL   KO_answer_frame
        RJMP    ??address_setting_error_frame_2
// 1974       }
// 1975       else
// 1976       {
// 1977         buffer_tx[10] = 'F';
??address_setting_error_frame_7:
        LDI     R16, 70
        STD     Y+10, R16
// 1978         buffer_tx[11] = 'F';
        STD     Y+11, R16
// 1979         buffer_tx[12] = 'F';
        STD     Y+12, R16
// 1980         buffer_tx[13] = 'E';
        LDI     R16, 69
        STD     Y+13, R16
// 1981         buffer_tx[14] = '8';
        LDI     R16, 56
        STD     Y+14, R16
// 1982         buffer_tx[15] = '1';
??address_setting_error_frame_9:
        LDI     R16, 49
        RJMP    ??address_setting_error_frame_10
// 1983         send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 1984       }
// 1985     }
// 1986     else
// 1987     {
// 1988       if(product_information.conf_type == NONE_CONFED)
??address_setting_error_frame_6:
        CPI     R16, 3
        BREQ    ??address_setting_error_frame_8
// 1989       {
// 1990         KO_answer_frame();
// 1991       }
// 1992 			else
// 1993 			{
// 1994 				buffer_tx[15] = '1';
        RJMP    ??address_setting_error_frame_9
// 1995 				send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);  //ADDRESS NOT ACCEPTED
// 1996 			}
// 1997       /*
// 1998       buffer_tx[8] = '8';
// 1999       buffer_tx[9] = 'B';
// 2000       buffer_tx[10] = KO[0];
// 2001       buffer_tx[11] = KO[1];
// 2002       buffer_tx[12] = KO[2];
// 2003       buffer_tx[13] = KO[3];
// 2004       buffer_tx[14] = '8';
// 2005       buffer_tx[15] = '1';
// 2006       send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 2007       */
// 2008     }
// 2009   }
// 2010   else if(g_asc_reception_buffer[7] <= 0x91 && g_asc_reception_buffer[7] >= 0x82)
??address_setting_error_frame_5:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 146
        BRCC    ??address_setting_error_frame_2
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 130
        BRCS    ??address_setting_error_frame_2
// 2011   {
// 2012 		temp = g_asc_reception_buffer[7];
        LDS     R16, (g_asc_reception_buffer + 7)
// 2013     ClrBit(temp,7);
// 2014     temp -= 2;
// 2015 		
// 2016 		if(ee_scenario[temp].confed)
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDI     R18, LOW((ee_scenario + 6))
        LDI     R19, HIGH((ee_scenario + 6))
        ANDI    R16, 0x7F
        SUBI    R16, 2
        LDI     R17, 0
        LDI     R20, 7
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BRNE    ??address_setting_error_frame_11
// 2017 		{
// 2018 			buffer_tx[14] = g_reception_buffer[14];
// 2019 			buffer_tx[15] = g_reception_buffer[15];
// 2020 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 2021 		}
// 2022 		else
// 2023 		{
// 2024     	buffer_tx[8] = '8';
        LDI     R16, 56
        STD     Y+8, R16
// 2025     	buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+9, R16
// 2026     	buffer_tx[10] = '0';
        LDI     R16, 48
        STD     Y+10, R16
// 2027     	buffer_tx[11] = '1';
        LDI     R16, 49
        STD     Y+11, R16
// 2028     	buffer_tx[12] = 'A';
        LDI     R16, 65
        STD     Y+12, R16
// 2029     	buffer_tx[13] = 'F';
        LDI     R16, 70
        STD     Y+13, R16
// 2030     	buffer_tx[14] = g_reception_buffer[14];
??address_setting_error_frame_11:
        LDD     R16, Z+14
        STD     Y+14, R16
// 2031 			buffer_tx[15] = g_reception_buffer[15];
        LDD     R16, Z+15
??address_setting_error_frame_10:
        STD     Y+15, R16
// 2032 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        CALL    send_frame_pp_ext_broad
// 2033 		}
// 2034   }
// 2035 	
// 2036 	flags.KO_conf_right = 0; //reyno 0625
??address_setting_error_frame_2:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R16, 0xFD
        STD     Z+3, R17
        STD     Z+2, R16
// 2037 }
        ADIW    R29:R28, 20
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock22
// 2038 

        RSEG CODE:CODE:NOROOT(1)
// 2039 unsigned char dimmer_convert(unsigned char data)
dimmer_convert:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function dimmer_convert
// 2040 {
// 2041         if(data == 1)
        CPI     R16, 1
        BRNE    ??dimmer_convert_0
// 2042         {
// 2043           return '0';
        LDI     R16, 48
        RET
// 2044         }
// 2045         else if(data == 2)
??dimmer_convert_0:
        CPI     R16, 2
        BRNE    ??dimmer_convert_1
// 2046         {
// 2047           return '1';
        LDI     R16, 49
        RET
// 2048         }
// 2049         else if(data == 3)
??dimmer_convert_1:
        CPI     R16, 3
        BRNE    ??dimmer_convert_2
// 2050         {
// 2051           return '2';
        LDI     R16, 50
        RET
// 2052         }
// 2053         else if(data == 4)
??dimmer_convert_2:
        CPI     R16, 4
        BRNE    ??dimmer_convert_3
// 2054         {
// 2055           return '3';
        LDI     R16, 51
        RET
// 2056         }
// 2057         else if(data == 5)
??dimmer_convert_3:
        CPI     R16, 5
        BRNE    ??dimmer_convert_4
// 2058         {
// 2059           return '4';
        LDI     R16, 52
        RET
// 2060         }
// 2061         else if(data == 6)
??dimmer_convert_4:
        CPI     R16, 6
        BRNE    ??dimmer_convert_5
// 2062         {
// 2063           return '5';
        LDI     R16, 53
        RET
// 2064         }
// 2065         else if(data == 7 || data == 8)
??dimmer_convert_5:
        CPI     R16, 7
        BREQ    ??dimmer_convert_6
        CPI     R16, 8
        BRNE    ??dimmer_convert_7
// 2066         {
// 2067           return '6';
??dimmer_convert_6:
        LDI     R16, 54
        RET
// 2068         }
// 2069         else
// 2070         {
// 2071           return '7';
??dimmer_convert_7:
        LDI     R16, 55
        RET
        CFI EndBlock cfiBlock23
// 2072         }
// 2073 }
// 2074 

        RSEG CODE:CODE:NOROOT(1)
// 2075 void send_group_frame(unsigned char argument)
send_group_frame:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function send_group_frame
// 2076 {
        FUNCALL send_group_frame, CharToStr
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_frame, send_frame_pp_broad
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL send_group_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 30, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        SBIW    R29:R28, 29
        CFI CFA_Y Y+30
        MOV     R24, R16
// 2077   unsigned char buffer_short[9] = "B5001200";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "B5001200">`)
        LDI     R31, (`?<Constant "B5001200">`) >> 8
        LDI     R20, 9
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 2078   unsigned char buffer_tx[17] = "D20001428C000944";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 244
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R20, 17
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 2079   unsigned char buffer[3];
// 2080   signed char temp;
// 2081 
// 2082   CharToStr(KO_conf.GR,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 6)
        CALL    CharToStr
// 2083   buffer_short[2] = buffer[0];
        LD      R16, Y
        STD     Y+5, R16
// 2084   buffer_short[3] = buffer[1];
        LDD     R16, Y+1
        STD     Y+6, R16
// 2085 
// 2086   buffer_tx[10] = buffer[0];
        LD      R17, Y
        STD     Y+22, R17
// 2087   buffer_tx[11] = buffer[1];
        STD     Y+23, R16
// 2088 
// 2089   switch(argument)
        SUBI    R24, 1
        BREQ    ??send_group_frame_0
        DEC     R24
        BREQ    ??send_group_frame_1
        DEC     R24
        BREQ    ??send_group_frame_2
        SUBI    R24, 5
        BREQ    ??send_group_frame_3
        RJMP    ??send_group_frame_4
// 2090   {
// 2091     case ON:
// 2092     if(KO_conf.GR != 0)
??send_group_frame_0:
        LDS     R16, (KO_conf + 6)
        TST     R16
        BREQ    ??send_group_frame_4
// 2093       send_frame_pp_broad(buffer_short,TRANS_DELAY);
??send_group_frame_5:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_broad
        RJMP    ??send_group_frame_4
// 2094     break;
// 2095 
// 2096     case OFF:
// 2097       if(KO_conf.GR != 0)
??send_group_frame_1:
        LDS     R16, (KO_conf + 6)
        TST     R16
        BREQ    ??send_group_frame_4
// 2098       {
// 2099         buffer_short[7] = '1';
        LDI     R16, 49
??send_group_frame_6:
        STD     Y+10, R16
// 2100         send_frame_pp_broad(buffer_short,TRANS_DELAY);
        RJMP    ??send_group_frame_5
// 2101       }
// 2102     break;
// 2103 
// 2104     case DIM_STEP:
// 2105       if(KO_conf.GR != 0)
??send_group_frame_2:
        LDS     R16, (KO_conf + 6)
        TST     R16
        BREQ    ??send_group_frame_4
// 2106       {
// 2107         temp = IR_reception.pipe[6];
        LDS     R16, (IR_reception + 6)
// 2108         if(temp > 0)
        CPI     R16, 1
        BRLT    ??send_group_frame_7
// 2109         {
// 2110           buffer_short[7] = '3';
        LDI     R16, 51
        RJMP    ??send_group_frame_6
// 2111           send_frame_pp_broad(buffer_short,TRANS_DELAY);
// 2112         }
// 2113         else if(temp < 0)
??send_group_frame_7:
        TST     R16
        BRPL    ??send_group_frame_4
// 2114         {
// 2115           buffer_short[7] = '4';
        LDI     R16, 52
        STD     Y+10, R16
// 2116           send_frame_pp_broad(buffer_short,TRANS_DELAY);
        RJMP    ??send_group_frame_5
// 2117         }
// 2118       }
// 2119     break;
// 2120 
// 2121     case ERASE:
// 2122       send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
??send_group_frame_3:
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 244
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 2123     break;
// 2124 
// 2125     default:break;
// 2126   }
// 2127 }
??send_group_frame_4:
        ADIW    R29:R28, 29
        CFI CFA_Y Y+1
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock24
// 2128 

        RSEG CODE:CODE:NOROOT(1)
// 2129 unsigned int write_parameter_scenario(void)
write_parameter_scenario:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function write_parameter_scenario
// 2130 {
// 2131 	unsigned char channel = g_asc_reception_buffer[CHANNEL];
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R20, Z+7
// 2132 	ClrBit(channel,7);
// 2133 	channel -= 2;
        ANDI    R20, 0x7F
        SUBI    R20, 2
// 2134 	
// 2135 	switch(g_asc_reception_buffer[PAR_N])
        LDD     R16, Z+6
        SUBI    R16, 1
        BREQ    ??write_parameter_scenario_0
        SUBI    R16, 2
        BREQ    ??write_parameter_scenario_1
        SUBI    R16, 17
        BREQ    ??write_parameter_scenario_2
        DEC     R16
        BREQ    ??write_parameter_scenario_3
        DEC     R16
        BREQ    ??write_parameter_scenario_4
        DEC     R16
        BREQ    ??write_parameter_scenario_5
        RJMP    ??write_parameter_scenario_6
// 2136 	{
// 2137 		case 1: //D2 00 01 43 8D 00 01 02
// 2138 			if(g_asc_reception_buffer[PAR_V] >= 1)
??write_parameter_scenario_0:
        LDD     R16, Z+5
        TST     R16
        BREQ    ??write_parameter_scenario_7
// 2139 			{
// 2140 				ee_scenario[channel].ns_number = g_asc_reception_buffer[PAR_V];
        LDD     R18, Z+5
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R20, LOW(ee_scenario)
        LDI     R21, (ee_scenario) >> 8
        ADD     R20, R16
        ADC     R21, R17
        MOV     R16, R18
??write_parameter_scenario_8:
        CALL    __eeput8_16
// 2141 			}
// 2142 			else
// 2143 			{
// 2144 				return PAR_OUT_OF_RANGE;
// 2145 			}
// 2146 		break;
// 2147 		
// 2148 		case 3:
// 2149 			if(g_asc_reception_buffer[PAR_V] >= 0 && g_asc_reception_buffer[PAR_V] <= 0x03)
// 2150 			{
// 2151 				ee_scenario[channel].reg_type = g_asc_reception_buffer[PAR_V];
// 2152 			}
// 2153 			else
// 2154 			{
// 2155 				return PAR_OUT_OF_RANGE;
// 2156 			}
// 2157 		break;
// 2158 		
// 2159 		case 20:
// 2160 			ee_scenario[channel].id[0] = g_asc_reception_buffer[PAR_V];
// 2161 		break;
// 2162 		
// 2163 		case 21:
// 2164 			ee_scenario[channel].id[1] = g_asc_reception_buffer[PAR_V];
// 2165 		break;
// 2166 		
// 2167 		case 22:
// 2168 			if(g_asc_reception_buffer[PAR_V] >= 0 && g_asc_reception_buffer[PAR_V] <= 0x0F)
// 2169 			{
// 2170 				ee_scenario[channel].id[2] = g_asc_reception_buffer[PAR_V];
// 2171 			}
// 2172 			else
// 2173 			{
// 2174 				return PAR_OUT_OF_RANGE;
// 2175 			}
// 2176 		break;
// 2177 		
// 2178 		case 23:
// 2179 			if(g_asc_reception_buffer[PAR_V] >= 0 && g_asc_reception_buffer[PAR_V] <= 0x0F)
// 2180 			{
// 2181 				ee_scenario[channel].key_number = g_asc_reception_buffer[PAR_V];
// 2182 			}
// 2183 			else
// 2184 			{
// 2185 				return PAR_OUT_OF_RANGE;
// 2186 			}
// 2187 		break;
// 2188 		
// 2189 		default:
// 2190 			return PAR_NOT_IMPLEMENTED;
// 2191 	}
// 2192   return 0;
        LDI     R16, 0
        LDI     R17, 0
        RET
??write_parameter_scenario_7:
        LDI     R16, 1
        RJMP    ??write_parameter_scenario_9
??write_parameter_scenario_1:
        LDD     R16, Z+5
        LDD     R16, Z+5
        CPI     R16, 4
        BRCC    ??write_parameter_scenario_7
        LDD     R22, Z+5
        LDI     R18, LOW((ee_scenario + 1))
        LDI     R19, HIGH((ee_scenario + 1))
??write_parameter_scenario_10:
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOV     R16, R22
        MOVW    R21:R20, R19:R18
        RJMP    ??write_parameter_scenario_8
??write_parameter_scenario_2:
        LDD     R22, Z+5
        LDI     R18, LOW((ee_scenario + 2))
        LDI     R19, HIGH((ee_scenario + 2))
        RJMP    ??write_parameter_scenario_10
??write_parameter_scenario_3:
        LDD     R22, Z+5
        LDI     R18, LOW((ee_scenario + 3))
        LDI     R19, HIGH((ee_scenario + 3))
        RJMP    ??write_parameter_scenario_10
??write_parameter_scenario_4:
        LDD     R16, Z+5
        LDD     R16, Z+5
        CPI     R16, 16
        BRCC    ??write_parameter_scenario_7
        LDD     R22, Z+5
        LDI     R18, LOW((ee_scenario + 4))
        LDI     R19, HIGH((ee_scenario + 4))
        RJMP    ??write_parameter_scenario_10
??write_parameter_scenario_5:
        LDD     R16, Z+5
        LDD     R16, Z+5
        CPI     R16, 16
        BRCC    ??write_parameter_scenario_7
        LDD     R22, Z+5
        LDI     R18, LOW((ee_scenario + 5))
        LDI     R19, HIGH((ee_scenario + 5))
        RJMP    ??write_parameter_scenario_10
??write_parameter_scenario_6:
        LDI     R16, 0
??write_parameter_scenario_9:
        LDI     R17, 255
        RET
        CFI EndBlock cfiBlock25
// 2193 }
// 2194 

        RSEG CODE:CODE:NOROOT(1)
// 2195 void parameter_setting_error_answer(unsigned int value)
parameter_setting_error_answer:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function parameter_setting_error_answer
// 2196 {
        FUNCALL parameter_setting_error_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_setting_error_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_setting_error_answer, CharToStr
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL parameter_setting_error_answer, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 24, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
        SBIW    R29:R28, 20
        CFI CFA_Y Y+24
        MOVW    R27:R26, R17:R16
// 2197 	unsigned char buffer_tx[17] = "D20001348D000000";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348D000000">_4`)
        LDI     R31, (`?<Constant "D20001348D000000">_4`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 2198 	unsigned char buffer[3];
// 2199 	unsigned char channel = g_asc_reception_buffer[CHANNEL];
        LDS     R25, (g_asc_reception_buffer + 7)
// 2200 	unsigned char temp;
// 2201 
// 2202 	ClrBit(channel,7);
        ANDI    R25, 0x7F
// 2203 	temp = channel;
        MOV     R24, R25
// 2204 
// 2205   if(channel > 0x11)
        CPI     R25, 18
        BRCS    ??parameter_setting_error_answer_0
// 2206   {
// 2207     buffer_tx[8] = '8';
        LDI     R16, 56
        STD     Y+11, R16
// 2208 		buffer_tx[9] = 'B';
        LDI     R16, 66
        STD     Y+12, R16
// 2209     buffer_tx[10] = 'F';
        LDI     R16, 70
        STD     Y+13, R16
// 2210     buffer_tx[11] = 'F';
        STD     Y+14, R16
// 2211     buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 2212     buffer_tx[13] = '4';
        LDI     R16, 52
        STD     Y+16, R16
// 2213     SetBit(temp,7);
        ORI     R24, 0x80
// 2214     CharToStr(temp,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 2215     buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 2216     buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 2217     send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 2218   }
// 2219 
// 2220 	switch(value)
??parameter_setting_error_answer_0:
        MOVW    R31:R30, R27:R26
        SUBI    R30, 0
        SBCI    R31, 255
        BREQ    ??parameter_setting_error_answer_1
        SBIW    R31:R30, 1
        BREQ    ??parameter_setting_error_answer_2
        RJMP    ??parameter_setting_error_answer_3
// 2221 	{
// 2222 		case PAR_NOT_IMPLEMENTED:
// 2223 			buffer_tx[10] = g_reception_buffer[12];
??parameter_setting_error_answer_1:
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+13, R16
// 2224 			buffer_tx[11] = g_reception_buffer[13];
        LDD     R16, Z+13
        STD     Y+14, R16
// 2225 			buffer_tx[12] = 'F';
        LDI     R16, 70
        STD     Y+15, R16
// 2226 			buffer_tx[13] = 'F';
        STD     Y+16, R16
// 2227       if(channel == 0x01)
        CPI     R25, 1
        BRNE    ??parameter_setting_error_answer_4
// 2228       {
// 2229         if(product_information.conf_type == NONE_CONFED)
??parameter_setting_error_answer_5:
        LDS     R16, product_information
        CPI     R16, 3
        BRNE    ??parameter_setting_error_answer_6
// 2230         {
// 2231           buffer_tx[14] = '8';
        LDI     R16, 56
??parameter_setting_error_answer_7:
        STD     Y+17, R16
// 2232           buffer_tx[15] = '1';
        LDI     R16, 49
        RJMP    ??parameter_setting_error_answer_8
// 2233         }
// 2234         else
// 2235         {
// 2236           buffer_tx[14] = '0';
??parameter_setting_error_answer_6:
        LDI     R16, 48
        RJMP    ??parameter_setting_error_answer_7
// 2237           buffer_tx[15] = '1';
// 2238         }
// 2239       }
// 2240       else
// 2241       {
// 2242 				if(ee_scenario[channel-2].confed)
// 2243 				{
// 2244 					ClrBit(temp,7);
// 2245 				}
// 2246 				else
// 2247 				{
// 2248 					SetBit(temp,7);
??parameter_setting_error_answer_9:
        ORI     R24, 0x80
// 2249 				}
// 2250 				CharToStr(temp,buffer);
??parameter_setting_error_answer_10:
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 2251 				buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 2252         buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
??parameter_setting_error_answer_8:
        STD     Y+18, R16
// 2253       }
// 2254 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 2255 			//flags.KO_conf_right = 0;
// 2256 			flags.parameter_setting_wrong = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+4
        LDD     R17, Z+5
        ORI     R16, 0x02
        STD     Z+5, R17
        STD     Z+4, R16
// 2257 		break;
// 2258 
// 2259 		case PAR_OUT_OF_RANGE:
// 2260 			buffer_tx[10] = g_reception_buffer[12];
// 2261 			buffer_tx[11] = g_reception_buffer[13];
// 2262 			buffer_tx[12] = 'F';
// 2263 			buffer_tx[13] = 'E';
// 2264 			if(channel == 0x01)
// 2265       {
// 2266         if(product_information.conf_type == NONE_CONFED)
// 2267         {
// 2268           buffer_tx[14] = '8';
// 2269           buffer_tx[15] = '1';
// 2270         }
// 2271         else
// 2272         {
// 2273           buffer_tx[14] = '0';
// 2274           buffer_tx[15] = '1';
// 2275         }
// 2276       }
// 2277       else
// 2278       {
// 2279 				if(ee_scenario[channel-2].confed)
// 2280 				{
// 2281 					ClrBit(temp,7);
// 2282 				}
// 2283 				else
// 2284 				{
// 2285 					SetBit(temp,7);
// 2286 				}
// 2287 				CharToStr(temp,buffer);
// 2288 				buffer_tx[14] = buffer[0];
// 2289         buffer_tx[15] = buffer[1];
// 2290       }
// 2291 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 2292 			//flags.KO_conf_right = 0;
// 2293 			flags.parameter_setting_wrong = 1;
// 2294 		break;
// 2295 
// 2296 		default:break;
// 2297 	}
// 2298 
// 2299 }
??parameter_setting_error_answer_3:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+4
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI CFA_Y Y+24
??parameter_setting_error_answer_2:
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        LDD     R16, Z+12
        STD     Y+13, R16
        LDD     R16, Z+13
        STD     Y+14, R16
        LDI     R16, 70
        STD     Y+15, R16
        LDI     R16, 69
        STD     Y+16, R16
        CPI     R25, 1
        BREQ    ??parameter_setting_error_answer_5
??parameter_setting_error_answer_4:
        LDI     R18, LOW((ee_scenario - 8))
        LDI     R19, HIGH((ee_scenario - 8))
        MOV     R20, R25
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        TST     R16
        BREQ    ??parameter_setting_error_answer_9
        ANDI    R24, 0x7F
        RJMP    ??parameter_setting_error_answer_10
        CFI EndBlock cfiBlock26
// 2300 

        RSEG CODE:CODE:NOROOT(1)
// 2301 void KO_setting_procedure(void)
KO_setting_procedure:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function KO_setting_procedure
// 2302 {
        FUNCALL KO_setting_procedure, KO_setting_error_frame
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_procedure, KO_parameter_initial_temp
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_procedure, KO_setting_error_frame
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_procedure, KO_setting_error_frame
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_procedure, KO_setting_error_frame
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+7
        SBRS    R16, 7
        RJMP    ??KO_setting_procedure_0
// 2303   if(GetBit(g_asc_reception_buffer[CHANNEL],7))
// 2304 	{
// 2305 		if( g_asc_reception_buffer[CHANNEL] == 0x80 )
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 128
        BRNE    ??KO_setting_procedure_1
// 2306 		{
// 2307       flags.KO_erase_all = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x04
        RJMP    ??KO_setting_procedure_2
// 2308 		}
// 2309     else if(g_asc_reception_buffer[CHANNEL] == 0x81)
??KO_setting_procedure_1:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 129
        BRNE    ??KO_setting_procedure_3
// 2310     {
// 2311       flags.KO_erase_main = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x08
??KO_setting_procedure_2:
        STD     Z+3, R17
        STD     Z+2, R16
        RET
// 2312     }
// 2313     else if(g_asc_reception_buffer[CHANNEL] >= 0x82 && g_asc_reception_buffer[CHANNEL] <= 0x91)
??KO_setting_procedure_3:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 130
        BRCC    $+2+2
        RJMP    ??KO_setting_procedure_4
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 146
        BRCS    $+2+2
        RJMP    ??KO_setting_procedure_4
// 2314     {
// 2315       temp_variable.erase_KO_scenario = g_asc_reception_buffer[CHANNEL];
        LDS     R16, (g_asc_reception_buffer + 7)
        STS     (temp_variable + 5), R16
// 2316       ClrBit(temp_variable.erase_KO_scenario,7);
// 2317       temp_variable.erase_KO_scenario -= 2;
        ANDI    R16, 0x7F
        SUBI    R16, 2
        STS     (temp_variable + 5), R16
// 2318       flags.KO_erase_scenario = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x10
        RJMP    ??KO_setting_procedure_2
// 2319     }
// 2320 	}
// 2321 	else
// 2322   {
// 2323     if(g_asc_reception_buffer[CHANNEL] == 0x01)
??KO_setting_procedure_0:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??KO_setting_procedure_5
// 2324     {
// 2325 #ifdef NONE_CONFED_203
// 2326         if(g_asc_reception_buffer[5] == 0x00)
        LDS     R16, (g_asc_reception_buffer + 5)
        TST     R16
        BREQ    $+2+2
        RJMP    ??KO_setting_procedure_6
// 2327         {
// 2328           if(g_asc_reception_buffer[6] == 0xA8 || g_asc_reception_buffer[6] == 0xA6 || g_asc_reception_buffer[6] == 0x77
// 2329               || g_asc_reception_buffer[6] == 0x80 || g_asc_reception_buffer[6] == 0xA4 || g_asc_reception_buffer[6] == 0xA5)
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 168
        BREQ    ??KO_setting_procedure_7
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 166
        BREQ    ??KO_setting_procedure_7
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 119
        BREQ    ??KO_setting_procedure_7
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 128
        BREQ    ??KO_setting_procedure_7
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 164
        BREQ    ??KO_setting_procedure_7
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 165
        BREQ    $+2+2
        RJMP    ??KO_setting_procedure_6
??KO_setting_procedure_7:
        LDS     R16, product_information
        CPI     R16, 3
        BREQ    ??KO_setting_procedure_8
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRC    R16, 2
        RJMP    ??KO_setting_procedure_8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRC    R16, 3
        RJMP    ??KO_setting_procedure_8
        LDS     R16, (KO + 2)
        LDS     R17, (g_reception_buffer + 12)
        CP      R16, R17
        BRNE    ??KO_setting_procedure_9
        LDS     R16, (KO + 3)
        LDS     R17, (g_reception_buffer + 13)
        CP      R16, R17
        BREQ    ??KO_setting_procedure_8
// 2330           {
// 2331 						if((product_information.conf_type != NONE_CONFED && flags.KO_erase_all == 0 && flags.KO_erase_main == 0) && (KO[2] != g_reception_buffer[12] || KO[3] != g_reception_buffer[13]))
// 2332 						{
// 2333 							KO_setting_error_frame(ASSIGNED_AGAIN,1);
??KO_setting_procedure_9:
        LDI     R17, 1
        LDI     R16, 2
        RJMP    ??KO_setting_procedure_10
// 2334 						}
??KO_setting_procedure_8:
        LDS     R16, (g_reception_buffer + 10)
        STS     KO, R16
// 2335 						else
// 2336 						{
// 2337             	KO[0] = g_reception_buffer[10];
// 2338             	KO[1] = g_reception_buffer[11];
        LDS     R16, (g_reception_buffer + 11)
        STS     (KO + 1), R16
// 2339             	KO[2] = g_reception_buffer[12];
        LDS     R16, (g_reception_buffer + 12)
        STS     (KO + 2), R16
// 2340             	KO[3] = g_reception_buffer[13];
        LDS     R16, (g_reception_buffer + 13)
        STS     (KO + 3), R16
// 2341             	product_information.conf_type = ADVANCED;    //modified now
        LDI     R16, 2
        STS     product_information, R16
// 2342 							if(g_asc_reception_buffer[6] == 0xA8 || g_asc_reception_buffer[6] == 0xA6 || g_asc_reception_buffer[6] == 0x77)
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 168
        BREQ    ??KO_setting_procedure_11
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 166
        BREQ    ??KO_setting_procedure_11
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 119
        BRNE    ??KO_setting_procedure_12
// 2343             	{
// 2344               	product_information.cen_system = 0;
??KO_setting_procedure_11:
        LDI     R16, 0
        STS     (product_information + 4), R16
// 2345 								temp_product_information.cen_system = 0;
        STS     (temp_product_information + 4), R16
        RJMP    ??KO_setting_procedure_13
// 2346             	}
// 2347             	else
// 2348             	{
// 2349               	product_information.cen_system = 1;
??KO_setting_procedure_12:
        LDI     R16, 1
        STS     (product_information + 4), R16
// 2350 								temp_product_information.cen_system = 1;
        STS     (temp_product_information + 4), R16
// 2351               	flags_muti_step.cen_system_step = 1;
        STS     flags_muti_step, R16
// 2352             	}
// 2353 							KO_parameter_initial_temp();
??KO_setting_procedure_13:
        CALL    KO_parameter_initial_temp
// 2354 							flags.KO_conf_right = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x02
        STD     Z+3, R17
        STD     Z+2, R16
// 2355 							flags.parameter_setting_wrong = 0;
        LDD     R16, Z+4
        LDD     R17, Z+5
        ANDI    R16, 0xFD
        STD     Z+5, R17
        STD     Z+4, R16
        RET
// 2356 							//delay_ms(100); //avoid to 3 times transfier from interface
// 2357 							//frame_buffer_clear();
// 2358 						}
// 2359           }
// 2360 					else
// 2361 					{
// 2362 						KO_setting_error_frame(NOT_IMPLEMENTED,1);
??KO_setting_procedure_6:
        LDI     R17, 1
        RJMP    ??KO_setting_procedure_14
// 2363 					}
// 2364         }
// 2365 				else
// 2366 				{
// 2367 					KO_setting_error_frame(NOT_IMPLEMENTED,1);
// 2368 				}
// 2369 #endif
// 2370 
// 2371 #ifdef NONE_CONFED_204
// 2372       if(g_asc_reception_buffer[5] == 0x00)
// 2373       {
// 2374         switch(g_asc_reception_buffer[6])
// 2375         {
// 2376         case 0xA6:
// 2377           KO[0] = g_reception_buffer[10];
// 2378           KO[1] = g_reception_buffer[11];
// 2379           KO[2] = g_reception_buffer[12];
// 2380           KO[3] = g_reception_buffer[13];
// 2381           product_information.conf_type = 2;    //modified now
// 2382           flags.KO_conf_right = 1;
// 2383           break;
// 2384 
// 2385         case 0xA4:
// 2386           KO[0] = g_reception_buffer[10];
// 2387           KO[1] = g_reception_buffer[11];
// 2388           KO[2] = g_reception_buffer[12];
// 2389           KO[3] = g_reception_buffer[13];
// 2390           product_information.conf_type = 2;    //modified now
// 2391           flags.KO_conf_right = 1;
// 2392           break;
// 2393 
// 2394         default:break;
// 2395         }
// 2396       }
// 2397 #endif
// 2398 
// 2399 #ifdef NONE_CONFED_1FF
// 2400       if(g_asc_reception_buffer[5] == 0x00)
// 2401       {
// 2402         switch(g_asc_reception_buffer[6])
// 2403         {
// 2404         case 0x77:
// 2405           KO[0] = g_reception_buffer[10];
// 2406           KO[1] = g_reception_buffer[11];
// 2407           KO[2] = g_reception_buffer[12];
// 2408           KO[3] = g_reception_buffer[13];
// 2409           product_information.conf_type = 2;    //modified now
// 2410           flags.KO_conf_right = 1;
// 2411           break;
// 2412 
// 2413         case 0xA5:
// 2414           KO[0] = g_reception_buffer[10];
// 2415           KO[1] = g_reception_buffer[11];
// 2416           KO[2] = g_reception_buffer[12];
// 2417           KO[3] = g_reception_buffer[13];
// 2418           product_information.conf_type = 2;    //modified now
// 2419           flags.KO_conf_right = 1;
// 2420           break;
// 2421 
// 2422         case 0x70:
// 2423           KO[0] = g_reception_buffer[10];
// 2424           KO[1] = g_reception_buffer[11];
// 2425           KO[2] = g_reception_buffer[12];
// 2426           KO[3] = g_reception_buffer[13];
// 2427           product_information.conf_type = 2;    //modified now
// 2428           flags.KO_conf_right = 1;
// 2429           break;
// 2430         default:break;
// 2431         }
// 2432       }
// 2433 #endif
// 2434     }
// 2435     else if(g_asc_reception_buffer[CHANNEL] >= 0x02 && g_asc_reception_buffer[CHANNEL] <= 0x11)
??KO_setting_procedure_5:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 2
        BRCS    ??KO_setting_procedure_15
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 18
        BRCC    ??KO_setting_procedure_15
// 2436     {
// 2437       if(g_asc_reception_buffer[5] == 0x01 && g_asc_reception_buffer[6] == 0xAF)
        LDS     R16, (g_asc_reception_buffer + 5)
        CPI     R16, 1
        BRNE    ??KO_setting_procedure_16
        LDS     R16, (g_asc_reception_buffer + 6)
        CPI     R16, 175
        BRNE    ??KO_setting_procedure_16
        LDS     R16, (g_asc_reception_buffer + 7)
        STS     (temp_variable + 6), R16
// 2438       {
// 2439         temp_variable.conf_KO_scenario = g_asc_reception_buffer[CHANNEL];
// 2440         temp_variable.conf_KO_scenario -= 2;
        LDS     R16, (temp_variable + 6)
        SUBI    R16, 2
        STS     (temp_variable + 6), R16
// 2441         flags.scenario_scs_confed = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x40
        RJMP    ??KO_setting_procedure_2
// 2442       }
// 2443 			else
// 2444 			{
// 2445 				KO_setting_error_frame(NOT_IMPLEMENTED,g_asc_reception_buffer[CHANNEL]);
??KO_setting_procedure_16:
        LDS     R17, (g_asc_reception_buffer + 7)
??KO_setting_procedure_14:
        LDI     R16, 0
??KO_setting_procedure_10:
        RCALL   KO_setting_error_frame
        RET
// 2446 			}
// 2447     }
// 2448 		else
// 2449 		{
// 2450 			KO_setting_error_frame(OUT_KO,g_asc_reception_buffer[CHANNEL]);
??KO_setting_procedure_15:
        LDS     R17, (g_asc_reception_buffer + 7)
        LDI     R16, 4
        RCALL   KO_setting_error_frame
// 2451 		}
// 2452   }
// 2453 }
??KO_setting_procedure_4:
        RET
        CFI EndBlock cfiBlock27
// 2454 

        RSEG CODE:CODE:NOROOT(1)
// 2455 void configuration_procedure(void)
configuration_procedure:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function configuration_procedure
// 2456 {
        FUNCALL configuration_procedure, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, factory_default
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, system_reset
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_normal
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, KO_parameter_initial
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, CharToStr
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, StrToChar
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, KO_parameter_initial
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, factory_default
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, scenario_remove
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, remember_parameter
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, StrToChar
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, StrToChar
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, system_reset
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_normal
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, send_group_pnl_frame
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, send_group_pnl_frame
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_normal
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_ms
        LOCFRAME CSTACK, 78, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_ms
        LOCFRAME CSTACK, 78, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, led_blinking_normal
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, strncpy
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, CharToStr
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL configuration_procedure, timer_flex_initial
        LOCFRAME CSTACK, 74, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE3_L09
        CFI R26 Frame(CFA_Y, -1)
        CFI R25 Frame(CFA_Y, -2)
        CFI R24 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        SBIW    R29:R28, 63
        CFI CFA_Y Y+66
        SBIW    R29:R28, 7
        CFI CFA_Y Y+73
// 2457   unsigned char i;
// 2458 	unsigned char buffer[3];
// 2459 	unsigned char buffer_tx[17];			// 20090216
// 2460 	//static unsigned char data[7];
// 2461   unsigned char conf_right = 0xFF;
        LDI     R16, 255
// 2462   //unsigned char flag_avoid_twice_wrong = 0;
// 2463   unsigned char flag_reset = 0;
        LDI     R26, 0
        LDS     R17, (g_asc_reception_buffer + 6)
        SUBI    R17, 0
        BREQ    ??configuration_procedure_0
        DEC     R17
        BRNE    $+2+2
        RJMP    ??configuration_procedure_1
        SUBI    R17, 8
        BRNE    $+2+2
        RJMP    ??configuration_procedure_2
        DEC     R17
        BRNE    $+2+2
        RJMP    ??configuration_procedure_3
        RJMP    ??configuration_procedure_4
// 2464 
// 2465   switch(g_asc_reception_buffer[6])
// 2466 			{
// 2467 				case 0x00:  //configuration set frame
// 2468 					switch(g_asc_reception_buffer[7])
??configuration_procedure_0:
        LDS     R17, (g_asc_reception_buffer + 7)
        SUBI    R17, 170
        BREQ    ??configuration_procedure_5
        SUBI    R17, 70
        BRNE    $+2+2
        RJMP    ??configuration_procedure_6
        SUBI    R17, 10
        BRNE    $+2+2
        RJMP    ??configuration_procedure_7
        SUBI    R17, 5
        BRNE    $+2+2
        RJMP    ??configuration_procedure_8
        DEC     R17
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2469 					{
// 2470 						case 0x00: //start configuration
// 2471                 key_result.short_pressed = 0;
        LDI     R30, LOW(key_result)
        LDI     R31, (key_result) >> 8
        ST      Z, R26
// 2472                 key_result.long_pressed = 0;
        STD     Z+1, R26
// 2473 								state.main_state = STATE_PRE_PROGRAMMING;
??configuration_procedure_9:
        LDI     R17, 16
        STS     (state + 2), R26
        STS     (state + 3), R17
        RJMP    ??configuration_procedure_4
// 2474 						break;
// 2475 
// 2476 						case 0xAA: //stop sending frame
// 2477 							if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_procedure_5:
        LDS     R18, (state + 2)
        LDS     R19, (state + 3)
        CPI     R18, 0
        LDI     R17, 33
        CPC     R19, R17
        BRNE    ??configuration_procedure_10
// 2478               {
// 2479 								flags.AA_received = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R18, Z+2
        LDD     R19, Z+3
        ORI     R19, 0x40
        STD     Z+3, R19
        STD     Z+2, R18
// 2480                 if(flags.KO_conf_right)
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRC    R18, 1
// 2481                 {
// 2482                   //flags.KO_conf_right = 0;
// 2483                   conf_right = 1;
        LDI     R16, 1
// 2484                 }
// 2485               }
// 2486 
// 2487 							if(flags_muti_step.cen_system_step == 2 || flags.KO_erase_all || flags.KO_erase_main || flags.KO_erase_scenario || flags.scenario_scs_confed)
??configuration_procedure_10:
        LDS     R17, flags_muti_step
        CPI     R17, 2
        BREQ    ??configuration_procedure_11
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRC    R18, 2
        RJMP    ??configuration_procedure_11
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRC    R18, 3
        RJMP    ??configuration_procedure_11
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRC    R18, 4
        RJMP    ??configuration_procedure_11
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRS    R18, 6
        RJMP    ??configuration_procedure_12
// 2488               {
// 2489                 conf_right = 1;
??configuration_procedure_11:
        LDI     R16, 1
        RJMP    ??configuration_procedure_13
// 2490               }
// 2491 							else if(flags.parameter_write_right)
??configuration_procedure_12:
        LDD     R18, Z+2
        LDD     R19, Z+3
        SBRC    R18, 7
        RJMP    ??configuration_procedure_11
// 2492 							{
// 2493 								conf_right = 1;
// 2494 							}
// 2495 
// 2496 							if(flags_muti_step.cen_system_step == CONF_WRONG || flags.parameter_setting_wrong == 1)
??configuration_procedure_13:
        LDS     R17, flags_muti_step
        CPI     R17, 4
        BREQ    ??configuration_procedure_14
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R18, Z+4
        LDD     R19, Z+5
        SBRC    R18, 1
// 2497               {
// 2498                 conf_right = 0;
??configuration_procedure_14:
        LDI     R16, 0
// 2499               }
// 2500 							
// 2501               if(conf_right == 1)
??configuration_procedure_15:
        CPI     R16, 1
        BRNE    ??configuration_procedure_16
// 2502                 send_frame_pp_ext_broad("D20001348C0000AB",TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW(`?<Constant "D20001348C0000AB">`)
        LDI     R17, (`?<Constant "D20001348C0000AB">`) >> 8
        RJMP    ??configuration_procedure_17
// 2503               else if(conf_right == 0)
??configuration_procedure_16:
        TST     R16
        BRNE    ??configuration_procedure_18
// 2504                 send_frame_pp_ext_broad("D20001348C0000EE",TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW((`?<Constant "D20001348C0000AB">` + 17))
        LDI     R17, HIGH((`?<Constant "D20001348C0000AB">` + 17))
??configuration_procedure_17:
        CALL    send_frame_pp_ext_broad
// 2505 
// 2506 							flags.parameter_setting_wrong = 0;
??configuration_procedure_18:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+4
        LDD     R17, Z+5
        ANDI    R16, 0xFD
        STD     Z+5, R17
        STD     Z+4, R16
// 2507 							flags.parameter_write_right = 0;
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R16, 0x7F
??configuration_procedure_19:
        STD     Z+3, R17
        STD     Z+2, R16
        RJMP    ??configuration_procedure_4
// 2508 						break;
// 2509 
// 2510 						case 0xF0: //reset EEP configuration
// 2511               if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_procedure_6:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2512               {
// 2513 							  factory_default();
        CALL    factory_default
// 2514 							  system_reset();
??configuration_procedure_20:
        CALL    system_reset
        RJMP    ??configuration_procedure_4
// 2515               }
// 2516 						break;
// 2517 
// 2518 						case 0xFA: //configuration aborted
// 2519               if(state.main_state == STATE_PROGRAMMING_DURING || state.main_state == STATE_TEST_DURING)
??configuration_procedure_7:
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    ??configuration_procedure_21
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2520               {
// 2521 							  state.main_state = STATE_NORMAL;
??configuration_procedure_21:
        STS     (state + 2), R26
        STS     (state + 3), R26
// 2522                 led_blinking_normal();
??configuration_procedure_22:
        CALL    led_blinking_normal
        RJMP    ??configuration_procedure_4
// 2523               }
// 2524 						break;
// 2525 
// 2526 						case 0xFF: //end of configuration
// 2527               if(flags.KO_erase_main && flags.KO_conf_right == 0)
??configuration_procedure_8:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 3
        RJMP    ??configuration_procedure_23
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRC    R16, 1
        RJMP    ??configuration_procedure_23
// 2528               {
// 2529                 flags.KO_erase_main = 0;
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R16, 0xF7
        STD     Z+3, R17
        STD     Z+2, R16
// 2530 								if(flags.AA_received)
        LDD     R16, Z+2
        LDD     R17, Z+3
        MOV     R16, R17
        SBRS    R16, 6
        RJMP    ??configuration_procedure_23
        LDI     R30, LOW(flash_KO)
        LDI     R31, (flash_KO) >> 8
        LD      R16, Z
        LDI     R20, LOW(ee_KO)
        LDI     R21, (ee_KO) >> 8
        CALL    __eeput8_16
// 2531 								{	
// 2532                 	//load_default_parameter();
// 2533 	              	//remember_parameter();
// 2534                 	ee_KO[0] = flash_KO[0];
// 2535                 	ee_KO[1] = flash_KO[1];
        LDD     R17, Z+1
        LDI     R20, LOW((ee_KO + 1))
        LDI     R21, HIGH((ee_KO + 1))
        MOV     R16, R17
        CALL    __eeput8_16
// 2536                 	ee_KO[2] = flash_KO[2];
        LDD     R18, Z+2
        LDI     R20, LOW((ee_KO + 2))
        LDI     R21, HIGH((ee_KO + 2))
        MOV     R16, R18
        CALL    __eeput8_16
// 2537                 	ee_KO[3] = flash_KO[3];
        LDD     R16, Z+3
        LDI     R20, LOW((ee_KO + 3))
        LDI     R21, HIGH((ee_KO + 3))
        CALL    __eeput8_16
        LD      R19, Z
        STS     KO, R19
// 2538                 	KO[0] = flash_KO[0];
// 2539                 	KO[1] = flash_KO[1];
        STS     (KO + 1), R17
// 2540                 	KO[2] = flash_KO[2];
        STS     (KO + 2), R18
// 2541                 	KO[3] = flash_KO[3];
        STS     (KO + 3), R16
        LDI     R16, 0
        LDI     R20, LOW((ee_product_information + 4))
        LDI     R21, HIGH((ee_product_information + 4))
        CALL    __eeput8_16
// 2542                 	ee_product_information.cen_system = 0;
// 2543 	              	ee_product_information.conf_type = NONE_CONFED;
        LDI     R16, 3
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        CALL    __eeput8_16
// 2544                 	product_information.cen_system = 0;
        STS     (product_information + 4), R26
// 2545 	              	product_information.conf_type = NONE_CONFED;
        STS     product_information, R16
        LDI     R16, 48
        LDI     R20, LOW((ee_configurators + 1))
        LDI     R21, HIGH((ee_configurators + 1))
        CALL    __eeput8_16
// 2546 
// 2547 	              	ee_configurators.A = '0';
// 2548 	              	ee_configurators.PL = '0';
        LDI     R20, LOW((ee_configurators + 2))
        LDI     R21, HIGH((ee_configurators + 2))
        CALL    __eeput8_16
// 2549 	              	ee_configurators.M = '0';
        LDI     R20, LOW((ee_configurators + 3))
        LDI     R21, HIGH((ee_configurators + 3))
        CALL    __eeput8_16
// 2550 	              	ee_configurators.S = '0';
        LDI     R20, LOW((ee_configurators + 4))
        LDI     R21, HIGH((ee_configurators + 4))
        CALL    __eeput8_16
// 2551 	              	ee_configurators.T = '0';
        LDI     R20, LOW((ee_configurators + 5))
        LDI     R21, HIGH((ee_configurators + 5))
        CALL    __eeput8_16
// 2552 
// 2553                 	Configurators.A = '0';
        LDI     R30, LOW(Configurators)
        LDI     R31, (Configurators) >> 8
        STD     Z+1, R16
// 2554 	             		Configurators.PL = '0';
        STD     Z+2, R16
// 2555 	              	Configurators.M = '0';
        STD     Z+3, R16
// 2556 	              	Configurators.S = '0';
        STD     Z+4, R16
// 2557 	              	Configurators.T = '0';
        STD     Z+5, R16
// 2558                 	//flag_reset = 1;
// 2559 								}
// 2560               }
// 2561 
// 2562               if(flags.KO_conf_right)
??configuration_procedure_23:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 1
        RJMP    ??configuration_procedure_24
// 2563               {
// 2564 								if(flags.AA_received )
        LDD     R16, Z+2
        LDD     R17, Z+3
        MOV     R16, R17
        SBRS    R16, 6
        RJMP    ??configuration_procedure_25
// 2565 								{
// 2566 									if(product_information.cen_system == 0)
        LDI     R24, LOW(product_information)
        LDI     R25, (product_information) >> 8
        LDS     R16, (product_information + 4)
        TST     R16
        BREQ    $+2+2
        RJMP    ??configuration_procedure_26
        LDS     R16, KO
        LDI     R20, LOW(ee_KO)
        LDI     R21, (ee_KO) >> 8
        CALL    __eeput8_16
// 2567 									{
// 2568 										ee_KO[0] = KO[0];
// 2569 										ee_KO[1] = KO[1];
        LDS     R16, (KO + 1)
        LDI     R20, LOW((ee_KO + 1))
        LDI     R21, HIGH((ee_KO + 1))
        CALL    __eeput8_16
// 2570 										ee_KO[2] = KO[2];
        LDS     R16, (KO + 2)
        LDI     R20, LOW((ee_KO + 2))
        LDI     R21, HIGH((ee_KO + 2))
        CALL    __eeput8_16
// 2571 										ee_KO[3] = KO[3];
        LDS     R16, (KO + 3)
        LDI     R20, LOW((ee_KO + 3))
        LDI     R21, HIGH((ee_KO + 3))
        CALL    __eeput8_16
        LDS     R16, KO
        LDI     R20, LOW(ee_KO_last)
        LDI     R21, (ee_KO_last) >> 8
        CALL    __eeput8_16
// 2572 										//to avoid power up KO confdiguration
// 2573 										ee_KO_last[0] = KO[0];
// 2574 										ee_KO_last[1] = KO[1];
        LDS     R16, (KO + 1)
        LDI     R20, LOW((ee_KO_last + 1))
        LDI     R21, HIGH((ee_KO_last + 1))
        CALL    __eeput8_16
// 2575 										ee_KO_last[2] = KO[2];
        LDS     R16, (KO + 2)
        LDI     R20, LOW((ee_KO_last + 2))
        LDI     R21, HIGH((ee_KO_last + 2))
        CALL    __eeput8_16
// 2576 										ee_KO_last[3] = KO[3];
        LDS     R16, (KO + 3)
        LDI     R20, LOW((ee_KO_last + 3))
        LDI     R21, HIGH((ee_KO_last + 3))
        CALL    __eeput8_16
// 2577 										//ee_KO_conf = KO_conf;  //2009 04 17
// 2578 										KO_parameter_initial();
        CALL    KO_parameter_initial
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(KO_conf)
        LDI     R31, (KO_conf) >> 8
        LDI     R20, 50
        LDI     R21, 0
        CALL    ?ML_SRAM_SRAM_16_L07
        MOVW    R23:R22, R29:R28
        SUBI    R22, 236
        SBCI    R23, 255
        LDI     R20, LOW(ee_KO_conf)
        LDI     R21, (ee_KO_conf) >> 8
        MOVW    R31:R30, R23:R22
        LDI     R17, 50
        LDI     R18, 0
        CALL    ?ML_SRAM_EEPROM_16_16_L07
// 2579 										//KO_conf = ee_KO_conf;
// 2580 										ee_KO_conf = KO_conf;
// 2581 										//ee_PnG_KO_conf = KO_conf;
// 2582 										ee_variable.GR = KO_conf.GR;
        LDS     R16, (KO_conf + 6)
        LDI     R20, LOW(ee_variable)
        LDI     R21, (ee_variable) >> 8
        CALL    __eeput8_16
// 2583 										ee_variable.Reference = KO_conf.Reference;
        LDS     R16, (KO_conf + 5)
        LDI     R20, LOW((ee_variable + 1))
        LDI     R21, HIGH((ee_variable + 1))
        CALL    __eeput8_16
// 2584 										ee_flags.PnG_confed = 1;
        LDI     R20, LOW(ee_flags)
        LDI     R21, (ee_flags) >> 8
        CALL    __eeget16_16
        ORI     R16, 0x02
        LDI     R20, LOW(ee_flags)
        LDI     R21, (ee_flags) >> 8
        CALL    __eeput16_16
// 2585 										
// 2586 										if(KO_conf.AddressType == PP)
        LDS     R16, (KO_conf + 1)
        TST     R16
        BRNE    ??configuration_procedure_27
// 2587 										{
// 2588 											CharToStr(KO_conf.DesAdd,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 2)
        CALL    CharToStr
        LD      R16, Y
        LDI     R20, LOW((ee_configurators + 1))
        LDI     R21, HIGH((ee_configurators + 1))
        CALL    __eeput8_16
// 2589 											ee_configurators.A = buffer[0];
// 2590 											ee_configurators.PL = buffer[1];
        LDD     R16, Y+1
        LDI     R20, LOW((ee_configurators + 2))
        LDI     R21, HIGH((ee_configurators + 2))
        CALL    __eeput8_16
// 2591 										}
// 2592 										
// 2593 										ee_product_information = product_information;
??configuration_procedure_27:
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        MOVW    R31:R30, R25:R24
        LDI     R17, 7
        LDI     R18, 0
        RJMP    ??configuration_procedure_28
// 2594 									}
// 2595 									else if(product_information.cen_system == 1)
??configuration_procedure_26:
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??configuration_procedure_25
// 2596 									{
// 2597 									  buffer[0] = temp_product_information.local_A;
        LDS     R16, (temp_product_information + 2)
        ST      Y, R16
// 2598 										buffer[1] = temp_product_information.local_PL;
        LDS     R16, (temp_product_information + 3)
        STD     Y+1, R16
// 2599 										unsigned char address = StrToChar(buffer);
        MOVW    R17:R16, R29:R28
        CALL    StrToChar
// 2600 										if(address > 0 && address <= 0xAF)
        TST     R16
        BRNE    $+2+2
        RJMP    ??configuration_procedure_25
        CPI     R16, 176
        BRCS    $+2+2
        RJMP    ??configuration_procedure_25
        LDS     R16, KO
        LDI     R20, LOW(ee_KO)
        LDI     R21, (ee_KO) >> 8
        CALL    __eeput8_16
// 2601 										{
// 2602 											ee_KO[0] = KO[0];
// 2603 											ee_KO[1] = KO[1];
        LDS     R16, (KO + 1)
        LDI     R20, LOW((ee_KO + 1))
        LDI     R21, HIGH((ee_KO + 1))
        CALL    __eeput8_16
// 2604 											ee_KO[2] = KO[2];
        LDS     R16, (KO + 2)
        LDI     R20, LOW((ee_KO + 2))
        LDI     R21, HIGH((ee_KO + 2))
        CALL    __eeput8_16
// 2605 											ee_KO[3] = KO[3];
        LDS     R16, (KO + 3)
        LDI     R20, LOW((ee_KO + 3))
        LDI     R21, HIGH((ee_KO + 3))
        CALL    __eeput8_16
        LDS     R16, KO
        LDI     R20, LOW(ee_KO_last)
        LDI     R21, (ee_KO_last) >> 8
        CALL    __eeput8_16
// 2606 	
// 2607 											ee_KO_last[0] = KO[0];
// 2608 											ee_KO_last[1] = KO[1];
        LDS     R16, (KO + 1)
        LDI     R20, LOW((ee_KO_last + 1))
        LDI     R21, HIGH((ee_KO_last + 1))
        CALL    __eeput8_16
// 2609 											ee_KO_last[2] = KO[2];
        LDS     R16, (KO + 2)
        LDI     R20, LOW((ee_KO_last + 2))
        LDI     R21, HIGH((ee_KO_last + 2))
        CALL    __eeput8_16
// 2610 											ee_KO_last[3] = KO[3];
        LDS     R16, (KO + 3)
        LDI     R20, LOW((ee_KO_last + 3))
        LDI     R21, HIGH((ee_KO_last + 3))
        CALL    __eeput8_16
// 2611 	
// 2612 											KO_parameter_initial();
        CALL    KO_parameter_initial
// 2613 											ee_KO_conf = KO_conf;
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(KO_conf)
        LDI     R31, (KO_conf) >> 8
        LDI     R20, 50
        LDI     R21, 0
        CALL    ?ML_SRAM_SRAM_16_L07
        MOVW    R23:R22, R29:R28
        SUBI    R22, 236
        SBCI    R23, 255
        LDI     R20, LOW(ee_KO_conf)
        LDI     R21, (ee_KO_conf) >> 8
        MOVW    R31:R30, R23:R22
        LDI     R17, 50
        LDI     R18, 0
        CALL    ?ML_SRAM_EEPROM_16_16_L07
// 2614 											
// 2615 											ee_flags.PnG_confed = 1;
        LDI     R20, LOW(ee_flags)
        LDI     R21, (ee_flags) >> 8
        CALL    __eeget16_16
        ORI     R16, 0x02
        LDI     R20, LOW(ee_flags)
        LDI     R21, (ee_flags) >> 8
        CALL    __eeput16_16
// 2616 											ee_product_information = product_information;
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        MOVW    R31:R30, R25:R24
        LDI     R17, 7
??configuration_procedure_28:
        CALL    ?ML_SRAM_EEPROM_16_16_L07
// 2617 										}
// 2618 									}
// 2619 								}
// 2620 								flag_reset = 1;
??configuration_procedure_25:
        LDI     R26, 1
        RJMP    ??configuration_procedure_29
// 2621               }
// 2622 							else if(flags.parameter_write_right)
??configuration_procedure_24:
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 7
        RJMP    ??configuration_procedure_29
// 2623 							{
// 2624 								ee_KO_conf = KO_conf;
        MOVW    R19:R18, R29:R28
        SUBI    R18, 236
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(KO_conf)
        LDI     R31, (KO_conf) >> 8
        LDI     R20, 50
        LDI     R21, 0
        CALL    ?ML_SRAM_SRAM_16_L07
        MOVW    R23:R22, R29:R28
        SUBI    R22, 236
        SBCI    R23, 255
        LDI     R20, LOW(ee_KO_conf)
        LDI     R21, (ee_KO_conf) >> 8
        MOVW    R31:R30, R23:R22
        LDI     R17, 50
        LDI     R18, 0
        CALL    ?ML_SRAM_EEPROM_16_16_L07
// 2625 								flags.parameter_write_right = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R16, 0x7F
        STD     Z+3, R17
        STD     Z+2, R16
// 2626 							}
// 2627 
// 2628               if(flags.KO_erase_all && flags.KO_conf_right == 0)
??configuration_procedure_29:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 2
        RJMP    ??configuration_procedure_30
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRC    R16, 1
        RJMP    ??configuration_procedure_30
// 2629               {
// 2630 								if(flags.AA_received)
        LDD     R16, Z+2
        LDD     R17, Z+3
        MOV     R16, R17
        SBRS    R16, 6
        RJMP    ??configuration_procedure_31
// 2631                 	factory_default();
        CALL    factory_default
// 2632                 flag_reset = 1;
??configuration_procedure_31:
        LDI     R26, 1
// 2633               }
// 2634 
// 2635               if( flags.scenario_scs_confed )
??configuration_procedure_30:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 6
        RJMP    ??configuration_procedure_32
// 2636               {
// 2637                 ee_scenario[temp_variable.conf_KO_scenario].confed = 1;
        LDI     R18, LOW((ee_scenario + 6))
        LDI     R19, HIGH((ee_scenario + 6))
        LDS     R20, (temp_variable + 6)
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        LDI     R16, 1
        MOVW    R21:R20, R19:R18
        CALL    __eeput8_16
// 2638                 //flag_reset = 1;
// 2639               }
// 2640 
// 2641               if(flags.KO_erase_scenario)
??configuration_procedure_32:
        LDD     R16, Z+2
        LDD     R17, Z+3
        SBRS    R16, 4
        RJMP    ??configuration_procedure_33
// 2642               {
// 2643                 scenario_remove(temp_variable.erase_KO_scenario);
        LDS     R16, (temp_variable + 5)
        RCALL   scenario_remove
// 2644               }
// 2645 
// 2646               if(flags_muti_step.cen_system_step == 2)
??configuration_procedure_33:
        LDS     R16, flags_muti_step
        CPI     R16, 2
        BRNE    ??configuration_procedure_34
// 2647               {
// 2648                 remember_parameter();
        CALL    remember_parameter
// 2649                 ee_product_information = temp_product_information;
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        LDI     R30, LOW(temp_product_information)
        LDI     R31, (temp_product_information) >> 8
        LDI     R17, 7
        LDI     R18, 0
        CALL    ?ML_SRAM_EEPROM_16_16_L07
// 2650                 flag_reset = 1;
        LDI     R26, 1
// 2651               }
// 2652 
// 2653               if(state.main_state == STATE_PROGRAMMING_DURING)
??configuration_procedure_34:
        LDI     R24, LOW(state)
        LDI     R25, (state) >> 8
        MOVW    R31:R30, R25:R24
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_35
// 2654               {
// 2655 							  if(flags.virtul_configuration_right)
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 6
        RJMP    ??configuration_procedure_35
// 2656 							  {
// 2657 								  state.main_state = STATE_NORMAL;
        LDI     R16, 0
        MOVW    R31:R30, R25:R24
        STD     Z+2, R16
        STD     Z+3, R16
// 2658 								  flags.virtul_configuration_right = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0xBF
        STD     Z+1, R17
        ST      Z, R16
        LDS     R16, (temp_variable + 7)
        LDI     R20, LOW((ee_configurators + 1))
        LDI     R21, HIGH((ee_configurators + 1))
        CALL    __eeput8_16
// 2659                   ee_configurators.A = temp_variable.configurators[0];
// 2660 									ee_configurators.PL = temp_variable.configurators[1];
        LDS     R16, (temp_variable + 8)
        LDI     R20, LOW((ee_configurators + 2))
        LDI     R21, HIGH((ee_configurators + 2))
        CALL    __eeput8_16
// 2661 									ee_configurators.M = temp_variable.configurators[2];
        LDS     R17, (temp_variable + 9)
        LDI     R20, LOW((ee_configurators + 3))
        LDI     R21, HIGH((ee_configurators + 3))
        MOV     R16, R17
        CALL    __eeput8_16
// 2662 									ee_configurators.S = temp_variable.configurators[3];
        LDS     R16, (temp_variable + 10)
        LDI     R20, LOW((ee_configurators + 4))
        LDI     R21, HIGH((ee_configurators + 4))
        CALL    __eeput8_16
// 2663 									ee_configurators.T = temp_variable.configurators[4];
        LDS     R16, (temp_variable + 11)
        LDI     R20, LOW((ee_configurators + 5))
        LDI     R21, HIGH((ee_configurators + 5))
        CALL    __eeput8_16
// 2664 
// 2665                   if(temp_variable.configurators[2] == '0' || temp_variable.configurators[2] == '1' || temp_variable.configurators[2] == '3' || temp_variable.configurators[2] == '4')
        CPI     R17, 48
        BREQ    ??configuration_procedure_36
        CPI     R17, 49
        BREQ    ??configuration_procedure_36
        CPI     R17, 51
        BREQ    ??configuration_procedure_36
        CPI     R17, 52
        BRNE    ??configuration_procedure_37
// 2666                   {
// 2667                     ee_KO_conf.DesAdd = StrToChar(&temp_variable.configurators[0]);
??configuration_procedure_36:
        LDI     R16, LOW((temp_variable + 7))
        LDI     R17, HIGH((temp_variable + 7))
        CALL    StrToChar
        LDI     R20, LOW((ee_KO_conf + 2))
        LDI     R21, HIGH((ee_KO_conf + 2))
        RJMP    ??configuration_procedure_38
// 2668                   }
// 2669                   else if(temp_variable.configurators[2] == '2')
??configuration_procedure_37:
        CPI     R17, 50
        BRNE    ??configuration_procedure_39
// 2670                   {
// 2671                     ee_KO_conf.DesAdd = StrToChar(&temp_variable.configurators[0]);
        LDI     R16, LOW((temp_variable + 7))
        LDI     R17, HIGH((temp_variable + 7))
        CALL    StrToChar
        LDI     R20, LOW((ee_KO_conf + 2))
        LDI     R21, HIGH((ee_KO_conf + 2))
        CALL    __eeput8_16
        LDS     R16, (temp_variable + 7)
        LDI     R20, LOW((ee_product_information + 2))
        LDI     R21, HIGH((ee_product_information + 2))
        CALL    __eeput8_16
// 2672                     ee_product_information.local_A = temp_variable.configurators[0];
// 2673                     ee_product_information.local_PL = temp_variable.configurators[1];
        LDS     R16, (temp_variable + 8)
        LDI     R20, LOW((ee_product_information + 3))
        LDI     R21, HIGH((ee_product_information + 3))
??configuration_procedure_38:
        CALL    __eeput8_16
// 2674                   }
// 2675 
// 2676 									ee_product_information.conf_type = 0x01;
??configuration_procedure_39:
        LDI     R16, 1
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        CALL    __eeput8_16
// 2677 									ee_KO_conf.AddressType = 0;
        LDI     R16, 0
        LDI     R20, LOW((ee_KO_conf + 1))
        LDI     R21, HIGH((ee_KO_conf + 1))
        CALL    __eeput8_16
// 2678 									flag_reset = 1;
        LDI     R26, 1
// 2679 							  }
// 2680                 /*
// 2681                 else
// 2682                 {
// 2683                   state.main_state = STATE_NORMAL;
// 2684                   remember_parameter();
// 2685                   led_blinking_normal();
// 2686                 }
// 2687                 */
// 2688               }
// 2689 
// 2690               if(flag_reset)
??configuration_procedure_35:
        TST     R26
        BREQ    $+2+2
        RJMP    ??configuration_procedure_20
// 2691               {
// 2692                 system_reset();
// 2693               }
// 2694               else if(state.main_state == STATE_PROGRAMMING_DURING || state.main_state == STATE_TEST_DURING)
        MOVW    R31:R30, R25:R24
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 0
        LDI     R18, 33
        CPC     R17, R18
        BREQ    ??configuration_procedure_40
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2695               {
// 2696                 state.main_state = STATE_NORMAL;
??configuration_procedure_40:
        LDI     R16, 0
        STD     Z+2, R16
        STD     Z+3, R16
// 2697                 product_information = ee_product_information;
        LDI     R30, LOW(product_information)
        LDI     R31, (product_information) >> 8
        LDI     R20, LOW(ee_product_information)
        LDI     R21, (ee_product_information) >> 8
        LDI     R17, 7
        LDI     R18, 0
        CALL    ?ML_EEPROM_SRAM_16_16_L07
        LDI     R20, LOW(ee_KO)
        LDI     R21, (ee_KO) >> 8
        CALL    __eeget8_16
        STS     KO, R16
// 2698                 KO[0] = ee_KO[0];
// 2699                 KO[1] = ee_KO[1];
        LDI     R20, LOW((ee_KO + 1))
        LDI     R21, HIGH((ee_KO + 1))
        CALL    __eeget8_16
        STS     (KO + 1), R16
// 2700                 KO[2] = ee_KO[2];
        LDI     R20, LOW((ee_KO + 2))
        LDI     R21, HIGH((ee_KO + 2))
        CALL    __eeget8_16
        STS     (KO + 2), R16
// 2701                 KO[3] = ee_KO[3];
        LDI     R20, LOW((ee_KO + 3))
        LDI     R21, HIGH((ee_KO + 3))
        CALL    __eeget8_16
        STS     (KO + 3), R16
// 2702                 led_blinking_normal();
        RJMP    ??configuration_procedure_22
// 2703               }
// 2704 						break;
// 2705 
// 2706 						default:break;
// 2707 					}
// 2708 				break;
// 2709 				
// 2710 				case 0x01:  //test frame
// 2711 					switch(g_asc_reception_buffer[7])
??configuration_procedure_1:
        LDS     R16, (g_asc_reception_buffer + 7)
        SUBI    R16, 250
        BREQ    ??configuration_procedure_41
        SUBI    R16, 5
        BREQ    ??configuration_procedure_41
        DEC     R16
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2712 					{
// 2713             case 0x00:
// 2714 							  state.main_state = STATE_PRE_PROGRAMMING;
        RJMP    ??configuration_procedure_9
// 2715 						break;
// 2716 						
// 2717 						case 0xFA:
// 2718               if(state.main_state == STATE_TEST_DURING)
??configuration_procedure_41:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 2
        LDI     R18, 32
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
        RJMP    ??configuration_procedure_21
// 2719               {
// 2720                 state.main_state = STATE_NORMAL;
// 2721 							  led_blinking_normal();
// 2722               }
// 2723 						break;
// 2724 
// 2725 						case 0xFF:
// 2726 							if(state.main_state == STATE_TEST_DURING)
// 2727               {
// 2728                 state.main_state = STATE_NORMAL;
// 2729 							  led_blinking_normal();
// 2730               }
// 2731 						break;
// 2732 
// 2733 						default:break;
// 2734 					}
// 2735 				break;
// 2736 
// 2737 				case 0x09:	//PnL group frame
// 2738 					switch(g_asc_reception_buffer[7])
??configuration_procedure_2:
        LDS     R16, (g_asc_reception_buffer + 7)
        LDI     R30, LOW(`?<Jumptable for configuration_procedure>_0`)
        LDI     R31, (`?<Jumptable for configuration_procedure>_0`) >> 8
        JMP     ?CV_SWITCH_L06
// 2739 					{
// 2740             //////////////////////////////////////
// 2741             //same as group assigned
// 2742             case 0x06: //group assign
// 2743               if( state.main_state == PNL_NONE_CONFED_WAIT_FOR_GROUP_ASSIGN )
??configuration_procedure_42:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 3
        LDI     R18, 144
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2744               {
// 2745                 flags.group_assigned = 1;
??configuration_procedure_43:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R16, 0x01
        RJMP    ??configuration_procedure_19
// 2746               }
??configuration_procedure_44:
        LDS     R16, (KO_conf + 6)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2747             break;
// 2748 
// 2749 						case 0x09:
// 2750 							if(KO_conf.GR == g_asc_reception_buffer[5])
// 2751 								send_group_pnl_frame(ANSWER,KO_conf.GR,GROUP_USED_REQUEST);
        LDI     R18, 57
        LDS     R17, (KO_conf + 6)
        LDI     R16, 52
        RCALL   send_group_pnl_frame
        RJMP    ??configuration_procedure_4
// 2752 						break;
// 2753 						
// 2754 						case 0xF9:
// 2755 							if(KO_conf.GR == g_asc_reception_buffer[5])
// 2756 								send_group_pnl_frame(ANSWER,KO_conf.GR,GROUP_USED_REQUEST);
// 2757 						break;
// 2758 						
// 2759 						case 0xF3:
// 2760 							if(product_information.conf_type == ADVANCED && KO_conf.AddressType == GROUP)
??configuration_procedure_45:
        LDS     R16, product_information
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
        LDS     R16, (KO_conf + 1)
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2761 							{
// 2762 								KO_conf.Reference = g_asc_reception_buffer[5];
        LDS     R16, (g_asc_reception_buffer + 5)
        STS     (KO_conf + 5), R16
// 2763 								ee_KO_conf.Reference = g_asc_reception_buffer[5];
        LDS     R16, (g_asc_reception_buffer + 5)
        LDI     R20, LOW((ee_KO_conf + 5))
        LDI     R21, HIGH((ee_KO_conf + 5))
??configuration_procedure_46:
        CALL    __eeput8_16
        RJMP    ??configuration_procedure_4
// 2764 							}
// 2765 						break;
// 2766 						
// 2767             case 0xF6:
// 2768               if( state.main_state == PNL_NONE_CONFED_WAIT_FOR_GROUP_ASSIGN )
??configuration_procedure_47:
        LDS     R16, (state + 2)
        LDS     R17, (state + 3)
        CPI     R16, 3
        LDI     R18, 144
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
        RJMP    ??configuration_procedure_43
// 2769               {
// 2770                 flags.group_assigned = 1;
// 2771               }
// 2772 						break;
// 2773 
// 2774             case 0x46:
// 2775               if( state.main_state == PNL_NONE_CONFED_WAIT_FOR_GROUP_ASSIGN )
// 2776               {
// 2777                 flags.group_assigned = 1;
// 2778               }
// 2779 						break;
// 2780             //            over               /////
// 2781             //////////////////////////////////////
// 2782 						
// 2783 						case 0x40: //start PnL
// 2784 						case 0x00:	
// 2785 							key_result.short_pressed = 0;
??configuration_procedure_48:
        STS     key_result, R26
// 2786 							
// 2787 							if(state.main_state == PNL_AD_CONFED_STEP2 && state.pnl_slave == NORMAL)
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        CPI     R16, 8
        LDI     R18, 144
        CPC     R17, R18
        BRNE    ??configuration_procedure_49
        LDS     R16, (state + 4)
        TST     R16
        BRNE    ??configuration_procedure_49
// 2788 							{
// 2789 								if(g_asc_reception_buffer[5] != 0 && g_asc_reception_buffer[5] != KO_conf.GR)
        LDS     R16, (g_asc_reception_buffer + 5)
        TST     R16
        BREQ    ??configuration_procedure_49
        LDS     R16, (g_asc_reception_buffer + 5)
        LDS     R17, (KO_conf + 6)
        CP      R16, R17
        BREQ    ??configuration_procedure_49
// 2790 								{
// 2791 									state.main_state = NORMAL;
        STD     Z+2, R26
        STD     Z+3, R26
// 2792 									led_blinking_normal();
        CALL    led_blinking_normal
??configuration_procedure_49:
        LDS     R16, (g_asc_reception_buffer + 5)
        STS     (temp_variable + 14), R16
// 2793 								}
// 2794 							}
// 2795 							
// 2796 							temp_variable.GR = g_asc_reception_buffer[5];
// 2797 							if( flags.scs_pnl_group_sensor_starded == 0 )
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        MOV     R16, R17
        SBRC    R16, 0
        RJMP    ??configuration_procedure_50
// 2798 							{
// 2799 								if(g_asc_reception_buffer[5] != 0)
        LDS     R16, (g_asc_reception_buffer + 5)
        TST     R16
        BRNE    $+2+2
        RJMP    ??configuration_procedure_51
        LDS     R16, (KO_conf + 1)
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??configuration_procedure_50
// 2800 								{	
// 2801 									//advance started
// 2802 									if(KO_conf.AddressType == GROUP)
// 2803 									{
// 2804 										state.pnl_slave = START_PNL_GROUP_SENSOR;
        LDI     R16, 1
        STS     (state + 4), R16
// 2805 										if(KO_conf.GR == temp_variable.GR)
        LDS     R16, (temp_variable + 14)
        LDS     R17, (KO_conf + 6)
        CP      R17, R16
        BRNE    ??configuration_procedure_52
// 2806 										{
// 2807 											led_blinking_ms(250,250,600000);
        LDI     R16, 192
        LDI     R17, 39
        LDI     R18, 9
        LDI     R19, 0
        ST      -Y, R19
        CFI CFA_Y Y+74
        ST      -Y, R18
        CFI CFA_Y Y+75
        ST      -Y, R17
        CFI CFA_Y Y+76
        ST      -Y, R16
        CFI CFA_Y Y+77
        LDI     R20, 250
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 250
        LDI     R17, 0
        LDI     R18, 0
        CALL    led_blinking_ms
        CFI CFA_Y Y+73
// 2808 											state.pnl_slave = GR_EQUAL;
        LDI     R16, 3
        RJMP    ??configuration_procedure_53
// 2809 										}
// 2810 										else if(KO_conf.GS1 == temp_variable.GR || KO_conf.GS2 == temp_variable.GR)
??configuration_procedure_52:
        LDS     R17, (KO_conf + 7)
        CP      R17, R16
        BREQ    ??configuration_procedure_54
        LDS     R17, (KO_conf + 8)
        CP      R17, R16
        BRNE    ??configuration_procedure_55
// 2811 										{
// 2812 											led_blinking_ms(250,250,600000);
??configuration_procedure_54:
        LDI     R16, 192
        LDI     R17, 39
        LDI     R18, 9
        LDI     R19, 0
        ST      -Y, R19
        CFI CFA_Y Y+74
        ST      -Y, R18
        CFI CFA_Y Y+75
        ST      -Y, R17
        CFI CFA_Y Y+76
        ST      -Y, R16
        CFI CFA_Y Y+77
        LDI     R20, 250
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 250
        LDI     R17, 0
        LDI     R18, 0
        CALL    led_blinking_ms
        CFI CFA_Y Y+73
// 2813 											flags.wait_GS_remove = 1;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R17, 0x02
??configuration_procedure_56:
        STD     Z+3, R17
        STD     Z+2, R16
        RJMP    ??configuration_procedure_50
// 2814 										}
// 2815 										else
// 2816 										{
// 2817 											flags.wait_GS_remove = 0;
??configuration_procedure_55:
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R17, 0xFD
        RJMP    ??configuration_procedure_56
// 2818 										}
// 2819 									}
// 2820 									
// 2821 								}
// 2822 								else
// 2823 								{
// 2824 									state.pnl_slave = START_PNL_NONE_CONFED_GROUP_SENSOR;
??configuration_procedure_51:
        LDI     R16, 2
??configuration_procedure_53:
        STS     (state + 4), R16
// 2825 								}
// 2826 							}
// 2827 							flags.scs_pnl_group_sensor_starded = 1;
??configuration_procedure_50:
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ORI     R17, 0x01
        RJMP    ??configuration_procedure_19
??configuration_procedure_57:
        LDS     R16, (KO_conf + 6)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BRNE    ??configuration_procedure_58
// 2828 						break;
// 2829 
// 2830 						case 0x41: //group confirmation
// 2831 						break;
// 2832 
// 2833 						case 0x42: //group refusing
// 2834 						break;
// 2835 
// 2836 						case 0x43: //referent transmission
// 2837 						break;
// 2838 
// 2839 						case 0x44: //group ereasing
// 2840 							if(KO_conf.GR == g_asc_reception_buffer[5])
// 2841 							{
// 2842 								KO_conf.GS1 = 0;
        LDI     R16, 0
        STS     (KO_conf + 7), R16
        LDI     R20, LOW((ee_KO_conf + 7))
        LDI     R21, HIGH((ee_KO_conf + 7))
        CALL    __eeput8_16
// 2843 								ee_KO_conf.GS1 = 0;
// 2844 								KO_conf.GS2 = 0;
??configuration_procedure_59:
        STS     (KO_conf + 8), R16
// 2845 								ee_KO_conf.GS2 = 0;
        LDI     R20, LOW((ee_KO_conf + 8))
        LDI     R21, HIGH((ee_KO_conf + 8))
        RJMP    ??configuration_procedure_46
// 2846 							}
// 2847 							else if(KO_conf.GS1 == g_asc_reception_buffer[5])
??configuration_procedure_58:
        LDS     R16, (KO_conf + 7)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BRNE    ??configuration_procedure_60
// 2848 							{
// 2849 								KO_conf.GS1 = 0;
??configuration_procedure_61:
        LDI     R16, 0
        STS     (KO_conf + 7), R16
// 2850 								ee_KO_conf.GS1 = 0;
        LDI     R20, LOW((ee_KO_conf + 7))
        LDI     R21, HIGH((ee_KO_conf + 7))
        RJMP    ??configuration_procedure_46
// 2851 							}
// 2852 							else if(KO_conf.GS2 == g_asc_reception_buffer[5])
??configuration_procedure_60:
        LDS     R16, (KO_conf + 8)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
// 2853 							{
// 2854 								KO_conf.GS2 = 0;
??configuration_procedure_62:
        LDI     R16, 0
        RJMP    ??configuration_procedure_59
// 2855 								ee_KO_conf.GS2 = 0;
// 2856 							}
??configuration_procedure_63:
        LDS     R16, (KO_conf + 7)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BREQ    ??configuration_procedure_61
// 2857 						break;
// 2858 
// 2859 						case 0x45: //group request
// 2860 						break;
// 2861 
// 2862 						case 0x47:
// 2863 							if(KO_conf.GS1 == g_asc_reception_buffer[5])
// 2864 							{
// 2865 								KO_conf.GS1 = 0;
// 2866 								ee_KO_conf.GS1 = 0;
// 2867 							}
// 2868 							else if(KO_conf.GS2 == g_asc_reception_buffer[5])
        LDS     R16, (KO_conf + 8)
        LDS     R17, (g_asc_reception_buffer + 5)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??configuration_procedure_4
        RJMP    ??configuration_procedure_62
// 2869 							{
// 2870 								KO_conf.GS2 = 0;
// 2871 								ee_KO_conf.GS2 = 0;
// 2872 							}
// 2873 						break;
// 2874 
// 2875 						case 0x48:
// 2876 						break;
// 2877 
// 2878 						case 0x49:
// 2879 						break;
// 2880 
// 2881 						case 0x4A: //disable load control
// 2882 						break;
// 2883 
// 2884 						case 0x0F:
// 2885 						case 0x4F: //end PnL
// 2886 							key_result.short_pressed = 0;
??configuration_procedure_64:
        STS     key_result, R26
// 2887 							state.main_state = NORMAL;
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        STD     Z+2, R26
        STD     Z+3, R26
// 2888 							state.pnl_slave = NORMAL;
        STS     (state + 4), R26
// 2889 							flags.scs_pnl_group_sensor_starded = 0;
        LDI     R30, LOW(flags)
        LDI     R31, (flags) >> 8
        LDD     R16, Z+2
        LDD     R17, Z+3
        ANDI    R17, 0xFE
        STD     Z+3, R17
        STD     Z+2, R16
// 2890 							led_blinking_normal();
        RJMP    ??configuration_procedure_22
// 2891 						break;
// 2892 
// 2893 						default:break;
// 2894 					}
// 2895 				break;
// 2896 
// 2897 				case 0x0A:  //PnL scenario frame
// 2898 					switch(g_asc_reception_buffer[7])
??configuration_procedure_3:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 9
        BRNE    ??configuration_procedure_4
// 2899 					{
// 2900 						case 0x00:
// 2901 						break;
// 2902 
// 2903 						case 0x05:
// 2904 						break;
// 2905 
// 2906 						case 0x06:
// 2907 						break;
// 2908 
// 2909 						case 0x07:
// 2910 						break;
// 2911 
// 2912 						case 0x08:
// 2913 						break;
// 2914 
// 2915 						case 0x09:
// 2916 							for(i=0;i<16;i++)
        LDI     R24, 0
        RJMP    ??configuration_procedure_65
// 2917 							{
// 2918 								if(g_asc_reception_buffer[5] == ee_scenario[i].ns_number)
??configuration_procedure_66:
        LDS     R18, (g_asc_reception_buffer + 5)
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R20, LOW(ee_scenario)
        LDI     R21, (ee_scenario) >> 8
        ADD     R20, R16
        ADC     R21, R17
        CALL    __eeget8_16
        CP      R18, R16
        BRNE    ??configuration_procedure_67
// 2919 								{	
// 2920 									i = 16;
        LDI     R24, 16
// 2921 									strncpy(buffer_tx,"D20001348C000A09",17);
        LDI     R20, 17
        LDI     R21, 0
        LDI     R18, LOW((`?<Constant "D20001348C0000AB">` + 34))
        LDI     R19, HIGH((`?<Constant "D20001348C0000AB">` + 34))
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    strncpy
// 2922 									CharToStr(KO_conf.DesAdd,buffer);
        MOVW    R19:R18, R29:R28
        LDS     R16, (KO_conf + 2)
        CALL    CharToStr
// 2923 									buffer_tx[2] = buffer[0];
        LD      R16, Y
        STD     Y+5, R16
// 2924 									buffer_tx[3] = buffer[1];
        LDD     R16, Y+1
        STD     Y+6, R16
// 2925 									buffer_tx[10] = g_reception_buffer[10];
        LDS     R16, (g_reception_buffer + 10)
        STD     Y+13, R16
// 2926 									buffer_tx[11] = g_reception_buffer[11];
        LDS     R16, (g_reception_buffer + 11)
        STD     Y+14, R16
// 2927 									send_frame_pp_ext_broad(buffer_tx,0);
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 2928 									timer_flex_initial(3000);
        LDI     R16, 184
        LDI     R17, 11
        LDI     R18, 0
        LDI     R19, 0
        CALL    timer_flex_initial
// 2929 								}
// 2930 							}	
??configuration_procedure_67:
        INC     R24
??configuration_procedure_65:
        CPI     R24, 16
        BRCS    ??configuration_procedure_66
// 2931 						break;
// 2932 
// 2933 						case 0x0F:
// 2934 						break;
// 2935 
// 2936 						default:break;
// 2937 					}
// 2938 				break;
// 2939 				
// 2940 				case 0x0B:  //PnL IR scenario frame
// 2941 				break;
// 2942 
// 2943 				default:break;
// 2944 			}
// 2945 }
??configuration_procedure_4:
        ADIW    R29:R28, 63
        CFI CFA_Y Y+10
        ADIW    R29:R28, 7
        CFI CFA_Y Y+3
        LDI     R30, 3
        JMP     ?EPILOGUE_B3_L09
        CFI EndBlock cfiBlock28
// 2946 

        RSEG CODE:CODE:NOROOT(1)
// 2947 void aux_procedure(void)
aux_procedure:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function aux_procedure
// 2948 {
// 2949   unsigned char i;
// 2950   if(g_asc_reception_buffer[3] == 0x08)
        FUNCALL aux_procedure, scenario_remove
        LOCFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R16, Z+3
        CPI     R16, 8
        BRNE    ??aux_procedure_0
// 2951   {
// 2952     if(g_reception_buffer[9] == '1')
        LDS     R16, (g_reception_buffer + 9)
        CPI     R16, 49
        BRNE    ??aux_procedure_0
// 2953     {
// 2954       if(g_asc_reception_buffer[7] == 0x66)
        LDD     R16, Z+7
        CPI     R16, 102
        BRNE    ??aux_procedure_0
// 2955       {
// 2956         for(i=0;i<16;i++)
        LDI     R18, 0
        RJMP    ??aux_procedure_1
??aux_procedure_2:
        INC     R18
??aux_procedure_1:
        CPI     R18, 16
        BRCC    ??aux_procedure_0
// 2957         {
// 2958           if(ee_scenario[i].confed)
        MOV     R20, R18
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R22, LOW(ee_scenario)
        LDI     R23, (ee_scenario) >> 8
        ADD     R22, R16
        ADC     R23, R17
        MOVW    R21:R20, R23:R22
        SUBI    R20, 250
        SBCI    R21, 255
        CALL    __eeget8_16
        TST     R16
        BREQ    ??aux_procedure_2
// 2959           {
// 2960             if(ee_scenario[i].ns_number == g_asc_reception_buffer[5])
        MOVW    R21:R20, R23:R22
        CALL    __eeget8_16
        LDD     R17, Z+5
        CP      R16, R17
        BRNE    ??aux_procedure_2
// 2961             {
// 2962               scenario_remove(i);
        MOV     R16, R18
        RCALL   scenario_remove
// 2963               break;
// 2964             }
// 2965           }
// 2966         }
// 2967       }
// 2968     }
// 2969   }
// 2970 }
??aux_procedure_0:
        RET
        CFI EndBlock cfiBlock29
// 2971 

        RSEG CODE:CODE:NOROOT(1)
// 2972 void scenario_remove(unsigned char number)
scenario_remove:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function scenario_remove
// 2973 {
        MOV     R17, R16
// 2974   ee_scenario_index = 0;
        LDI     R16, 0
        LDI     R20, LOW(ee_scenario_index)
        LDI     R21, (ee_scenario_index) >> 8
        CALL    __eeput8_16
// 2975   ee_scenario[number].ns_number = 0x01;
        MOV     R20, R17
        LDI     R21, 0
        LDI     R16, 7
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R18, LOW(ee_scenario)
        LDI     R19, (ee_scenario) >> 8
        ADD     R18, R16
        ADC     R19, R17
        LDI     R16, 1
        MOVW    R21:R20, R19:R18
        CALL    __eeput8_16
// 2976 	ee_scenario[number].reg_type = 0x01;
        MOVW    R21:R20, R19:R18
        SUBI    R20, 255
        SBCI    R21, 255
        CALL    __eeput8_16
// 2977 	for(unsigned char i=0;i<3;i++)
        LDI     R22, 0
        RJMP    ??scenario_remove_0
// 2978 	{
// 2979 	  ee_scenario[number].id[i] = 0;
??scenario_remove_1:
        ADD     R20, R22
        ADC     R21, R16
        SUBI    R20, 254
        SBCI    R21, 255
        CALL    __eeput8_16
// 2980   }
        INC     R22
??scenario_remove_0:
        CPI     R22, 3
        LDI     R16, 0
        MOVW    R21:R20, R19:R18
        BRCS    ??scenario_remove_1
// 2981   ee_scenario[number].key_number = 0;
        SUBI    R20, 251
        SBCI    R21, 255
        CALL    __eeput8_16
// 2982   ee_scenario[number].confed = 0;
        SUBI    R18, 250
        SBCI    R19, 255
        MOVW    R21:R20, R19:R18
        CALL    __eeput8_16
// 2983 }
        RET
        CFI EndBlock cfiBlock30
// 2984 

        RSEG CODE:CODE:NOROOT(1)
// 2985 void KO_setting_error_frame(unsigned char send_type,unsigned char channel)
KO_setting_error_frame:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function KO_setting_error_frame
// 2986 {
        FUNCALL KO_setting_error_frame, CharToStr
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, CharToStr
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, CharToStr
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL KO_setting_error_frame, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 22, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 20
        CFI CFA_Y Y+22
        MOV     R25, R16
        MOV     R24, R17
// 2987 	unsigned char buffer_tx[17] = "D20001348BFF0201";
        MOVW    R19:R18, R29:R28
        SUBI    R18, 253
        SBCI    R19, 255
        MOVW    R17:R16, R19:R18
        LDI     R30, LOW(`?<Constant "D20001348BFF0201">`)
        LDI     R31, (`?<Constant "D20001348BFF0201">`) >> 8
        LDI     R20, 17
        LDI     R21, 0
        CALL    ?ML_FLASH_SRAM_16EC_16_L07
// 2988 	unsigned char buffer[3];
// 2989 	
// 2990 	CharToStr(channel,buffer);
        MOVW    R19:R18, R29:R28
        MOV     R16, R24
        CALL    CharToStr
// 2991 	buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 2992 	buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 2993 	
// 2994 	switch(send_type)
        SUBI    R25, 0
        BREQ    ??KO_setting_error_frame_0
        DEC     R25
        BREQ    ??KO_setting_error_frame_1
        DEC     R25
        BREQ    ??KO_setting_error_frame_2
        SUBI    R25, 2
        BREQ    ??KO_setting_error_frame_3
        RJMP    ??KO_setting_error_frame_4
// 2995 	{
// 2996 		case NOT_IMPLEMENTED:
// 2997 			SetBit(channel,7);
// 2998 			CharToStr(channel,buffer);
??KO_setting_error_frame_0:
        MOVW    R19:R18, R29:R28
        ORI     R24, 0x80
        MOV     R16, R24
        CALL    CharToStr
// 2999 			buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 3000 			buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 3001 			buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 3002 			buffer_tx[13] = '0';
        RJMP    ??KO_setting_error_frame_5
// 3003 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 3004 		break;
// 3005 		
// 3006 		case BUSY:
// 3007 			buffer_tx[12] = '0';
??KO_setting_error_frame_1:
        LDI     R16, 48
        STD     Y+15, R16
// 3008 			buffer_tx[13] = '1';
        LDI     R16, 49
        RJMP    ??KO_setting_error_frame_5
// 3009 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 3010 		break;
// 3011 		
// 3012 		case ASSIGNED_AGAIN:
// 3013 			buffer_tx[12] = '0';
??KO_setting_error_frame_2:
        LDI     R16, 48
        STD     Y+15, R16
// 3014 			buffer_tx[13] = '2';
        LDI     R16, 50
        RJMP    ??KO_setting_error_frame_5
// 3015 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
// 3016 		break;
// 3017 		
// 3018 		case OUT_KO:
// 3019 			SetBit(channel,7);
// 3020 			CharToStr(channel,buffer);
??KO_setting_error_frame_3:
        MOVW    R19:R18, R29:R28
        ORI     R24, 0x80
        MOV     R16, R24
        CALL    CharToStr
// 3021 			buffer_tx[14] = buffer[0];
        LD      R16, Y
        STD     Y+17, R16
// 3022 			buffer_tx[15] = buffer[1];
        LDD     R16, Y+1
        STD     Y+18, R16
// 3023 			buffer_tx[12] = '0';
        LDI     R16, 48
        STD     Y+15, R16
// 3024 			buffer_tx[13] = '4';
        LDI     R16, 52
??KO_setting_error_frame_5:
        STD     Y+16, R16
// 3025 			send_frame_pp_ext_broad(buffer_tx,TRANS_DELAY);
        LDI     R18, 50
        LDI     R19, 0
        MOVW    R17:R16, R29:R28
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    send_frame_pp_ext_broad
// 3026 		break;
// 3027 		
// 3028 		default:break;
// 3029 	}
// 3030 }
??KO_setting_error_frame_4:
        ADIW    R29:R28, 20
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock31

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D000010400000000"`:
        DC8 "D000010400000000"
`?<Initializer for <Constant "00000000">>`:
        DC8 "00000000"

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D200013415000000"`:
        DC8 "D200013415000000"
`?<Initializer for <Constant "D200013416000000"`:
        DC8 "D200013416000000"
`?<Initializer for <Constant "D200013483000000"`:
        DC8 "D200013483000000"
`?<Initializer for <Constant "D20001348C0000AA"`:
        DC8 "D20001348C0000AA"
`?<Initializer for <Constant "D2000134830000EE"`:
        DC8 "D2000134830000EE"
`?<Initializer for <Constant "D200013410100000"`:
        DC8 "D200013410100000"
`?<Initializer for <Constant "FFFFFFFF">>`:
        DC8 "FFFFFFFF"
`?<Initializer for <Constant "C0000AA">>`:
        DC8 "C0000AA"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D20001348C0001FA"`:
        DC8 "D20001348C0001FA"
`?<Initializer for <Constant "D20001348C0000FA"`:
        DC8 "D20001348C0000FA"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D20001348B020381"`:
        DC8 "D20001348B020381"
`?<Initializer for <Constant "01">>`:
        DC8 "01"
`?<Initializer for <Constant "D20001348B01AF02"`:
        DC8 "D20001348B01AF02"
`?<Initializer for <Constant "D20001348B000000"`:
        DC8 "D20001348B000000"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D20001348C0000AB"`:
        DC8 "D20001348C0000AB"
`?<Initializer for <Constant "D20001348C0000EE"`:
        DC8 "D20001348C0000EE"
`?<Initializer for <Constant "D20001348C000A09"`:
        DC8 "D20001348C000A09"

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ID_buffer>`:
        DC8 "00000000"

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for configuration_procedure>_0`:
        DB      0
        DB      1
        DW      (??configuration_procedure_4) /2
        DW      (??configuration_procedure_48) /2
        DB      0x6
        DW      (??configuration_procedure_42) /2
        DB      0x3
        DW      (??configuration_procedure_44) /2
        DB      0x6
        DW      (??configuration_procedure_64) /2
        DB      0x31
        DW      (??configuration_procedure_48) /2
        DB      0x4
        DW      (??configuration_procedure_57) /2
        DB      0x2
        DW      (??configuration_procedure_47) /2
        DB      0x1
        DW      (??configuration_procedure_63) /2
        DB      0x8
        DW      (??configuration_procedure_64) /2
        DB      0xa4
        DW      (??configuration_procedure_45) /2
        DB      0x3
        DW      (??configuration_procedure_47) /2
        DB      0x3
        DW      (??configuration_procedure_44) /2
        DB      251

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D000010400059876">`:
        DC8 "D000010400059876"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D200013480000000">`:
        DC8 "D200013480000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348D000000">`:
        DC8 "D20001348D000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348D000000">_1`:
        DC8 "D20001348D000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348D000000">_2`:
        DC8 "D20001348D000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348D000000">_3`:
        DC8 "D20001348D000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "B1009300">`:
        DC8 "B1009300"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001428C000940">`:
        DC8 "D20001428C000940"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348DFEFE00">`:
        DC8 "D20001348DFEFE00"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348DFEFE80">`:
        DC8 "D20001348DFEFE80"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "B5001200">`:
        DC8 "B5001200"
        DC8 "D20001428C000944"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348D000000">_4`:
        DC8 "D20001348D000000"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "D20001348BFF0201">`:
        DC8 "D20001348BFF0201"

        END
// 
// 11 176 bytes in segment CODE
//      6 bytes in segment INITTAB
//    222 bytes in segment NEAR_F
//    293 bytes in segment NEAR_I
//    293 bytes in segment NEAR_ID
//     40 bytes in segment SWITCH
// 
// 11 731 bytes of CODE memory (+ 6 bytes shared)
//    293 bytes of DATA memory
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    11/Dec/2009  23:20:52 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\avr\LM_Finial_Test\DRI_LCD.c                          #
#    Command line =  D:\avr\LM_Finial_Test\DRI_LCD.c --cpu=m644p -ms -o       #
#                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018    #
#                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Lis #
#                    t\ -lA D:\avr\LM_Finial_Test\Release\List\               #
#                    --diag_suppress Pa082,Pe167,Pe186                        #
#                    --initializers_in_flash -z6 --no_inline --no_cross_call  #
#                    --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I "C:\Program     #
#                    Files\IAR Systems\Embedded Workbench 5.3\avr\INC\" -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\CLIB\" --eeprom_size 2048                    #
#    List file    =  D:\avr\LM_Finial_Test\Release\List\DRI_LCD.lst           #
#    Object file  =  D:\avr\LM_Finial_Test\Release\Obj\DRI_LCD.r90            #
#                                                                             #
#                                                                             #
###############################################################################

D:\avr\LM_Finial_Test\DRI_LCD.c
      1          /***********************************************************************************************
      2          *	DRI_LCD.C
      3          *	descreption: driver for LCD
      4          *	autor	: David Wei
      5          *	date	: May, 13, 2009
      6          ************************************************************************************************/
      7          #ifndef ENABLE_BIT_DEFINITIONS
      8          #define ENABLE_BIT_DEFINITIONS
      9          #endif
     10          
     11          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0xb3
   \   <__C53> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   <__C237> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   <__C246> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   <__C255> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   <__C258> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
     12          #include <inavr.h>
     13          #include "DRI_LCD.H"
     14          #include "DRI_LCDCHARACTERS.H"
     15          #include "font.h"
     16          #include "global_variable.h"
     17          

   \                                 In  segment EEPROM_I, align 1, keep-with-next
     18          __eeprom unsigned char ee_back_light_duty = 128;
   \                     ee_back_light_duty:
   \   00000000   80                 DC8 128

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          unsigned char Lcd_dis_data[10]={0,0,0,0,0,0,0,0,0,0};
   \                     Lcd_dis_data:
   \   00000000                      DS8 10

   \                                 In  segment CODE, align 2, keep-with-next
     20          void LCD_init()
   \                     LCD_init:
     21          {
     22          	/*
     23          		SET_RD;
     24              LCD_RST_0;
     25              delay_ms(5);
     26              LCD_RST_1;
     27              delay_us(200);
     28          
     29              LCD_wr_command(0xe2);   //system reset
     30              delay_ms(1);
     31              LCD_wr_command(0x31);   //set advanced program control
     32              LCD_wr_command(0x08);
     33              LCD_wr_command(0x2b);   // external power control
     34              LCD_wr_command(0x26); //set TC=-0.05%
     35              LCD_wr_command(0xA2);   //set line rate //A2:37.0Klps
     36              LCD_wr_command(0xe9);   //0XEb//set bias1/10  //ea//eb
     37              LCD_wr_command(0xf1);   //set com end
     38              LCD_wr_command(0x9f);   //set duty :1/160
     39              LCD_wr_command(0x81);   //set VLCD value
     40              LCD_wr_command(0xcb);   //VLCD=(CV0+Cpm*pm)*(1+(T-25)*CT%)//94//7c????16.7V
     41              LCD_wr_command(0xc4);   //0XC4 //set LCD mapping control  //scan dirction com0~127
     42              LCD_wr_command(0x89);   //set RAM address control
     43              LCD_wr_command(0xd1);   // R_G_B
     44              LCD_wr_command(0xd5);   //4k color
     45              LCD_wr_command(0xc8);
     46              LCD_wr_command(0x16);
     47              LCD_wr_command(0x25);
     48              LCD_wr_command(0xad);  //0xad//display  on
     49              LCD_wr_command(0xad);   //0xad//display  on
     50          
     51              LCD_Clr();
     52              LCD_wr_command(0xf4);  //set oolumn start address
     53              LCD_wr_command(0x25);  //  start address
     54              LCD_wr_command(0xf6);  //  set column end address
     55              LCD_wr_command(0x5a);  //(0x4f+1)*3=240  5a   //90
     56          
     57              LCD_wr_command(0xf5);  //set row start address
     58              LCD_wr_command(0x00);  //start address=0x00
     59              LCD_wr_command(0xf7); //set row end address
     60              LCD_wr_command(0x9f); //row end address=9f
     61          	*/
     62          	DDRA = 0xFF;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   B901               OUT     0x01, R16
     63          	SET_RD;
   \   00000004   9A29               SBI     0x05, 0x01
     64          	LCD_RST_0;
   \   00000006   9847               CBI     0x08, 0x07
     65          	delay_us(200);
   \   00000008   EC08               LDI     R16, 200
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    delay_us
     66          	LCD_RST_1;
   \   00000010   9A47               SBI     0x08, 0x07
     67          	delay_us(200);
   \   00000012   EC08               LDI     R16, 200
   \   00000014   E010               LDI     R17, 0
   \   00000016   ........           CALL    delay_us
     68          	
     69          	LCD_wr_command(0xe2);   //system reset
   \   0000001A   EE02               LDI     R16, 226
   \   0000001C   ....               RCALL   LCD_wr_command
     70          	delay_us(200);
   \   0000001E   EC08               LDI     R16, 200
   \   00000020   E010               LDI     R17, 0
   \   00000022   ........           CALL    delay_us
     71          	LCD_wr_command(0x31);   //set advanced program control
   \   00000026   E301               LDI     R16, 49
   \   00000028   ....               RCALL   LCD_wr_command
     72          	LCD_wr_command(0x08);
   \   0000002A   E008               LDI     R16, 8
   \   0000002C   ....               RCALL   LCD_wr_command
     73          	LCD_wr_command(0x2b);   // external power control
   \   0000002E   E20B               LDI     R16, 43
   \   00000030   ....               RCALL   LCD_wr_command
     74          	LCD_wr_command(0x26); //set TC=-0.05%
   \   00000032   E206               LDI     R16, 38
   \   00000034   ....               RCALL   LCD_wr_command
     75          	LCD_wr_command(0xA2);   //set line rate //A2:37.0Klps
   \   00000036   EA02               LDI     R16, 162
   \   00000038   ....               RCALL   LCD_wr_command
     76          	LCD_wr_command(0xe9);   //0XEb//set bias1/10  //ea//eb
   \   0000003A   EE09               LDI     R16, 233
   \   0000003C   ....               RCALL   LCD_wr_command
     77          	LCD_wr_command(0xf1);   //set com end
   \   0000003E   EF01               LDI     R16, 241
   \   00000040   ....               RCALL   LCD_wr_command
     78          	LCD_wr_command(0x9f);   //set duty :1/160
   \   00000042   E90F               LDI     R16, 159
   \   00000044   ....               RCALL   LCD_wr_command
     79          	LCD_wr_command(0x81);   //set VLCD value
   \   00000046   E801               LDI     R16, 129
   \   00000048   ....               RCALL   LCD_wr_command
     80          	LCD_wr_command(0xcb);   //VLCD=(CV0+Cpm*pm)*(1+(T-25)*CT%)//94//7c¡¡¡¡16.7V
   \   0000004A   EC0B               LDI     R16, 203
   \   0000004C   ....               RCALL   LCD_wr_command
     81          	LCD_wr_command(0xc4);   //0XC4 //set LCD mapping control  //scan dirction com0~127
   \   0000004E   EC04               LDI     R16, 196
   \   00000050   ....               RCALL   LCD_wr_command
     82          	LCD_wr_command(0x89);   //set RAM address control
   \   00000052   E809               LDI     R16, 137
   \   00000054   ....               RCALL   LCD_wr_command
     83          	LCD_wr_command(0xd1);   // R_G_B
   \   00000056   ED01               LDI     R16, 209
   \   00000058   ....               RCALL   LCD_wr_command
     84          	LCD_wr_command(0xd5);   //4k color
   \   0000005A   ED05               LDI     R16, 213
   \   0000005C   ....               RCALL   LCD_wr_command
     85          	LCD_wr_command(0xc8);   //
   \   0000005E   EC08               LDI     R16, 200
   \   00000060   ....               RCALL   LCD_wr_command
     86          	
     87          	LCD_wr_command(0x16);
   \   00000062   E106               LDI     R16, 22
   \   00000064   ....               RCALL   LCD_wr_command
     88          	LCD_wr_command(0x25);
   \   00000066   E205               LDI     R16, 37
   \   00000068   ....               RCALL   LCD_wr_command
     89          	LCD_wr_command(0xad);   //0xad//display  on
   \   0000006A   EA0D               LDI     R16, 173
   \   0000006C   ....               RCALL   LCD_wr_command
     90          	delay_us(200);
   \   0000006E   EC08               LDI     R16, 200
   \   00000070   E010               LDI     R17, 0
   \   00000072   ........           CALL    delay_us
     91          	
     92          	LCD_Clr();
   \   00000076   ....               RCALL   LCD_Clr
     93          	LCD_wr_command(0xf4);  //set oolumn start address
   \   00000078   EF04               LDI     R16, 244
   \   0000007A   ....               RCALL   LCD_wr_command
     94          	LCD_wr_command(0x25);  //  start address
   \   0000007C   E205               LDI     R16, 37
   \   0000007E   ....               RCALL   LCD_wr_command
     95          	LCD_wr_command(0xf6);  //  set column end address
   \   00000080   EF06               LDI     R16, 246
   \   00000082   ....               RCALL   LCD_wr_command
     96          	LCD_wr_command(0x5a);  //(0x4f+1)*3=240  5a   //90
   \   00000084   E50A               LDI     R16, 90
   \   00000086   ....               RCALL   LCD_wr_command
     97          	
     98          	LCD_wr_command(0xf5);  //set row start address
   \   00000088   EF05               LDI     R16, 245
   \   0000008A   ....               RCALL   LCD_wr_command
     99          	LCD_wr_command(0x00);  //start address=0x00
   \   0000008C   E000               LDI     R16, 0
   \   0000008E   ....               RCALL   LCD_wr_command
    100          	LCD_wr_command(0xf7); //set row end address
   \   00000090   EF07               LDI     R16, 247
   \   00000092   ....               RCALL   LCD_wr_command
    101          	LCD_wr_command(0x9f); //row end address=9f
   \   00000094   E90F               LDI     R16, 159
   \   00000096   ....               RCALL   LCD_wr_command
    102          }
   \   00000098   9508               RET
   \   0000009A                      REQUIRE _A_PORTC
   \   0000009A                      REQUIRE _A_PORTB
   \   0000009A                      REQUIRE _A_DDRA
    103          
    104          //volatile unsigned char temp;

   \                                 In  segment CODE, align 2, keep-with-next
    105          void LCD_wr_command(unsigned char command)
   \                     LCD_wr_command:
    106          {
    107          	LCDCS;
   \   00000000   9828               CBI     0x05, 0x00
    108          	CLR_LCD_A0;          //write command
   \   00000002   982B               CBI     0x05, 0x03
    109          	CLR_WR;
   \   00000004   982A               CBI     0x05, 0x02
    110          	PORTA = byte_reverse(command);
   \   00000006   ....               RCALL   byte_reverse
   \   00000008   B902               OUT     0x02, R16
    111          	SET_WR;
   \   0000000A   9A2A               SBI     0x05, 0x02
    112          	SET_LCD_A0;
   \   0000000C   9A2B               SBI     0x05, 0x03
    113          	NONECS;
   \   0000000E   9A28               SBI     0x05, 0x00
    114          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_PORTB
   \   00000012                      REQUIRE _A_PORTA

   \                                 In  segment CODE, align 2, keep-with-next
    115          void LCD_wr_data(unsigned char datas)
   \                     LCD_wr_data:
    116          {
    117          	LCDCS;
   \   00000000   9828               CBI     0x05, 0x00
    118          	CLR_WR;
   \   00000002   982A               CBI     0x05, 0x02
    119          	SET_LCD_A0;;          //write display datas
   \   00000004   9A2B               SBI     0x05, 0x03
    120          	PORTA = byte_reverse(datas);
   \   00000006   ....               RCALL   byte_reverse
   \   00000008   B902               OUT     0x02, R16
    121          	SET_WR;
   \   0000000A   9A2A               SBI     0x05, 0x02
    122          	CLR_LCD_A0;
   \   0000000C   982B               CBI     0x05, 0x03
    123          	NONECS;
   \   0000000E   9A28               SBI     0x05, 0x00
    124          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_PORTB
   \   00000012                      REQUIRE _A_PORTA
    125          ///read 1 byte data from LCD

   \                                 In  segment CODE, align 2, keep-with-next
    126          unsigned char LCD_rd_data(void)
   \                     LCD_rd_data:
    127          {
    128          	unsigned char temp;
    129          	
    130          	SET_WR;
   \   00000000   9A2A               SBI     0x05, 0x02
    131          	DDRA=0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   B901               OUT     0x01, R16
    132          	LCDCS;
   \   00000006   9828               CBI     0x05, 0x00
    133          	SET_LCD_A0;
   \   00000008   9A2B               SBI     0x05, 0x03
    134          	CLR_RD;
   \   0000000A   9829               CBI     0x05, 0x01
    135          	temp = byte_reverse(PORTA);
   \   0000000C   B102               IN      R16, 0x02
   \   0000000E   ....               RCALL   byte_reverse
    136          	SET_RD;
   \   00000010   9A29               SBI     0x05, 0x01
    137          	CLR_WR;
   \   00000012   982A               CBI     0x05, 0x02
    138          	CLR_LCD_A0;
   \   00000014   982B               CBI     0x05, 0x03
    139          	NONECS;
   \   00000016   9A28               SBI     0x05, 0x00
    140          	DDRA=0xff;
   \   00000018   EF1F               LDI     R17, 255
   \   0000001A   B911               OUT     0x01, R17
    141          	return temp;
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_PORTB
   \   0000001E                      REQUIRE _A_PORTA
   \   0000001E                      REQUIRE _A_DDRA
    142          }
    143          

   \                                 In  segment CODE, align 2, keep-with-next
    144          unsigned char byte_reverse(unsigned char data)
   \                     byte_reverse:
    145          {
    146          	unsigned char i;
    147          	unsigned char temp = 0;
    148          	/*
    149          #ifndef FINAL_VERSION2
    150          	for(i=0;i<8;i++)
    151          	{
    152          		if(GetBit(data,7-i))
    153          			SetBit(temp,i);
    154          	}
    155          	return temp;
    156          #else
    157          	return data;
    158          #endif
    159          	*/
    160          #ifdef FINAL_VERSION2
    161          	return data;
   \   00000000   9508               RET
    162          #else
    163          	for(i=0;i<8;i++)
    164          	{
    165          		if(GetBit(data,7-i))
    166          			SetBit(temp,i);
    167          	}
    168          	return temp;
    169          #endif
    170          }
    171          

   \                                 In  segment CODE, align 2, keep-with-next
    172          void LCD_RAM_ADDRESS()
   \                     LCD_RAM_ADDRESS:
    173          {
    174          	LCD_wr_command(0xf4);  //set oolumn start address
   \   00000000   EF04               LDI     R16, 244
   \   00000002   ....               RCALL   LCD_wr_command
    175          	LCD_wr_command(0x25);  //  start address
   \   00000004   E205               LDI     R16, 37
   \   00000006   ....               RCALL   LCD_wr_command
    176          	LCD_wr_command(0xf6);  //  set column end address
   \   00000008   EF06               LDI     R16, 246
   \   0000000A   ....               RCALL   LCD_wr_command
    177          	LCD_wr_command(0x5a);  //(0x4f+1)*3=240  5a   //90
   \   0000000C   E50A               LDI     R16, 90
   \   0000000E   ....               RCALL   LCD_wr_command
    178          	
    179          	LCD_wr_command(0xf5);  //set row start address
   \   00000010   EF05               LDI     R16, 245
   \   00000012   ....               RCALL   LCD_wr_command
    180          	LCD_wr_command(0x00);  //start address=0x00
   \   00000014   E000               LDI     R16, 0
   \   00000016   ....               RCALL   LCD_wr_command
    181          	LCD_wr_command(0xf7); //set row end address
   \   00000018   EF07               LDI     R16, 247
   \   0000001A   ....               RCALL   LCD_wr_command
    182          	LCD_wr_command(0x9f); //row end address=9f
   \   0000001C   E90F               LDI     R16, 159
   \   0000001E   ....               RCALL   LCD_wr_command
    183          	LCD_wr_command(0x70);  //set row MSB address
   \   00000020   E700               LDI     R16, 112
   \   00000022   ....               RCALL   LCD_wr_command
    184          	LCD_wr_command(0x60);  //set row LSB address
   \   00000024   E600               LDI     R16, 96
   \   00000026   ....               RCALL   LCD_wr_command
    185          	LCD_wr_command(0x12);  //set column MSB address  //    12
   \   00000028   E102               LDI     R16, 18
   \   0000002A   ....               RCALL   LCD_wr_command
    186          	LCD_wr_command(0x05);  //set column LSB address  //37  05
   \   0000002C   E005               LDI     R16, 5
   \   0000002E   ....               RCALL   LCD_wr_command
    187          	LCD_wr_command(0xf8); //inside mode
   \   00000030   EF08               LDI     R16, 248
   \   00000032   ....               RCALL   LCD_wr_command
    188          }
   \   00000034   9508               RET
    189          

   \                                 In  segment CODE, align 2, keep-with-next
    190          void LCD_display_datas(unsigned char datas)    //R-G-B=4-4-4
   \                     LCD_display_datas:
    191          {
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    192          	unsigned int i,j;
    193          	
    194          	LCD_RAM_ADDRESS();
   \   00000006   ....               RCALL   LCD_RAM_ADDRESS
    195          	
    196          	for(i=0;i<160;i++)
   \   00000008   E0A0               LDI     R26, 0
   \   0000000A   E0B0               LDI     R27, 0
   \   0000000C   C008               RJMP    ??LCD_display_datas_0
    197          	{
    198              for(j=0;j<81;j++)
    199                LCD_wr_data(datas);
   \                     ??LCD_display_datas_1:
   \   0000000E   2D04               MOV     R16, R4
   \   00000010   ....               RCALL   LCD_wr_data
   \   00000012   9601               ADIW    R25:R24, 1
   \                     ??LCD_display_datas_2:
   \   00000014   3581               CPI     R24, 81
   \   00000016   E000               LDI     R16, 0
   \   00000018   0790               CPC     R25, R16
   \   0000001A   F3C8               BRCS    ??LCD_display_datas_1
   \   0000001C   9611               ADIW    R27:R26, 1
   \                     ??LCD_display_datas_0:
   \   0000001E   3AA0               CPI     R26, 160
   \   00000020   E000               LDI     R16, 0
   \   00000022   07B0               CPC     R27, R16
   \   00000024   F418               BRCC    ??LCD_display_datas_3
   \   00000026   E080               LDI     R24, 0
   \   00000028   E090               LDI     R25, 0
   \   0000002A   CFF4               RJMP    ??LCD_display_datas_2
    200          	}
    201           }
   \                     ??LCD_display_datas_3:
   \   0000002C   E0E5               LDI     R30, 5
   \   0000002E   ........           JMP     ?EPILOGUE_B5_L09
    202          
    203          
    204          /**************************************************************
    205          *    name: 		LCD_disdatatrans
    206          *    function: 	translate display data from 1Byte to 4Byte
    207          *	 input:		1Byte unsigned char datas
    208          *	 return:	an unsigned char pointer to point the 4 Byte datas
    209          *
    210          ***************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    211          void LCD_disdatatrans(unsigned char datas)
   \                     LCD_disdatatrans:
    212          {
    213          unsigned char i=0;
    214          for (i=0;i<4;i++)
   \   00000000   E020               LDI     R18, 0
   \   00000002   C00A               RJMP    ??LCD_disdatatrans_0
    215          	{
    216          	if ((datas&0x80)==0)
    217          		{
    218          		Lcd_dis_data[i]=0;
    219          		}
    220          	else
    221          		{
    222          		Lcd_dis_data[i]=0xF0;
   \                     ??LCD_disdatatrans_1:
   \   00000004   EF10               LDI     R17, 240
   \   00000006   8310               ST      Z, R17
    223          		}
    224          	datas= datas<<1;
   \                     ??LCD_disdatatrans_2:
   \   00000008   0F00               LSL     R16
    225          	if ((datas&0x80)!=0)
   \   0000000A   FB07               BST     R16, 7
   \   0000000C   F41E               BRTC    ??LCD_disdatatrans_3
    226          		{
    227          		Lcd_dis_data[i]|=0x0F;
   \   0000000E   8110               LD      R17, Z
   \   00000010   601F               ORI     R17, 0x0F
   \   00000012   8310               ST      Z, R17
    228          		}
    229          	datas= datas<<1;
   \                     ??LCD_disdatatrans_3:
   \   00000014   0F00               LSL     R16
   \   00000016   9523               INC     R18
   \                     ??LCD_disdatatrans_0:
   \   00000018   3024               CPI     R18, 4
   \   0000001A   F448               BRCC    ??LCD_disdatatrans_4
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   ....               LDI     R30, LOW(Lcd_dis_data)
   \   00000020   ....               LDI     R31, (Lcd_dis_data) >> 8
   \   00000022   0FE2               ADD     R30, R18
   \   00000024   1FF3               ADC     R31, R19
   \   00000026   FB07               BST     R16, 7
   \   00000028   F36E               BRTS    ??LCD_disdatatrans_1
   \   0000002A   8330               ST      Z, R19
   \   0000002C   CFED               RJMP    ??LCD_disdatatrans_2
    230          	}
    231          }
   \                     ??LCD_disdatatrans_4:
   \   0000002E   9508               RET
    232          
    233          
    234          /**************************************************************
    235          *    name: 		LCD_dischar1616
    236          *    function: 	display a 16*16 leble
    237          *	 input:		16*16 lebel display, x and y coordinates
    238          *	 return:	none
    239          *
    240          ***************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    241          void LCD_dischar1616(unsigned char __flash * dis_datas, unsigned char x, unsigned char y)
   \                     LCD_dischar1616:
    242          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E42               MOV     R4, R18
   \   00000008   2FA3               MOV     R26, R19
    243              unsigned char i,j,k;
    244              j=0;
    245              for (j=0;j<16;j++)
   \   0000000A   E0B0               LDI     R27, 0
   \   0000000C   C003               RJMP    ??LCD_dischar1616_0
    246              {
    247                  LCD_wr_command(0x70+(y+j)/16);  //set row MSB address
    248                  LCD_wr_command(0x60+(y+j)%16);  //set row LSB address
    249                  LCD_wr_command(0x12+(x+5)/16);  //set column MSB address  //    12
    250                  LCD_wr_command(0x00+(x+5)%16);  //set column LSB address  //37  05
    251                  for(k=0;k<2;k++)
    252                  {
    253                      LCD_disdatatrans(*(dis_datas+k+2*j));	
    254                      {
    255                          for(i=0;i<4;i++)
    256                          LCD_wr_data(Lcd_dis_data[i]);
    257                      }
    258                  }
    259                  LCD_wr_data(0);
   \                     ??LCD_dischar1616_1:
   \   0000000E   E000               LDI     R16, 0
   \   00000010   ....               RCALL   LCD_wr_data
   \   00000012   95B3               INC     R27
   \                     ??LCD_dischar1616_0:
   \   00000014   31B0               CPI     R27, 16
   \   00000016   F008               BRCS    $+2+2
   \   00000018   C042               RJMP    ??LCD_dischar1616_2
   \   0000001A   2E6A               MOV     R6, R26
   \   0000001C   2477               CLR     R7
   \   0000001E   2F0B               MOV     R16, R27
   \   00000020   0E60               ADD     R6, R16
   \   00000022   1C77               ADC     R7, R7
   \   00000024   E140               LDI     R20, 16
   \   00000026   E050               LDI     R21, 0
   \   00000028   0183               MOVW    R17:R16, R7:R6
   \   0000002A   ........           CALL    ?SS_DIVMOD_L02
   \   0000002E   5900               SUBI    R16, 144
   \   00000030   ....               RCALL   LCD_wr_command
   \   00000032   E140               LDI     R20, 16
   \   00000034   E050               LDI     R21, 0
   \   00000036   0183               MOVW    R17:R16, R7:R6
   \   00000038   ........           CALL    ?SS_DIVMOD_L02
   \   0000003C   2F04               MOV     R16, R20
   \   0000003E   5A00               SUBI    R16, 160
   \   00000040   ....               RCALL   LCD_wr_command
   \   00000042   2C64               MOV     R6, R4
   \   00000044   2477               CLR     R7
   \   00000046   E005               LDI     R16, 5
   \   00000048   0E60               ADD     R6, R16
   \   0000004A   1C77               ADC     R7, R7
   \   0000004C   E140               LDI     R20, 16
   \   0000004E   E050               LDI     R21, 0
   \   00000050   0183               MOVW    R17:R16, R7:R6
   \   00000052   ........           CALL    ?SS_DIVMOD_L02
   \   00000056   5E0E               SUBI    R16, 238
   \   00000058   ....               RCALL   LCD_wr_command
   \   0000005A   E140               LDI     R20, 16
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   0183               MOVW    R17:R16, R7:R6
   \   00000060   ........           CALL    ?SS_DIVMOD_L02
   \   00000064   2F04               MOV     R16, R20
   \   00000066   ....               RCALL   LCD_wr_command
   \   00000068   2466               CLR     R6
   \   0000006A   C00B               RJMP    ??LCD_dischar1616_3
   \                     ??LCD_dischar1616_4:
   \   0000006C   2499               CLR     R9
   \   0000006E   01F4               MOVW    R31:R30, R9:R8
   \   00000070   ....               SUBI    R30, LOW((-(Lcd_dis_data) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(Lcd_dis_data) & 0xFFFF) >> 8
   \   00000074   8100               LD      R16, Z
   \   00000076   ....               RCALL   LCD_wr_data
   \   00000078   9483               INC     R8
   \                     ??LCD_dischar1616_5:
   \   0000007A   E004               LDI     R16, 4
   \   0000007C   1680               CP      R8, R16
   \   0000007E   F3B0               BRCS    ??LCD_dischar1616_4
   \   00000080   9463               INC     R6
   \                     ??LCD_dischar1616_3:
   \   00000082   E002               LDI     R16, 2
   \   00000084   1660               CP      R6, R16
   \   00000086   F618               BRCC    ??LCD_dischar1616_1
   \   00000088   2477               CLR     R7
   \   0000008A   01FC               MOVW    R31:R30, R25:R24
   \   0000008C   0DE6               ADD     R30, R6
   \   0000008E   1DF7               ADC     R31, R7
   \   00000090   9FB0               MUL     R27, R16
   \   00000092   0DE0               ADD     R30, R0
   \   00000094   1DF1               ADC     R31, R1
   \   00000096   9104               LPM     R16, Z
   \   00000098   ....               RCALL   LCD_disdatatrans
   \   0000009A   2488               CLR     R8
   \   0000009C   CFEE               RJMP    ??LCD_dischar1616_5
    260              }
    261          }
   \                     ??LCD_dischar1616_2:
   \   0000009E   E0EA               LDI     R30, 10
   \   000000A0   ........           JMP     ?EPILOGUE_B10_L09
    262          /**************************************************************
    263          *    name: 		LCD_dischar88
    264          *    function: 	display a 88 leble
    265          *	 input:		16*16 lebel display, x and y coordinates,,each x =3 line, each y=1 line
    266          *	 return:	none
    267          *
    268          ***************************************************************/
    269          

   \                                 In  segment CODE, align 2, keep-with-next
    270          void LCD_dischar88 (unsigned char *dis_datas, unsigned char x, unsigned char y)
   \                     LCD_dischar88:
    271          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
   \   00000008   2E43               MOV     R4, R19
    272          unsigned char j,i;
    273          j=0;
    274          for (j=0;j<8;j++)
   \   0000000A   E0B0               LDI     R27, 0
   \   0000000C   C00D               RJMP    ??LCD_dischar88_0
    275          {
    276          	LCD_wr_command(0x70+((y+j)/16));  //set row MSB address
    277          	LCD_wr_command(0x60+((y+j)%16));  //set row LSB address
    278          	LCD_wr_command(0x12+((x+5)/16));  //set column MSB address  //    12
    279          	LCD_wr_command((0x05+x)%16);  //set column LSB address  //37  05
    280          	LCD_disdatatrans(*(dis_datas+j));	
    281          	{
    282          	for(i=0;i<4;i++)
    283          	LCD_wr_data(Lcd_dis_data[i]);
   \                     ??LCD_dischar88_1:
   \   0000000E   2477               CLR     R7
   \   00000010   01F3               MOVW    R31:R30, R7:R6
   \   00000012   ....               SUBI    R30, LOW((-(Lcd_dis_data) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(Lcd_dis_data) & 0xFFFF) >> 8
   \   00000016   8100               LD      R16, Z
   \   00000018   ....               RCALL   LCD_wr_data
   \   0000001A   9463               INC     R6
   \                     ??LCD_dischar88_2:
   \   0000001C   E004               LDI     R16, 4
   \   0000001E   1660               CP      R6, R16
   \   00000020   F3B0               BRCS    ??LCD_dischar88_1
    284          	}
    285          	LCD_wr_data(0);
   \   00000022   E000               LDI     R16, 0
   \   00000024   ....               RCALL   LCD_wr_data
   \   00000026   95B3               INC     R27
   \                     ??LCD_dischar88_0:
   \   00000028   30B8               CPI     R27, 8
   \   0000002A   F580               BRCC    ??LCD_dischar88_3
   \   0000002C   2C64               MOV     R6, R4
   \   0000002E   2477               CLR     R7
   \   00000030   2F0B               MOV     R16, R27
   \   00000032   0E60               ADD     R6, R16
   \   00000034   1C77               ADC     R7, R7
   \   00000036   E140               LDI     R20, 16
   \   00000038   E050               LDI     R21, 0
   \   0000003A   0183               MOVW    R17:R16, R7:R6
   \   0000003C   ........           CALL    ?SS_DIVMOD_L02
   \   00000040   5900               SUBI    R16, 144
   \   00000042   ....               RCALL   LCD_wr_command
   \   00000044   E140               LDI     R20, 16
   \   00000046   E050               LDI     R21, 0
   \   00000048   0183               MOVW    R17:R16, R7:R6
   \   0000004A   ........           CALL    ?SS_DIVMOD_L02
   \   0000004E   2F04               MOV     R16, R20
   \   00000050   5A00               SUBI    R16, 160
   \   00000052   ....               RCALL   LCD_wr_command
   \   00000054   2E6A               MOV     R6, R26
   \   00000056   2477               CLR     R7
   \   00000058   E005               LDI     R16, 5
   \   0000005A   0E60               ADD     R6, R16
   \   0000005C   1C77               ADC     R7, R7
   \   0000005E   E140               LDI     R20, 16
   \   00000060   E050               LDI     R21, 0
   \   00000062   0183               MOVW    R17:R16, R7:R6
   \   00000064   ........           CALL    ?SS_DIVMOD_L02
   \   00000068   5E0E               SUBI    R16, 238
   \   0000006A   ....               RCALL   LCD_wr_command
   \   0000006C   E140               LDI     R20, 16
   \   0000006E   E050               LDI     R21, 0
   \   00000070   0183               MOVW    R17:R16, R7:R6
   \   00000072   ........           CALL    ?SS_DIVMOD_L02
   \   00000076   2F04               MOV     R16, R20
   \   00000078   ....               RCALL   LCD_wr_command
   \   0000007A   2F0B               MOV     R16, R27
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   01FC               MOVW    R31:R30, R25:R24
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8100               LD      R16, Z
   \   00000086   ....               RCALL   LCD_disdatatrans
   \   00000088   2466               CLR     R6
   \   0000008A   CFC8               RJMP    ??LCD_dischar88_2
    286          }
    287          }
   \                     ??LCD_dischar88_3:
   \   0000008C   E0E8               LDI     R30, 8
   \   0000008E   ........           JMP     ?EPILOGUE_B8_L09
    288          /**************************************************************
    289          *    name: 		LCD_Clr
    290          *    function: 	display a char
    291          *	 input:		1Byte unsigned char datas, x and y coordinates
    292          *	 return:	none
    293          *
    294          ***************************************************************/
    295          
    296          

   \                                 In  segment CODE, align 2, keep-with-next
    297          void LCD_Clr()
   \                     LCD_Clr:
    298          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    299          	unsigned char i,j;
    300          	LCD_RAM_ADDRESS();
   \   00000004   ....               RCALL   LCD_RAM_ADDRESS
    301          	for(i=0;i<160;i++)
   \   00000006   E090               LDI     R25, 0
   \   00000008   C006               RJMP    ??LCD_Clr_0
    302          	{
    303          		for(j=0;j<82;j++)
    304          			LCD_wr_data(0x00);
   \                     ??LCD_Clr_1:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   ....               RCALL   LCD_wr_data
   \   0000000E   9583               INC     R24
   \                     ??LCD_Clr_2:
   \   00000010   3582               CPI     R24, 82
   \   00000012   F3D8               BRCS    ??LCD_Clr_1
   \   00000014   9593               INC     R25
   \                     ??LCD_Clr_0:
   \   00000016   3A90               CPI     R25, 160
   \   00000018   F410               BRCC    ??LCD_Clr_3
   \   0000001A   E080               LDI     R24, 0
   \   0000001C   CFF9               RJMP    ??LCD_Clr_2
    305          	}
    306          }
   \                     ??LCD_Clr_3:
   \   0000001E   9189               LD      R24, Y+
   \   00000020   9199               LD      R25, Y+
   \   00000022   9508               RET
    307          
    308          /**************************************************************
    309          *    name: 		LCD_display_line
    310          *    function: 	display a line on x y
    311          *	 input:		x, y
    312          *	 return:	none
    313          *
    314          ***************************************************************/
    315          

   \                                 In  segment CODE, align 2, keep-with-next
    316          void LCD_display_line(unsigned char y)
   \                     LCD_display_line:
    317          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    318          	unsigned char i;
    319          	LCD_wr_command(0x70+(y/16));  //set row MSB address
   \   00000004   9502               SWAP    R16
   \   00000006   700F               ANDI    R16, 0x0F
   \   00000008   5900               SUBI    R16, 144
   \   0000000A   ....               RCALL   LCD_wr_command
    320          	LCD_wr_command(0x60+(y%16));  //set row LSB address
   \   0000000C   708F               ANDI    R24, 0x0F
   \   0000000E   5A80               SUBI    R24, 160
   \   00000010   2F08               MOV     R16, R24
   \   00000012   ....               RCALL   LCD_wr_command
    321          	LCD_wr_command(0x12);  //set column MSB address  //    12
   \   00000014   E102               LDI     R16, 18
   \   00000016   ....               RCALL   LCD_wr_command
    322          	LCD_wr_command(0x05);  //set column LSB address  //37  05
   \   00000018   E005               LDI     R16, 5
   \   0000001A   ....               RCALL   LCD_wr_command
    323          	for(i=0;i<80;i++)
   \   0000001C   E080               LDI     R24, 0
   \   0000001E   C003               RJMP    ??LCD_display_line_0
    324          		{
    325          		LCD_wr_data(0xff);
   \                     ??LCD_display_line_1:
   \   00000020   EF0F               LDI     R16, 255
   \   00000022   ....               RCALL   LCD_wr_data
    326          		}
   \   00000024   9583               INC     R24
   \                     ??LCD_display_line_0:
   \   00000026   3580               CPI     R24, 80
   \   00000028   F3D8               BRCS    ??LCD_display_line_1
    327          	LCD_wr_data(0x00);
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   ....               RCALL   LCD_wr_data
    328          }
   \   0000002E   9189               LD      R24, Y+
   \   00000030   9508               RET
    329          

   \                                 In  segment CODE, align 2, keep-with-next
    330          void WRITE16X16(unsigned char low,unsigned char high,unsigned char datas)
   \                     WRITE16X16:
    331          { unsigned char i,j;
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
   \   00000006   2E41               MOV     R4, R17
   \   00000008   2F92               MOV     R25, R18
    332            LCD_RAM_ADDRESS();
   \   0000000A   ....               RCALL   LCD_RAM_ADDRESS
    333            for (i=0;i<high;i++)
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   C006               RJMP    ??WRITE16X16_0
    334          	{
    335          	 for(j=0;j<81;j++)
    336          	 LCD_wr_data(0x00);
   \                     ??WRITE16X16_1:
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   LCD_wr_data
   \   00000014   9583               INC     R24
   \                     ??WRITE16X16_2:
   \   00000016   3581               CPI     R24, 81
   \   00000018   F3D8               BRCS    ??WRITE16X16_1
   \   0000001A   95A3               INC     R26
   \                     ??WRITE16X16_0:
   \   0000001C   15A4               CP      R26, R4
   \   0000001E   F410               BRCC    ??WRITE16X16_3
   \   00000020   E080               LDI     R24, 0
   \   00000022   CFF9               RJMP    ??WRITE16X16_2
    337          	}
    338            for (i=0;i<16;i++)
   \                     ??WRITE16X16_3:
   \   00000024   E0A0               LDI     R26, 0
   \   00000026   C00D               RJMP    ??WRITE16X16_4
    339                  {
    340          	 for(j=0;j<low;j++)
    341          	 LCD_wr_data(0x00);
    342          	 for(j=0;j<8;j++)
    343          	 LCD_wr_data(datas);
    344          	 for(j=0;j<81-8-low;j++)
    345          	 LCD_wr_data(0x00);
   \                     ??WRITE16X16_5:
   \   00000028   E000               LDI     R16, 0
   \   0000002A   ....               RCALL   LCD_wr_data
   \   0000002C   9583               INC     R24
   \                     ??WRITE16X16_6:
   \   0000002E   2F28               MOV     R18, R24
   \   00000030   E030               LDI     R19, 0
   \   00000032   E409               LDI     R16, 73
   \   00000034   E010               LDI     R17, 0
   \   00000036   1906               SUB     R16, R6
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   1720               CP      R18, R16
   \   0000003C   0731               CPC     R19, R17
   \   0000003E   F3A4               BRLT    ??WRITE16X16_5
   \   00000040   95A3               INC     R26
   \                     ??WRITE16X16_4:
   \   00000042   31A0               CPI     R26, 16
   \   00000044   F480               BRCC    ??WRITE16X16_7
   \   00000046   E080               LDI     R24, 0
   \   00000048   C003               RJMP    ??WRITE16X16_8
   \                     ??WRITE16X16_9:
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   ....               RCALL   LCD_wr_data
   \   0000004E   9583               INC     R24
   \                     ??WRITE16X16_8:
   \   00000050   1586               CP      R24, R6
   \   00000052   F3D8               BRCS    ??WRITE16X16_9
   \   00000054   E080               LDI     R24, 0
   \   00000056   C003               RJMP    ??WRITE16X16_10
   \                     ??WRITE16X16_11:
   \   00000058   2F09               MOV     R16, R25
   \   0000005A   ....               RCALL   LCD_wr_data
   \   0000005C   9583               INC     R24
   \                     ??WRITE16X16_10:
   \   0000005E   3088               CPI     R24, 8
   \   00000060   F3D8               BRCS    ??WRITE16X16_11
   \   00000062   E080               LDI     R24, 0
   \   00000064   CFE4               RJMP    ??WRITE16X16_6
    346          	}
    347            for (i=0;i<160-16-high;i++)
   \                     ??WRITE16X16_7:
   \   00000066   E0A0               LDI     R26, 0
   \   00000068   C006               RJMP    ??WRITE16X16_12
    348                  {
    349          	 for(j=0;j<81;j++)
    350          	 LCD_wr_data(0x00);
   \                     ??WRITE16X16_13:
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   ....               RCALL   LCD_wr_data
   \   0000006E   9583               INC     R24
   \                     ??WRITE16X16_14:
   \   00000070   3581               CPI     R24, 81
   \   00000072   F3D8               BRCS    ??WRITE16X16_13
   \   00000074   95A3               INC     R26
   \                     ??WRITE16X16_12:
   \   00000076   E0B0               LDI     R27, 0
   \   00000078   E900               LDI     R16, 144
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   1904               SUB     R16, R4
   \   0000007E   4010               SBCI    R17, 0
   \   00000080   17A0               CP      R26, R16
   \   00000082   07B1               CPC     R27, R17
   \   00000084   F414               BRGE    ??WRITE16X16_15
   \   00000086   E080               LDI     R24, 0
   \   00000088   CFF3               RJMP    ??WRITE16X16_14
    351          	}
    352          }
   \                     ??WRITE16X16_15:
   \   0000008A   E0E7               LDI     R30, 7
   \   0000008C   ........           JMP     ?EPILOGUE_B7_L09
    353          
    354          

   \                                 In  segment CODE, align 2, keep-with-next
    355          void LCD_display_single_line(unsigned char y)
   \                     LCD_display_single_line:
    356          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    357          	unsigned char i;
    358          	LCD_wr_command(0x70+(y/16));  //set row MSB address
   \   00000004   9502               SWAP    R16
   \   00000006   700F               ANDI    R16, 0x0F
   \   00000008   5900               SUBI    R16, 144
   \   0000000A   ....               RCALL   LCD_wr_command
    359          	LCD_wr_command(0x60+(y%16));  //set row LSB address
   \   0000000C   708F               ANDI    R24, 0x0F
   \   0000000E   5A80               SUBI    R24, 160
   \   00000010   2F08               MOV     R16, R24
   \   00000012   ....               RCALL   LCD_wr_command
    360          	LCD_wr_command(0x12);  //set column MSB address  //    12
   \   00000014   E102               LDI     R16, 18
   \   00000016   ....               RCALL   LCD_wr_command
    361          	LCD_wr_command(0x05);  //set column LSB address  //37  05
   \   00000018   E005               LDI     R16, 5
   \   0000001A   ....               RCALL   LCD_wr_command
    362          	for(i=0;i<80;i++)
   \   0000001C   E080               LDI     R24, 0
   \   0000001E   C003               RJMP    ??LCD_display_single_line_0
    363          	{
    364          			LCD_wr_data(0xff);
   \                     ??LCD_display_single_line_1:
   \   00000020   EF0F               LDI     R16, 255
   \   00000022   ....               RCALL   LCD_wr_data
    365          	}
   \   00000024   9583               INC     R24
   \                     ??LCD_display_single_line_0:
   \   00000026   3580               CPI     R24, 80
   \   00000028   F3D8               BRCS    ??LCD_display_single_line_1
    366          	LCD_wr_data(0x00);
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   ....               RCALL   LCD_wr_data
    367          }
   \   0000002E   9189               LD      R24, Y+
   \   00000030   9508               RET
    368          
    369          ///////////////////////////////////////////////////////////////////////////////////////////////////////
    370          //ÏÔÊ¾1¸ö×Ö·û´®£¬x×ø±ê·¶Î§0~159  y×ø±ê·¶Î§0~159

   \                                 In  segment CODE, align 2, keep-with-next
    371          void LCD_disstr_V3(unsigned char *str, unsigned char x, unsigned char y, unsigned char Reverse_flag)
   \                     LCD_disstr_V3:
    372          {
   \   00000000   ........           CALL    ?PROLOGUE15_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004   0168               MOVW    R13:R12, R17:R16
   \   00000006   2EE2               MOV     R14, R18
   \   00000008   2E93               MOV     R9, R19
   \   0000000A   2E74               MOV     R7, R20
    373          	unsigned char i=0,j=0,k=0,c=0,number=0,flag=0,width=0;
   \   0000000C   2488               CLR     R8
    374          	unsigned char data1,data2,move=0;
    375          	unsigned int data16=0;
   \   0000000E   C001               RJMP    ??LCD_disstr_V3_0
    376          	while(*(str+number)!='\0')
    377          		{
    378          		number++;
   \                     ??LCD_disstr_V3_1:
   \   00000010   9483               INC     R8
    379          		}
   \                     ??LCD_disstr_V3_0:
   \   00000012   2D08               MOV     R16, R8
   \   00000014   E010               LDI     R17, 0
   \   00000016   01F6               MOVW    R31:R30, R13:R12
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   8100               LD      R16, Z
   \   0000001E   2300               TST     R16
   \   00000020   F7B9               BRNE    ??LCD_disstr_V3_1
    380          	for(i=0;i<16;i++)
   \   00000022   E080               LDI     R24, 0
   \   00000024   C003               RJMP    ??LCD_disstr_V3_2
    381          	{
    382          		LCD_wr_command(0x70+(y+i)/16);  //set row MSB address
    383          		LCD_wr_command(0x60+(y+i)%16);  //set row LSB address
    384          		
    385          		LCD_wr_command(0x12+(x/3+5)/16);  //set column MSB address  //    12
    386          		LCD_wr_command(0x00+(x/3+5)%16);   //set column LSB address  //37  05
    387          		flag=0;
    388          		move=0;
    389          		for(j=0;j<number;j++)
    390          		{	
    391          			c=*(str+j);
    392          			
    393          			width=FontTrebuchetMS16_CharInfo[c-0x20].distance;
    394          			
    395          			if(FontTrebuchetMS16_CharInfo[c-0x20].bytes==2)
    396          			{	data1=ASC[c-0x20][i*2];
    397          				data2=ASC[c-0x20][i*2+1];
    398          			}
    399          			else
    400          			{
    401          				data1=ASC[c-0x20][i];
    402          				data2=0;
    403          			}
    404          			data16=data1*256+data2;
    405          			
    406          			if (j==0)
    407          				move=x%3;
    408          			else
    409          				move=0;
    410          			if(GetBit(flag,0))
    411          				move++;
    412          			width+=move;
    413          			data16=data16>>move;
    414          			if(GetBit(flag,1))
    415          				data16|=8000;
    416          			flag=0;
    417          
    418          			for(k=0;k<(width-width%2)/2;k++)
    419          			{	
    420          				if ((data16&0x8000)==0)
    421          				{
    422          					Lcd_dis_data[0]=0;
    423          				}
    424          				else
    425          				{
    426          					Lcd_dis_data[0]=0xF0;
    427          				}
    428          				data16= data16<<1;
    429          				if ((data16&0x8000)!=0)
    430          				{
    431          					Lcd_dis_data[0]|=0x0F;
    432          				}
    433          				data16= data16<<1;
    434          				if(Reverse_flag)
    435          					LCD_wr_data(~Lcd_dis_data[0]);
    436          				else
    437          					LCD_wr_data(Lcd_dis_data[0]);
    438          			}
    439          			if((width%2)==1)
    440          			{
    441          				if((data16&0x8000)!=0)
    442          					flag=3;
    443          				else
    444          					flag=1;
    445          			}
    446          		}
    447          		if(Reverse_flag)
    448          		LCD_wr_data(0xFF);
    449          		else
    450          				LCD_wr_data(0);
   \                     ??LCD_disstr_V3_3:
   \   00000026   E000               LDI     R16, 0
   \                     ??LCD_disstr_V3_4:
   \   00000028   ....               RCALL   LCD_wr_data
   \   0000002A   9583               INC     R24
   \                     ??LCD_disstr_V3_2:
   \   0000002C   3180               CPI     R24, 16
   \   0000002E   F008               BRCS    $+2+2
   \   00000030   C0B2               RJMP    ??LCD_disstr_V3_5
   \   00000032   2DA9               MOV     R26, R9
   \   00000034   E0B0               LDI     R27, 0
   \   00000036   E090               LDI     R25, 0
   \   00000038   0FA8               ADD     R26, R24
   \   0000003A   1FBB               ADC     R27, R27
   \   0000003C   E140               LDI     R20, 16
   \   0000003E   E050               LDI     R21, 0
   \   00000040   018D               MOVW    R17:R16, R27:R26
   \   00000042   ........           CALL    ?SS_DIVMOD_L02
   \   00000046   5900               SUBI    R16, 144
   \   00000048   ....               RCALL   LCD_wr_command
   \   0000004A   E140               LDI     R20, 16
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   018D               MOVW    R17:R16, R27:R26
   \   00000050   ........           CALL    ?SS_DIVMOD_L02
   \   00000054   2F04               MOV     R16, R20
   \   00000056   5A00               SUBI    R16, 160
   \   00000058   ....               RCALL   LCD_wr_command
   \   0000005A   E043               LDI     R20, 3
   \   0000005C   2D0E               MOV     R16, R14
   \   0000005E   ........           CALL    ?UC_DIVMOD_L01
   \   00000062   2FA0               MOV     R26, R16
   \   00000064   E0B0               LDI     R27, 0
   \   00000066   9615               ADIW    R27:R26, 5
   \   00000068   E140               LDI     R20, 16
   \   0000006A   E050               LDI     R21, 0
   \   0000006C   018D               MOVW    R17:R16, R27:R26
   \   0000006E   ........           CALL    ?SS_DIVMOD_L02
   \   00000072   5E0E               SUBI    R16, 238
   \   00000074   ....               RCALL   LCD_wr_command
   \   00000076   E140               LDI     R20, 16
   \   00000078   E050               LDI     R21, 0
   \   0000007A   018D               MOVW    R17:R16, R27:R26
   \   0000007C   ........           CALL    ?SS_DIVMOD_L02
   \   00000080   2F04               MOV     R16, R20
   \   00000082   ....               RCALL   LCD_wr_command
   \   00000084   2466               CLR     R6
   \   00000086   C002               RJMP    ??LCD_disstr_V3_6
   \                     ??LCD_disstr_V3_7:
   \   00000088   E091               LDI     R25, 1
   \                     ??LCD_disstr_V3_8:
   \   0000008A   9463               INC     R6
   \                     ??LCD_disstr_V3_6:
   \   0000008C   1468               CP      R6, R8
   \   0000008E   F008               BRCS    $+2+2
   \   00000090   C07D               RJMP    ??LCD_disstr_V3_9
   \   00000092   2D06               MOV     R16, R6
   \   00000094   E010               LDI     R17, 0
   \   00000096   01F6               MOVW    R31:R30, R13:R12
   \   00000098   0FE0               ADD     R30, R16
   \   0000009A   1FF1               ADC     R31, R17
   \   0000009C   8140               LD      R20, Z
   \   0000009E   ....               LDI     R18, LOW((FontTrebuchetMS16_CharInfo - 95))
   \   000000A0   ....               LDI     R19, HIGH((FontTrebuchetMS16_CharInfo - 95))
   \   000000A2   E050               LDI     R21, 0
   \   000000A4   E003               LDI     R16, 3
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   0129               MOVW    R5:R4, R19:R18
   \   000000AC   0E40               ADD     R4, R16
   \   000000AE   1E51               ADC     R5, R17
   \   000000B0   2F04               MOV     R16, R20
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E045               LDI     R20, 5
   \   000000B6   ........           CALL    ?S_SHL_L02
   \   000000BA   0198               MOVW    R19:R18, R17:R16
   \   000000BC   ....               LDI     R16, LOW(ASC)
   \   000000BE   ....               LDI     R17, (ASC) >> 8
   \   000000C0   0F02               ADD     R16, R18
   \   000000C2   1F13               ADC     R17, R19
   \   000000C4   01F2               MOVW    R31:R30, R5:R4
   \   000000C6   9631               ADIW    R31:R30, 1
   \   000000C8   9124               LPM     R18, Z
   \   000000CA   3022               CPI     R18, 2
   \   000000CC   F459               BRNE    ??LCD_disstr_V3_10
   \   000000CE   E022               LDI     R18, 2
   \   000000D0   9F82               MUL     R24, R18
   \   000000D2   0D00               ADD     R16, R0
   \   000000D4   1D11               ADC     R17, R1
   \   000000D6   5000               SUBI    R16, 0
   \   000000D8   4014               SBCI    R17, 4
   \   000000DA   01F8               MOVW    R31:R30, R17:R16
   \   000000DC   91B4               LPM     R27, Z
   \   000000DE   9631               ADIW    R31:R30, 1
   \   000000E0   9104               LPM     R16, Z
   \   000000E2   C008               RJMP    ??LCD_disstr_V3_11
   \                     ??LCD_disstr_V3_10:
   \   000000E4   2F28               MOV     R18, R24
   \   000000E6   0F02               ADD     R16, R18
   \   000000E8   1F15               ADC     R17, R21
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   50E0               SUBI    R30, 0
   \   000000EE   40F4               SBCI    R31, 4
   \   000000F0   91B4               LPM     R27, Z
   \   000000F2   E000               LDI     R16, 0
   \                     ??LCD_disstr_V3_11:
   \   000000F4   E0A0               LDI     R26, 0
   \   000000F6   0FA0               ADD     R26, R16
   \   000000F8   2066               TST     R6
   \   000000FA   F429               BRNE    ??LCD_disstr_V3_12
   \   000000FC   E043               LDI     R20, 3
   \   000000FE   2D0E               MOV     R16, R14
   \   00000100   ........           CALL    ?UC_DIVMOD_L01
   \   00000104   C001               RJMP    ??LCD_disstr_V3_13
   \                     ??LCD_disstr_V3_12:
   \   00000106   E040               LDI     R20, 0
   \                     ??LCD_disstr_V3_13:
   \   00000108   FB90               BST     R25, 0
   \   0000010A   F40E               BRTC    ??LCD_disstr_V3_14
   \   0000010C   9543               INC     R20
   \                     ??LCD_disstr_V3_14:
   \   0000010E   01F2               MOVW    R31:R30, R5:R4
   \   00000110   9044               LPM     R4, Z
   \   00000112   0E44               ADD     R4, R20
   \   00000114   018D               MOVW    R17:R16, R27:R26
   \   00000116   ........           CALL    ?US_SHR_L02
   \   0000011A   01D8               MOVW    R27:R26, R17:R16
   \   0000011C   FB91               BST     R25, 1
   \   0000011E   F416               BRTC    ??LCD_disstr_V3_15
   \   00000120   64A0               ORI     R26, 0x40
   \   00000122   61BF               ORI     R27, 0x1F
   \                     ??LCD_disstr_V3_15:
   \   00000124   E090               LDI     R25, 0
   \   00000126   24AA               CLR     R10
   \   00000128   C002               RJMP    ??LCD_disstr_V3_16
   \                     ??LCD_disstr_V3_17:
   \   0000012A   ....               RCALL   LCD_wr_data
   \   0000012C   94A3               INC     R10
   \                     ??LCD_disstr_V3_16:
   \   0000012E   24BB               CLR     R11
   \   00000130   2D04               MOV     R16, R4
   \   00000132   E010               LDI     R17, 0
   \   00000134   2D24               MOV     R18, R4
   \   00000136   7021               ANDI    R18, 0x01
   \   00000138   1B02               SUB     R16, R18
   \   0000013A   4010               SBCI    R17, 0
   \   0000013C   E042               LDI     R20, 2
   \   0000013E   E050               LDI     R21, 0
   \   00000140   ........           CALL    ?SS_DIVMOD_L02
   \   00000144   16A0               CP      R10, R16
   \   00000146   06B1               CPC     R11, R17
   \   00000148   F4CC               BRGE    ??LCD_disstr_V3_18
   \   0000014A   FBB7               BST     R27, 7
   \   0000014C   F01E               BRTS    ??LCD_disstr_V3_19
   \   0000014E   9390....           STS     Lcd_dis_data, R25
   \   00000152   C003               RJMP    ??LCD_disstr_V3_20
   \                     ??LCD_disstr_V3_19:
   \   00000154   EF00               LDI     R16, 240
   \   00000156   9300....           STS     Lcd_dis_data, R16
   \                     ??LCD_disstr_V3_20:
   \   0000015A   0FAA               LSL     R26
   \   0000015C   1FBB               ROL     R27
   \   0000015E   FBB7               BST     R27, 7
   \   00000160   F42E               BRTC    ??LCD_disstr_V3_21
   \   00000162   9100....           LDS     R16, Lcd_dis_data
   \   00000166   600F               ORI     R16, 0x0F
   \   00000168   9300....           STS     Lcd_dis_data, R16
   \                     ??LCD_disstr_V3_21:
   \   0000016C   0FAA               LSL     R26
   \   0000016E   1FBB               ROL     R27
   \   00000170   2077               TST     R7
   \   00000172   9100....           LDS     R16, Lcd_dis_data
   \   00000176   F2C9               BREQ    ??LCD_disstr_V3_17
   \   00000178   9500               COM     R16
   \   0000017A   CFD7               RJMP    ??LCD_disstr_V3_17
   \                     ??LCD_disstr_V3_18:
   \   0000017C   FA40               BST     R4, 0
   \   0000017E   F00E               BRTS    $+2+2
   \   00000180   CF84               RJMP    ??LCD_disstr_V3_8
   \   00000182   FBB7               BST     R27, 7
   \   00000184   F00E               BRTS    $+2+2
   \   00000186   CF80               RJMP    ??LCD_disstr_V3_7
   \   00000188   E093               LDI     R25, 3
   \   0000018A   CF7F               RJMP    ??LCD_disstr_V3_8
   \                     ??LCD_disstr_V3_9:
   \   0000018C   2077               TST     R7
   \   0000018E   F409               BRNE    $+2+2
   \   00000190   CF4A               RJMP    ??LCD_disstr_V3_3
   \   00000192   EF0F               LDI     R16, 255
   \   00000194   CF49               RJMP    ??LCD_disstr_V3_4
    451          
    452          	}
    453          }
   \                     ??LCD_disstr_V3_5:
   \   00000196   E0EF               LDI     R30, 15
   \   00000198   ........           JMP     ?EPILOGUE_B15_L09
    454          
    455          //ÏÔÊ¾1¸ö×Ö·ûÐÂ×ø±ê±í·¶Î§0~159  y×ø±ê·¶Î§0~159

   \                                 In  segment CODE, align 2, keep-with-next
    456          unsigned char LCD_dischar(unsigned char c, unsigned char x, unsigned char y, unsigned char Reverse_flag)
   \                     LCD_dischar:
    457          {
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2E50               MOV     R5, R16
   \   00000006   2E81               MOV     R8, R17
   \   00000008   2E92               MOV     R9, R18
   \   0000000A   2EA3               MOV     R10, R19
    458          	unsigned char i,j,k;
    459          	j=0;
    460          	FONT_CHARINFO a=FontTrebuchetMS16_CharInfo[c-0x20];
   \   0000000C   ....               LDI     R24, LOW((FontTrebuchetMS16_CharInfo - 95))
   \   0000000E   ....               LDI     R25, HIGH((FontTrebuchetMS16_CharInfo - 95))
   \   00000010   2D45               MOV     R20, R5
   \   00000012   E050               LDI     R21, 0
   \   00000014   E003               LDI     R16, 3
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    ?S_EC_MUL_L02
   \   0000001C   0F80               ADD     R24, R16
   \   0000001E   1F91               ADC     R25, R17
   \   00000020   01FC               MOVW    R31:R30, R25:R24
   \   00000022   91A4               LPM     R26, Z
   \   00000024   9631               ADIW    R31:R30, 1
   \   00000026   9044               LPM     R4, Z
    461          	for (j=0;j<16;j++)
   \   00000028   E0B0               LDI     R27, 0
   \   0000002A   C003               RJMP    ??LCD_dischar_0
    462          	{
    463          		LCD_wr_command(0x70+(y+j)/16);  //set row MSB address
    464          		LCD_wr_command(0x60+(y+j)%16);  //set row LSB address
    465          		
    466          		LCD_wr_command(0x12+(x/3+5)/16);  //set column MSB address  //    12
    467          		LCD_wr_command(0x00+(x/3+5)%16);   //set column LSB address  //37  05
    468          
    469          		k=datatrans(ASC[c-0x20]+j*a.bytes,a.bytes,a.distance,x);	
    470          
    471          		for(i=0;i<k;i++)
    472          		{
    473          		    if(Reverse_flag == 1)
    474          			LCD_wr_data(~Lcd_dis_data[i]);
    475          		    else
    476          			LCD_wr_data(Lcd_dis_data[i]);
    477          		}
    478          		LCD_wr_data(0);
   \                     ??LCD_dischar_1:
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   ....               RCALL   LCD_wr_data
   \   00000030   95B3               INC     R27
   \                     ??LCD_dischar_0:
   \   00000032   31B0               CPI     R27, 16
   \   00000034   F008               BRCS    $+2+2
   \   00000036   C054               RJMP    ??LCD_dischar_2
   \   00000038   2C69               MOV     R6, R9
   \   0000003A   2477               CLR     R7
   \   0000003C   2F0B               MOV     R16, R27
   \   0000003E   0E60               ADD     R6, R16
   \   00000040   1C77               ADC     R7, R7
   \   00000042   E140               LDI     R20, 16
   \   00000044   E050               LDI     R21, 0
   \   00000046   0183               MOVW    R17:R16, R7:R6
   \   00000048   ........           CALL    ?SS_DIVMOD_L02
   \   0000004C   5900               SUBI    R16, 144
   \   0000004E   ....               RCALL   LCD_wr_command
   \   00000050   E140               LDI     R20, 16
   \   00000052   E050               LDI     R21, 0
   \   00000054   0183               MOVW    R17:R16, R7:R6
   \   00000056   ........           CALL    ?SS_DIVMOD_L02
   \   0000005A   2F04               MOV     R16, R20
   \   0000005C   5A00               SUBI    R16, 160
   \   0000005E   ....               RCALL   LCD_wr_command
   \   00000060   E043               LDI     R20, 3
   \   00000062   2D08               MOV     R16, R8
   \   00000064   ........           CALL    ?UC_DIVMOD_L01
   \   00000068   2E60               MOV     R6, R16
   \   0000006A   2477               CLR     R7
   \   0000006C   E005               LDI     R16, 5
   \   0000006E   0E60               ADD     R6, R16
   \   00000070   1C77               ADC     R7, R7
   \   00000072   E140               LDI     R20, 16
   \   00000074   E050               LDI     R21, 0
   \   00000076   0183               MOVW    R17:R16, R7:R6
   \   00000078   ........           CALL    ?SS_DIVMOD_L02
   \   0000007C   5E0E               SUBI    R16, 238
   \   0000007E   ....               RCALL   LCD_wr_command
   \   00000080   E140               LDI     R20, 16
   \   00000082   E050               LDI     R21, 0
   \   00000084   0183               MOVW    R17:R16, R7:R6
   \   00000086   ........           CALL    ?SS_DIVMOD_L02
   \   0000008A   2F04               MOV     R16, R20
   \   0000008C   ....               RCALL   LCD_wr_command
   \   0000008E   2D48               MOV     R20, R8
   \   00000090   2F3A               MOV     R19, R26
   \   00000092   2D24               MOV     R18, R4
   \   00000094   2F52               MOV     R21, R18
   \   00000096   2F63               MOV     R22, R19
   \   00000098   2F74               MOV     R23, R20
   \   0000009A   ....               LDI     R18, LOW((ASC - 1024))
   \   0000009C   ....               LDI     R19, HIGH((ASC - 1024))
   \   0000009E   9DB4               MUL     R27, R4
   \   000000A0   0D20               ADD     R18, R0
   \   000000A2   1D31               ADC     R19, R1
   \   000000A4   2D05               MOV     R16, R5
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E045               LDI     R20, 5
   \   000000AA   ........           CALL    ?S_SHL_L02
   \   000000AE   0F20               ADD     R18, R16
   \   000000B0   1F31               ADC     R19, R17
   \   000000B2   0189               MOVW    R17:R16, R19:R18
   \   000000B4   2F47               MOV     R20, R23
   \   000000B6   2F36               MOV     R19, R22
   \   000000B8   2F25               MOV     R18, R21
   \   000000BA   ....               RCALL   datatrans
   \   000000BC   2EB0               MOV     R11, R16
   \   000000BE   2466               CLR     R6
   \   000000C0   C002               RJMP    ??LCD_dischar_3
   \                     ??LCD_dischar_4:
   \   000000C2   ....               RCALL   LCD_wr_data
   \   000000C4   9463               INC     R6
   \                     ??LCD_dischar_3:
   \   000000C6   146B               CP      R6, R11
   \   000000C8   F008               BRCS    $+2+2
   \   000000CA   CFB0               RJMP    ??LCD_dischar_1
   \   000000CC   2477               CLR     R7
   \   000000CE   01F3               MOVW    R31:R30, R7:R6
   \   000000D0   ....               SUBI    R30, LOW((-(Lcd_dis_data) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(Lcd_dis_data) & 0xFFFF) >> 8
   \   000000D4   8100               LD      R16, Z
   \   000000D6   E011               LDI     R17, 1
   \   000000D8   16A1               CP      R10, R17
   \   000000DA   F799               BRNE    ??LCD_dischar_4
   \   000000DC   9500               COM     R16
   \   000000DE   CFF1               RJMP    ??LCD_dischar_4
    479          	}
    480          	return (FontTrebuchetMS16_CharInfo[c-0x20].distance+1);
   \                     ??LCD_dischar_2:
   \   000000E0   01FC               MOVW    R31:R30, R25:R24
   \   000000E2   9104               LPM     R16, Z
   \   000000E4   9503               INC     R16
   \   000000E6   E0EC               LDI     R30, 12
   \   000000E8   ........           JMP     ?EPILOGUE_B12_L09
    481          }
    482          

   \                                 In  segment CODE, align 2, keep-with-next
    483          unsigned char  datatrans(unsigned char const __flash *datas,unsigned char bytenumber,unsigned char distance, unsigned char x)
   \                     datatrans:
    484          {
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FB3               MOV     R27, R19
   \   00000008   2F04               MOV     R16, R20
    485          	unsigned char i=0,j=0,data1,data2;
   \   0000000A   E0A0               LDI     R26, 0
    486          	//	for(i=0;i++;i<(width+x%3)/2+(x%3)%2)
    487          	unsigned int data16=0;
    488          	data1=*datas;
    489          	if(bytenumber==2)
   \   0000000C   3022               CPI     R18, 2
   \   0000000E   F421               BRNE    ??datatrans_0
    490          	{
    491          		datas++;
    492          		data2=*datas;	
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   9631               ADIW    R31:R30, 1
   \   00000014   9044               LPM     R4, Z
   \   00000016   C001               RJMP    ??datatrans_1
    493          	}
    494          	else
    495          		data2=0;
   \                     ??datatrans_0:
   \   00000018   2444               CLR     R4
    496          	data16=data1*256+data2;
    497          	data16=data16>>(x%3);
   \                     ??datatrans_1:
   \   0000001A   E043               LDI     R20, 3
   \   0000001C   ........           CALL    ?UC_DIVMOD_L01
   \   00000020   2E64               MOV     R6, R20
   \   00000022   01FC               MOVW    R31:R30, R25:R24
   \   00000024   9114               LPM     R17, Z
   \   00000026   E000               LDI     R16, 0
   \   00000028   2455               CLR     R5
   \   0000002A   0D04               ADD     R16, R4
   \   0000002C   ........           CALL    ?US_SHR_L02
   \   00000030   0148               MOVW    R9:R8, R17:R16
    498          
    499          	for(i=0;i<((distance+x%3)/2+(distance+x%3)%2);i++)
   \   00000032   2444               CLR     R4
   \   00000034   C00C               RJMP    ??datatrans_2
    500          	{
    501          		j++;
    502          		if ((data16&0x8000)==0)
    503          		{
    504          			Lcd_dis_data[i]=0;
    505          		}
    506          		else
    507          		{
    508          			Lcd_dis_data[i]=0xF0;
   \                     ??datatrans_3:
   \   00000036   EF00               LDI     R16, 240
   \   00000038   8300               ST      Z, R16
    509          		}
    510          		data16= data16<<1;
   \                     ??datatrans_4:
   \   0000003A   0C88               LSL     R8
   \   0000003C   1C99               ROL     R9
    511          		if ((data16&0x8000)!=0)
   \   0000003E   FA97               BST     R9, 7
   \   00000040   F41E               BRTC    ??datatrans_5
    512          		{
    513          			Lcd_dis_data[i]|=0x0F;
   \   00000042   8100               LD      R16, Z
   \   00000044   600F               ORI     R16, 0x0F
   \   00000046   8300               ST      Z, R16
    514          		}
    515          		data16= data16<<1;	
   \                     ??datatrans_5:
   \   00000048   0C88               LSL     R8
   \   0000004A   1C99               ROL     R9
   \   0000004C   9443               INC     R4
   \                     ??datatrans_2:
   \   0000004E   2EAB               MOV     R10, R27
   \   00000050   24BB               CLR     R11
   \   00000052   0CA6               ADD     R10, R6
   \   00000054   1CB5               ADC     R11, R5
   \   00000056   E042               LDI     R20, 2
   \   00000058   E050               LDI     R21, 0
   \   0000005A   0185               MOVW    R17:R16, R11:R10
   \   0000005C   ........           CALL    ?SS_DIVMOD_L02
   \   00000060   01C8               MOVW    R25:R24, R17:R16
   \   00000062   E042               LDI     R20, 2
   \   00000064   E050               LDI     R21, 0
   \   00000066   0185               MOVW    R17:R16, R11:R10
   \   00000068   ........           CALL    ?SS_DIVMOD_L02
   \   0000006C   0F84               ADD     R24, R20
   \   0000006E   1F95               ADC     R25, R21
   \   00000070   1648               CP      R4, R24
   \   00000072   0659               CPC     R5, R25
   \   00000074   F44C               BRGE    ??datatrans_6
   \   00000076   95A3               INC     R26
   \   00000078   ....               LDI     R30, LOW(Lcd_dis_data)
   \   0000007A   ....               LDI     R31, (Lcd_dis_data) >> 8
   \   0000007C   0DE4               ADD     R30, R4
   \   0000007E   1DF5               ADC     R31, R5
   \   00000080   FA97               BST     R9, 7
   \   00000082   F2CE               BRTS    ??datatrans_3
   \   00000084   8250               ST      Z, R5
   \   00000086   CFD9               RJMP    ??datatrans_4
    516          	}
    517          	return j;
   \                     ??datatrans_6:
   \   00000088   2F0A               MOV     R16, R26
   \   0000008A   E0EC               LDI     R30, 12
   \   0000008C   ........           JMP     ?EPILOGUE_B12_L09
    518          
    519          }
    520          
    521          /**************************************************************
    522          *    name: 		LCD_distring    //wang
    523          *    function: 	display a string 
    524          *	 input:		"string",x,y coordinates  
    525          *	 return:	none
    526          *
    527          ***************************************************************/
    528          

   \                                 In  segment CODE, align 2, keep-with-next
    529          void LCD_distring(unsigned char *dis_datas, unsigned char x, unsigned char y,unsigned char Reverse_flag)
   \                     LCD_distring:
    530          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F92               MOV     R25, R18
   \   00000008   2E53               MOV     R5, R19
   \   0000000A   2E44               MOV     R4, R20
    531          	unsigned char i = 0;
   \   0000000C   E080               LDI     R24, 0
    532              
    533          	do
    534          	{
    535                LCD_dischar0811(ASC0811[*(dis_datas+i) - 32], x+2*i, y, Reverse_flag);
   \                     ??LCD_distring_0:
   \   0000000E   2D44               MOV     R20, R4
   \   00000010   2D35               MOV     R19, R5
   \   00000012   2F08               MOV     R16, R24
   \   00000014   0F00               LSL     R16
   \   00000016   2F29               MOV     R18, R25
   \   00000018   0F20               ADD     R18, R16
   \   0000001A   2F62               MOV     R22, R18
   \   0000001C   2F73               MOV     R23, R19
   \   0000001E   2E24               MOV     R2, R20
   \   00000020   ....               LDI     R18, LOW((ASC0811 - 352))
   \   00000022   ....               LDI     R19, HIGH((ASC0811 - 352))
   \   00000024   2F08               MOV     R16, R24
   \   00000026   E010               LDI     R17, 0
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   0FE0               ADD     R30, R16
   \   0000002C   1FF1               ADC     R31, R17
   \   0000002E   8140               LD      R20, Z
   \   00000030   E050               LDI     R21, 0
   \   00000032   E00B               LDI     R16, 11
   \   00000034   ........           CALL    ?S_EC_MUL_L02
   \   00000038   0F20               ADD     R18, R16
   \   0000003A   1F31               ADC     R19, R17
   \   0000003C   0189               MOVW    R17:R16, R19:R18
   \   0000003E   2D42               MOV     R20, R2
   \   00000040   2F37               MOV     R19, R23
   \   00000042   2F26               MOV     R18, R22
   \   00000044   ....               RCALL   LCD_dischar0811
    536          			i++;            
   \   00000046   9583               INC     R24
    537          	}
    538          	while((*(dis_datas + i)) != '\0');	
   \   00000048   E010               LDI     R17, 0
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   0FE8               ADD     R30, R24
   \   0000004E   1FF1               ADC     R31, R17
   \   00000050   8100               LD      R16, Z
   \   00000052   2300               TST     R16
   \   00000054   F6E1               BRNE    ??LCD_distring_0
    539          }
   \   00000056   E0E6               LDI     R30, 6
   \   00000058   ........           JMP     ?EPILOGUE_B6_L09
    540          

   \                                 In  segment CODE, align 2, keep-with-next
    541          void LCD_distring_V2(unsigned char __flash *dis_datas, unsigned char x, unsigned char y,unsigned char Reverse_flag)
   \                     LCD_distring_V2:
    542          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F92               MOV     R25, R18
   \   00000008   2E53               MOV     R5, R19
   \   0000000A   2E44               MOV     R4, R20
    543          	unsigned char i = 0;
   \   0000000C   E080               LDI     R24, 0
    544          
    545          	g_temp = *dis_datas;
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   9104               LPM     R16, Z
   \   00000012   9300....           STS     g_temp, R16
    546          	do
    547          	{
    548                  LCD_dischar0811(ASC0811[*(dis_datas+i) - 32], x+2*i, y, Reverse_flag);
   \                     ??LCD_distring_V2_0:
   \   00000016   2D44               MOV     R20, R4
   \   00000018   2D35               MOV     R19, R5
   \   0000001A   2F08               MOV     R16, R24
   \   0000001C   0F00               LSL     R16
   \   0000001E   2F29               MOV     R18, R25
   \   00000020   0F20               ADD     R18, R16
   \   00000022   2F62               MOV     R22, R18
   \   00000024   2F73               MOV     R23, R19
   \   00000026   2E24               MOV     R2, R20
   \   00000028   ....               LDI     R18, LOW((ASC0811 - 352))
   \   0000002A   ....               LDI     R19, HIGH((ASC0811 - 352))
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   E010               LDI     R17, 0
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   0FE0               ADD     R30, R16
   \   00000034   1FF1               ADC     R31, R17
   \   00000036   9144               LPM     R20, Z
   \   00000038   E050               LDI     R21, 0
   \   0000003A   E00B               LDI     R16, 11
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   0F20               ADD     R18, R16
   \   00000042   1F31               ADC     R19, R17
   \   00000044   0189               MOVW    R17:R16, R19:R18
   \   00000046   2D42               MOV     R20, R2
   \   00000048   2F37               MOV     R19, R23
   \   0000004A   2F26               MOV     R18, R22
   \   0000004C   ....               RCALL   LCD_dischar0811
    549          		i++;
   \   0000004E   9583               INC     R24
    550          	}
    551          	while((*(dis_datas + i)) != '\0');
   \   00000050   E010               LDI     R17, 0
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   0FE8               ADD     R30, R24
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   9104               LPM     R16, Z
   \   0000005A   2300               TST     R16
   \   0000005C   F6E1               BRNE    ??LCD_distring_V2_0
    552          
    553          }
   \   0000005E   E0E6               LDI     R30, 6
   \   00000060   ........           JMP     ?EPILOGUE_B6_L09
    554          

   \                                 In  segment CODE, align 2, keep-with-next
    555          void LCD_distring_ee(unsigned char __eeprom *dis_datas, unsigned char x, unsigned char y,unsigned char Reverse_flag)
   \                     LCD_distring_ee:
    556          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F92               MOV     R25, R18
   \   00000008   2E53               MOV     R5, R19
   \   0000000A   2E44               MOV     R4, R20
    557          	unsigned char i = 0;
   \   0000000C   E080               LDI     R24, 0
    558              
    559          	do
    560          	{
    561                LCD_dischar0811(ASC0811[*(dis_datas+i) - 32], x+2*i, y, Reverse_flag);
   \                     ??LCD_distring_ee_0:
   \   0000000E   2D44               MOV     R20, R4
   \   00000010   2D35               MOV     R19, R5
   \   00000012   2F08               MOV     R16, R24
   \   00000014   0F00               LSL     R16
   \   00000016   2F29               MOV     R18, R25
   \   00000018   0F20               ADD     R18, R16
   \   0000001A   2F62               MOV     R22, R18
   \   0000001C   2F73               MOV     R23, R19
   \   0000001E   2E24               MOV     R2, R20
   \   00000020   ....               LDI     R18, LOW((ASC0811 - 352))
   \   00000022   ....               LDI     R19, HIGH((ASC0811 - 352))
   \   00000024   2F08               MOV     R16, R24
   \   00000026   E010               LDI     R17, 0
   \   00000028   01AD               MOVW    R21:R20, R27:R26
   \   0000002A   0F40               ADD     R20, R16
   \   0000002C   1F51               ADC     R21, R17
   \   0000002E   ........           CALL    __eeget8_16
   \   00000032   2F40               MOV     R20, R16
   \   00000034   E050               LDI     R21, 0
   \   00000036   E00B               LDI     R16, 11
   \   00000038   ........           CALL    ?S_EC_MUL_L02
   \   0000003C   0F20               ADD     R18, R16
   \   0000003E   1F31               ADC     R19, R17
   \   00000040   0189               MOVW    R17:R16, R19:R18
   \   00000042   2D42               MOV     R20, R2
   \   00000044   2F37               MOV     R19, R23
   \   00000046   2F26               MOV     R18, R22
   \   00000048   ....               RCALL   LCD_dischar0811
    562          			i++;            
   \   0000004A   9583               INC     R24
    563          	}
    564          	while((*(dis_datas + i)) != '\0');	
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   01AD               MOVW    R21:R20, R27:R26
   \   00000050   0F48               ADD     R20, R24
   \   00000052   1F51               ADC     R21, R17
   \   00000054   ........           CALL    __eeget8_16
   \   00000058   2300               TST     R16
   \   0000005A   F6C9               BRNE    ??LCD_distring_ee_0
    565          }
   \   0000005C   E0E6               LDI     R30, 6
   \   0000005E   ........           JMP     ?EPILOGUE_B6_L09
    566          

   \                                 In  segment CODE, align 2, keep-with-next
    567          void LCD_dischar0811(unsigned char __flash * dis_datas, unsigned char x, unsigned char y,unsigned char Reverse_flag)
   \                     LCD_dischar0811:
    568          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E52               MOV     R5, R18
   \   00000008   2FA3               MOV     R26, R19
   \   0000000A   2FB4               MOV     R27, R20
    569          	unsigned char i,j;
    570          	j=0;
    571          	for (j=0;j<11;j++)
   \   0000000C   2444               CLR     R4
   \   0000000E   C003               RJMP    ??LCD_dischar0811_0
    572          	{
    573          		LCD_wr_command(0x70+(y+j)/16);  //set row MSB address
    574          		LCD_wr_command(0x60+(y+j)%16);  //set row LSB address
    575          		LCD_wr_command(0x12+(x+5)/16);  //set column MSB address  //    12
    576          		LCD_wr_command(0x00+(x+5)%16);   //set column LSB address  //37  05
    577                  
    578          		LCD_disdatatrans(*(dis_datas+j));	
    579          		for(i=0;i<4;i++)
    580          		{
    581          		    if(Reverse_flag == 1)
    582          				    LCD_wr_data(~Lcd_dis_data[i]);
    583          		    else
    584          			LCD_wr_data(Lcd_dis_data[i]);            
    585          		}
    586          
    587          		if(Reverse_flag)
    588          			LCD_wr_data(255);
    589          		else
    590          			LCD_wr_data(0);
   \                     ??LCD_dischar0811_1:
   \   00000010   E000               LDI     R16, 0
   \                     ??LCD_dischar0811_2:
   \   00000012   ....               RCALL   LCD_wr_data
   \   00000014   9443               INC     R4
   \                     ??LCD_dischar0811_0:
   \   00000016   E00B               LDI     R16, 11
   \   00000018   1640               CP      R4, R16
   \   0000001A   F008               BRCS    $+2+2
   \   0000001C   C043               RJMP    ??LCD_dischar0811_3
   \   0000001E   2E6A               MOV     R6, R26
   \   00000020   2477               CLR     R7
   \   00000022   2D04               MOV     R16, R4
   \   00000024   0E60               ADD     R6, R16
   \   00000026   1C77               ADC     R7, R7
   \   00000028   E140               LDI     R20, 16
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   0183               MOVW    R17:R16, R7:R6
   \   0000002E   ........           CALL    ?SS_DIVMOD_L02
   \   00000032   5900               SUBI    R16, 144
   \   00000034   ....               RCALL   LCD_wr_command
   \   00000036   E140               LDI     R20, 16
   \   00000038   E050               LDI     R21, 0
   \   0000003A   0183               MOVW    R17:R16, R7:R6
   \   0000003C   ........           CALL    ?SS_DIVMOD_L02
   \   00000040   2F04               MOV     R16, R20
   \   00000042   5A00               SUBI    R16, 160
   \   00000044   ....               RCALL   LCD_wr_command
   \   00000046   2C65               MOV     R6, R5
   \   00000048   2477               CLR     R7
   \   0000004A   E005               LDI     R16, 5
   \   0000004C   0E60               ADD     R6, R16
   \   0000004E   1C77               ADC     R7, R7
   \   00000050   E140               LDI     R20, 16
   \   00000052   E050               LDI     R21, 0
   \   00000054   0183               MOVW    R17:R16, R7:R6
   \   00000056   ........           CALL    ?SS_DIVMOD_L02
   \   0000005A   5E0E               SUBI    R16, 238
   \   0000005C   ....               RCALL   LCD_wr_command
   \   0000005E   E140               LDI     R20, 16
   \   00000060   E050               LDI     R21, 0
   \   00000062   0183               MOVW    R17:R16, R7:R6
   \   00000064   ........           CALL    ?SS_DIVMOD_L02
   \   00000068   2F04               MOV     R16, R20
   \   0000006A   ....               RCALL   LCD_wr_command
   \   0000006C   2D04               MOV     R16, R4
   \   0000006E   E010               LDI     R17, 0
   \   00000070   01FC               MOVW    R31:R30, R25:R24
   \   00000072   0FE0               ADD     R30, R16
   \   00000074   1FF1               ADC     R31, R17
   \   00000076   9104               LPM     R16, Z
   \   00000078   ....               RCALL   LCD_disdatatrans
   \   0000007A   2466               CLR     R6
   \   0000007C   C002               RJMP    ??LCD_dischar0811_4
   \                     ??LCD_dischar0811_5:
   \   0000007E   ....               RCALL   LCD_wr_data
   \   00000080   9463               INC     R6
   \                     ??LCD_dischar0811_4:
   \   00000082   E004               LDI     R16, 4
   \   00000084   1660               CP      R6, R16
   \   00000086   F448               BRCC    ??LCD_dischar0811_6
   \   00000088   2477               CLR     R7
   \   0000008A   01F3               MOVW    R31:R30, R7:R6
   \   0000008C   ....               SUBI    R30, LOW((-(Lcd_dis_data) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(Lcd_dis_data) & 0xFFFF) >> 8
   \   00000090   8100               LD      R16, Z
   \   00000092   30B1               CPI     R27, 1
   \   00000094   F7A1               BRNE    ??LCD_dischar0811_5
   \   00000096   9500               COM     R16
   \   00000098   CFF2               RJMP    ??LCD_dischar0811_5
   \                     ??LCD_dischar0811_6:
   \   0000009A   23BB               TST     R27
   \   0000009C   F409               BRNE    $+2+2
   \   0000009E   CFB8               RJMP    ??LCD_dischar0811_1
   \   000000A0   EF0F               LDI     R16, 255
   \   000000A2   CFB7               RJMP    ??LCD_dischar0811_2
    591          	}
    592          }
   \                     ??LCD_dischar0811_3:
   \   000000A4   E0E8               LDI     R30, 8
   \   000000A6   ........           JMP     ?EPILOGUE_B8_L09
    593          

   \                                 In  segment CODE, align 2, keep-with-next
    594          void light_adj(void)
   \                     light_adj:
    595          {
    596          	if(get_key())
   \   00000000   ........           CALL    get_key
   \   00000004   2300               TST     R16
   \   00000006   F0F1               BREQ    ??light_adj_0
    597          		{
    598          			ee_back_light_duty += 4;
   \   00000008   ....               LDI     R20, LOW(ee_back_light_duty)
   \   0000000A   ....               LDI     R21, (ee_back_light_duty) >> 8
   \   0000000C   ........           CALL    __eeget8_16
   \   00000010   5F0C               SUBI    R16, 252
   \   00000012   ....               LDI     R20, LOW(ee_back_light_duty)
   \   00000014   ....               LDI     R21, (ee_back_light_duty) >> 8
   \   00000016   ........           CALL    __eeput8_16
    599          			if(ee_back_light_duty >= 252)
   \   0000001A   ....               LDI     R20, LOW(ee_back_light_duty)
   \   0000001C   ....               LDI     R21, (ee_back_light_duty) >> 8
   \   0000001E   ........           CALL    __eeget8_16
   \   00000022   3F0C               CPI     R16, 252
   \   00000024   F028               BRCS    ??light_adj_1
    600          				ee_back_light_duty = 0;
   \   00000026   E000               LDI     R16, 0
   \   00000028   ....               LDI     R20, LOW(ee_back_light_duty)
   \   0000002A   ....               LDI     R21, (ee_back_light_duty) >> 8
   \   0000002C   ........           CALL    __eeput8_16
    601          			
    602          			OCR2A=ee_back_light_duty;
   \                     ??light_adj_1:
   \   00000030   ....               LDI     R20, LOW(ee_back_light_duty)
   \   00000032   ....               LDI     R21, (ee_back_light_duty) >> 8
   \   00000034   ........           CALL    __eeget8_16
   \   00000038   9300....           STS     _A_OCR2A, R16
    603          			delay_ms(20);
   \   0000003C   E104               LDI     R16, 20
   \   0000003E   E010               LDI     R17, 0
   \   00000040   ........           CALL    delay_ms
    604          		}
    605          }
   \                     ??light_adj_0:
   \   00000044   9508               RET
   \   00000046                      REQUIRE _A_OCR2A

   Maximum stack usage in bytes:

     Function                CSTACK RSTACK
     --------                ------ ------
     LCD_Clr                     2      2
       -> LCD_RAM_ADDRESS        2      2
       -> LCD_wr_data            2      2
     LCD_RAM_ADDRESS             0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
     LCD_dischar                12      4
       -> LCD_wr_data           12      2
       -> LCD_wr_command        12      2
       -> LCD_wr_command        12      2
       -> LCD_wr_command        12      2
       -> LCD_wr_command        12      2
       -> datatrans             12      2
       -> LCD_wr_data           12      2
       -> LCD_wr_data           12      2
     LCD_dischar0811             8      4
       -> LCD_wr_data            8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_disdatatrans       8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
     LCD_dischar1616            10      4
       -> LCD_wr_data           10      2
       -> LCD_wr_command        10      2
       -> LCD_wr_command        10      2
       -> LCD_wr_command        10      2
       -> LCD_wr_command        10      2
       -> LCD_wr_data           10      2
       -> LCD_disdatatrans      10      2
     LCD_dischar88               8      4
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_wr_command         8      2
       -> LCD_disdatatrans       8      2
     LCD_disdatatrans            0      2
     LCD_display_datas           5      2
       -> LCD_RAM_ADDRESS        5      2
       -> LCD_wr_data            5      2
     LCD_display_line            1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_data            1      2
       -> LCD_wr_data            1      2
     LCD_display_single_line     1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_command         1      2
       -> LCD_wr_data            1      2
       -> LCD_wr_data            1      2
     LCD_disstr_V3              15      4
       -> LCD_wr_data           15      2
       -> LCD_wr_command        15      2
       -> LCD_wr_command        15      2
       -> LCD_wr_command        15      2
       -> LCD_wr_command        15      2
       -> LCD_wr_data           15      2
       -> LCD_wr_data           15      2
       -> LCD_wr_data           15      2
     LCD_distring                6      4
       -> LCD_dischar0811        6      2
     LCD_distring_V2             6      4
       -> LCD_dischar0811        6      2
     LCD_distring_ee             6      4
       -> LCD_dischar0811        6      2
     LCD_init                    0      2
       -> delay_us               0      2
       -> delay_us               0      2
       -> LCD_wr_command         0      2
       -> delay_us               0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> delay_us               0      2
       -> LCD_Clr                0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
       -> LCD_wr_command         0      2
     LCD_rd_data                 0      2
       -> byte_reverse           0      2
     LCD_wr_command              0      2
       -> byte_reverse           0      2
     LCD_wr_data                 0      2
       -> byte_reverse           0      2
     WRITE16X16                  8      2
       -> LCD_RAM_ADDRESS        8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
       -> LCD_wr_data            8      2
     byte_reverse                0      2
     datatrans                  12      4
     light_adj                   0      4
       -> get_key                0      2
       -> delay_ms               0      2


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     _A_OCR2A                   1
     _A_PORTC                   1
     _A_PORTB                   1
     _A_PORTA                   1
     _A_DDRA                    1
     ee_back_light_duty         1
     Lcd_dis_data              10
     LCD_init                 154
     LCD_wr_command            18
     LCD_wr_data               18
     LCD_rd_data               30
     byte_reverse               2
     LCD_RAM_ADDRESS           54
     LCD_display_datas         50
     LCD_disdatatrans          48
     LCD_dischar1616          164
     LCD_dischar88            146
     LCD_Clr                   36
     LCD_display_line          50
     WRITE16X16               144
     LCD_display_single_line   50
     LCD_disstr_V3            412
     LCD_dischar              236
     datatrans                144
     LCD_distring              92
     LCD_distring_V2          100
     LCD_distring_ee           98
     LCD_dischar0811          170
     light_adj                 70
      Others                    6

 
     5 bytes in segment ABSOLUTE
 2 286 bytes in segment CODE
     1 byte  in segment EEPROM_I
     6 bytes in segment INITTAB
    10 bytes in segment NEAR_Z
 
 2 286 bytes of CODE  memory (+ 6 bytes shared)
    10 bytes of DATA  memory (+ 5 bytes shared)
     1 byte  of XDATA memory

Errors: none
Warnings: 2

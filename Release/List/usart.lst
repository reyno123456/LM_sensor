###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    11/Dec/2009  23:21:24 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\avr\LM_Finial_Test\usart.c                            #
#    Command line =  D:\avr\LM_Finial_Test\usart.c --cpu=m644p -ms -o         #
#                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018    #
#                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Lis #
#                    t\ -lA D:\avr\LM_Finial_Test\Release\List\               #
#                    --diag_suppress Pa082,Pe167,Pe186                        #
#                    --initializers_in_flash -z6 --no_inline --no_cross_call  #
#                    --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I "C:\Program     #
#                    Files\IAR Systems\Embedded Workbench 5.3\avr\INC\" -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\CLIB\" --eeprom_size 2048                    #
#    List file    =  D:\avr\LM_Finial_Test\Release\List\usart.lst             #
#    Object file  =  D:\avr\LM_Finial_Test\Release\Obj\usart.r90              #
#                                                                             #
#                                                                             #
###############################################################################

D:\avr\LM_Finial_Test\usart.c
      1          //usart.c
      2          
      3          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0xc6
   \   <__C17> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   <__C21> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   <__C24> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   <__C27> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   <__C30> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
      4          #include <stdio.h>
      5          #include <inavr.h>
      6          #include "usart.h"
      7          #include "board.h"
      8          #include "moudle_SCS.h"
      9          #include "global_variable.h"
     10          #include "application.h"
     11          #include "string.h"
     12          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          char rx_buffer[RX_BUFFER_SIZE]; // 接收缓冲区，为char型变量组成的数组，该数组构成环形队列，个数为RX_BUFFER_SIZE 
   \                     rx_buffer:
   \   00000000                      DS8 200

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     14          unsigned char rx_wr_index,rx_rd_index,rx_counter;
   \                     rx_wr_index:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     rx_rd_index:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     rx_counter:
   \   00000000                      DS8 1
     15          // This flag is set on USART Receiver buffer overflow

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          char rx_buffer_overflow;   //接收缓冲区溢出标志
   \                     rx_buffer_overflow:
   \   00000000                      DS8 1
     17          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     18          char tx_buffer[TX_BUFFER_SIZE];
   \                     tx_buffer:
   \   00000000                      DS8 16
     19          unsigned char tx_wr_index,tx_rd_index,tx_counter;
   \                     tx_wr_index:
   \   00000010                      DS8 1
   \                     tx_rd_index:
   \   00000011                      DS8 1
   \                     tx_counter:
   \   00000012                      DS8 1
     20          
     21          #ifdef DEBUG
     22          	unsigned char g_RxBuffer[RX_BUFFER_SIZE];
     23          	unsigned char RxNumber;
     24          	ISR(USART0_RX_vect)
     25          	{
     26          		g_RxBuffer[RxNumber] = UDR0;
     27          		RxNumber++;
     28          	}
     29          #else
     30          
     31          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     32          __interrupt void usart0_rx_ser(void)
   \                     usart0_rx_ser:
     33          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B79F               IN      R25, 0x3F
   \   00000022   9722               SBIW    R29:R28, 2
     34          	unsigned char temp;
     35          	unsigned char i;
     36          	volatile unsigned char current = 0xFF;
   \   00000024   EF0F               LDI     R16, 255
   \   00000026   8308               ST      Y, R16
     37            volatile unsigned char compared = 0;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   8309               STD     Y+1, R16
     38          	temp = UDR0;
   \   0000002C   9120....           LDS     R18, _A_UDR0
     39          	
     40          	for(i=0;i<DEEP;i++)
   \   00000030   E080               LDI     R24, 0
   \   00000032   C001               RJMP    ??usart0_rx_ser_0
   \                     ??usart0_rx_ser_1:
   \   00000034   9583               INC     R24
   \                     ??usart0_rx_ser_0:
   \   00000036   3283               CPI     R24, 35
   \   00000038   F468               BRCC    ??usart0_rx_ser_2
     41          	{
     42          		if(scs_frame[i].finished == 0)
   \   0000003A   2F48               MOV     R20, R24
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   E108               LDI     R16, 24
   \   00000040   E010               LDI     R17, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
   \   0000004C   8906               LDD     R16, Z+22
   \   0000004E   2300               TST     R16
   \   00000050   F789               BRNE    ??usart0_rx_ser_1
     43          		{
     44          			current = i;
   \   00000052   8348               ST      Y, R20
     45          			break;
     46          		}
     47          	}
     48            
     49            if(scs_frame[current].finished == 0)
   \                     ??usart0_rx_ser_2:
   \   00000054   8148               LD      R20, Y
   \   00000056   E050               LDI     R21, 0
   \   00000058   E108               LDI     R16, 24
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
   \   00000066   8906               LDD     R16, Z+22
   \   00000068   2300               TST     R16
   \   0000006A   F009               BREQ    $+2+2
   \   0000006C   C06C               RJMP    ??usart0_rx_ser_3
     50          	{
     51          
     52          			if(temp == '$')
   \   0000006E   3224               CPI     R18, 36
   \   00000070   F449               BRNE    ??usart0_rx_ser_4
     53          			{
     54          				scs_frame[current].next = 0;
   \   00000072   8148               LD      R20, Y
   \   00000074   E108               LDI     R16, 24
   \   00000076   E010               LDI     R17, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
   \   00000082   8B55               STD     Z+21, R21
     55          			}	
     56          							
     57          			scs_frame[current].byte[scs_frame[current].next++] = temp;
   \                     ??usart0_rx_ser_4:
   \   00000084   8138               LD      R19, Y
   \   00000086   8148               LD      R20, Y
   \   00000088   E108               LDI     R16, 24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   ........           CALL    ?S_EC_MUL_L02
   \   00000090   ....               LDI     R30, LOW(scs_frame)
   \   00000092   ....               LDI     R31, (scs_frame) >> 8
   \   00000094   0FE0               ADD     R30, R16
   \   00000096   1FF1               ADC     R31, R17
   \   00000098   8965               LDD     R22, Z+21
   \   0000009A   2F06               MOV     R16, R22
   \   0000009C   9503               INC     R16
   \   0000009E   8B05               STD     Z+21, R16
   \   000000A0   2F43               MOV     R20, R19
   \   000000A2   E108               LDI     R16, 24
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   ....               LDI     R30, LOW(scs_frame)
   \   000000AC   ....               LDI     R31, (scs_frame) >> 8
   \   000000AE   0FE0               ADD     R30, R16
   \   000000B0   1FF1               ADC     R31, R17
   \   000000B2   2F06               MOV     R16, R22
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   0FE0               ADD     R30, R16
   \   000000B8   1FF1               ADC     R31, R17
   \   000000BA   8320               ST      Z, R18
     58          
     59          			if(temp == 0x0D)
   \   000000BC   302D               CPI     R18, 13
   \   000000BE   F009               BREQ    $+2+2
   \   000000C0   C042               RJMP    ??usart0_rx_ser_3
     60          			{
     61          				if(current == 0)
   \   000000C2   8108               LD      R16, Y
   \   000000C4   2300               TST     R16
   \   000000C6   F421               BRNE    ??usart0_rx_ser_5
     62          				{
     63          					scs_frame[current].finished = 1;
   \   000000C8   E021               LDI     R18, 1
   \   000000CA   8148               LD      R20, Y
   \   000000CC   E108               LDI     R16, 24
   \   000000CE   C035               RJMP    ??usart0_rx_ser_6
     64          				}	
     65          				else
     66          				{
     67                    for(i=0;i<current;i++)
   \                     ??usart0_rx_ser_5:
   \   000000D0   E080               LDI     R24, 0
   \   000000D2   C001               RJMP    ??usart0_rx_ser_7
   \                     ??usart0_rx_ser_8:
   \   000000D4   9583               INC     R24
   \                     ??usart0_rx_ser_7:
   \   000000D6   8108               LD      R16, Y
   \   000000D8   1780               CP      R24, R16
   \   000000DA   F528               BRCC    ??usart0_rx_ser_9
     68                    {
     69                      if(strcmp(&scs_frame[current].byte[0], &scs_frame[i].byte[0]) == 0)
   \   000000DC   2F48               MOV     R20, R24
   \   000000DE   E050               LDI     R21, 0
   \   000000E0   E108               LDI     R16, 24
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   ....               LDI     R18, LOW(scs_frame)
   \   000000EA   ....               LDI     R19, (scs_frame) >> 8
   \   000000EC   0F20               ADD     R18, R16
   \   000000EE   1F31               ADC     R19, R17
   \   000000F0   8148               LD      R20, Y
   \   000000F2   E108               LDI     R16, 24
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    ?S_EC_MUL_L02
   \   000000FA   01A8               MOVW    R21:R20, R17:R16
   \   000000FC   ....               LDI     R16, LOW(scs_frame)
   \   000000FE   ....               LDI     R17, (scs_frame) >> 8
   \   00000100   0F04               ADD     R16, R20
   \   00000102   1F15               ADC     R17, R21
   \   00000104   ........           CALL    strcmp
   \   00000108   2B01               OR      R16, R17
   \   0000010A   F721               BRNE    ??usart0_rx_ser_8
     70                      {
     71                        scs_frame[current].finished = 0;
   \   0000010C   E020               LDI     R18, 0
   \   0000010E   8148               LD      R20, Y
   \   00000110   E050               LDI     R21, 0
   \   00000112   E108               LDI     R16, 24
   \   00000114   E010               LDI     R17, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
   \   00000120   8B26               STD     Z+22, R18
     72                        compared = 1;
   \   00000122   E001               LDI     R16, 1
   \   00000124   8309               STD     Y+1, R16
     73                        break;
     74                      }
     75                    }
     76                    
     77                    if(compared)
   \                     ??usart0_rx_ser_9:
   \   00000126   8109               LDD     R16, Y+1
   \   00000128   2300               TST     R16
   \   0000012A   F011               BREQ    ??usart0_rx_ser_10
     78                    {
     79                      scs_frame[current].finished = 0;
   \   0000012C   E020               LDI     R18, 0
   \   0000012E   C001               RJMP    ??usart0_rx_ser_11
     80                    }
     81          					else
     82          					{
     83          						scs_frame[current].finished = 1;
   \                     ??usart0_rx_ser_10:
   \   00000130   E021               LDI     R18, 1
   \                     ??usart0_rx_ser_11:
   \   00000132   8148               LD      R20, Y
   \   00000134   E050               LDI     R21, 0
   \   00000136   E108               LDI     R16, 24
   \   00000138   E010               LDI     R17, 0
   \                     ??usart0_rx_ser_6:
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
   \   00000144   8B26               STD     Z+22, R18
     84          					}
     85          				}
     86          
     87          				//return;
     88          			}
     89          		}
     90          
     91          }
   \                     ??usart0_rx_ser_3:
   \   00000146   9622               ADIW    R29:R28, 2
   \   00000148   BF9F               OUT     0x3F, R25
   \   0000014A   9109               LD      R16, Y+
   \   0000014C   9119               LD      R17, Y+
   \   0000014E   9129               LD      R18, Y+
   \   00000150   9139               LD      R19, Y+
   \   00000152   9149               LD      R20, Y+
   \   00000154   9159               LD      R21, Y+
   \   00000156   9169               LD      R22, Y+
   \   00000158   9179               LD      R23, Y+
   \   0000015A   9009               LD      R0, Y+
   \   0000015C   9019               LD      R1, Y+
   \   0000015E   9029               LD      R2, Y+
   \   00000160   9039               LD      R3, Y+
   \   00000162   91E9               LD      R30, Y+
   \   00000164   91F9               LD      R31, Y+
   \   00000166   9189               LD      R24, Y+
   \   00000168   9199               LD      R25, Y+
   \   0000016A   9518               RETI
   \   0000016C                      REQUIRE _A_UDR0
     92          #endif
     93          
     94          #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     95          __interrupt void usart0_tx_ser(void)
   \                     usart0_tx_ser:
     96          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
     97              if (tx_counter)
   \   0000000C   9100....           LDS     R16, (tx_buffer + 18)
   \   00000010   2300               TST     R16
   \   00000012   F0C9               BREQ    ??usart0_tx_ser_0
     98              {
     99                     --tx_counter;
   \   00000014   9100....           LDS     R16, (tx_buffer + 18)
   \   00000018   950A               DEC     R16
   \   0000001A   9300....           STS     (tx_buffer + 18), R16
    100                     UDR0=tx_buffer[tx_rd_index];
   \   0000001E   9100....           LDS     R16, (tx_buffer + 17)
   \   00000022   E010               LDI     R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(tx_buffer) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(tx_buffer) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   9300....           STS     _A_UDR0, R16
    101                     if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
   \   00000030   9100....           LDS     R16, (tx_buffer + 17)
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     (tx_buffer + 17), R16
   \   0000003A   9100....           LDS     R16, (tx_buffer + 17)
   \   0000003E   3100               CPI     R16, 16
   \   00000040   F411               BRNE    ??usart0_tx_ser_0
   \   00000042   9310....           STS     (tx_buffer + 17), R17
    102              }; 
    103          }
   \                     ??usart0_tx_ser_0:
   \   00000046   BF2F               OUT     0x3F, R18
   \   00000048   9109               LD      R16, Y+
   \   0000004A   9119               LD      R17, Y+
   \   0000004C   9129               LD      R18, Y+
   \   0000004E   91E9               LD      R30, Y+
   \   00000050   91F9               LD      R31, Y+
   \   00000052   9518               RETI
   \   00000054                      REQUIRE _A_UDR0
    104          /**//*发送单个字符*/

   \                                 In  segment CODE, align 2, keep-with-next
    105          void put_c(unsigned char c)
   \                     put_c:
    106          {
   \   00000000   01AD               MOVW    R21:R20, R27:R26
    107              while (tx_counter == TX_BUFFER_SIZE);   //发送数据队列中还有数据没有发送完，等待
   \                     ??put_c_0:
   \   00000002   ....               LDI     R30, LOW(tx_buffer)
   \   00000004   ....               LDI     R31, (tx_buffer) >> 8
   \   00000006   8912               LDD     R17, Z+18
   \   00000008   3110               CPI     R17, 16
   \   0000000A   F3D9               BREQ    ??put_c_0
    108          
    109              __disable_interrupt();
   \   0000000C   94F8               CLI
    110              if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))    //若发送数据队列有数据或者数据寄存器UDR非空时执行(因为队列先进先出的原因，所以，c要放进非空的发送数据队列里面)
   \   0000000E   8912               LDD     R17, Z+18
   \   00000010   2311               TST     R17
   \   00000012   F429               BRNE    ??put_c_1
   \   00000014   9110....           LDS     R17, _A_UCSR0A
   \   00000018   2F21               MOV     R18, R17
   \   0000001A   FD25               SBRC    R18, 5
   \   0000001C   C011               RJMP    ??put_c_2
    111              {
    112                     tx_buffer[tx_wr_index]=c;
   \                     ??put_c_1:
   \   0000001E   8920               LDD     R18, Z+16
   \   00000020   E030               LDI     R19, 0
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   0FA2               ADD     R26, R18
   \   00000026   1FB3               ADC     R27, R19
   \   00000028   930C               ST      X, R16
    113                     if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
   \   0000002A   8900               LDD     R16, Z+16
   \   0000002C   9503               INC     R16
   \   0000002E   8B00               STD     Z+16, R16
   \   00000030   8900               LDD     R16, Z+16
   \   00000032   3100               CPI     R16, 16
   \   00000034   F409               BRNE    ??put_c_3
   \   00000036   8B30               STD     Z+16, R19
    114                     ++tx_counter;
   \                     ??put_c_3:
   \   00000038   8902               LDD     R16, Z+18
   \   0000003A   9503               INC     R16
   \   0000003C   8B02               STD     Z+18, R16
   \   0000003E   C002               RJMP    ??put_c_4
    115                 }
    116              else
    117                     UDR0=c;
   \                     ??put_c_2:
   \   00000040   9300....           STS     _A_UDR0, R16
    118              __enable_interrupt();
   \                     ??put_c_4:
   \   00000044   9478               SEI
    119          		
    120          }
   \   00000046   01DA               MOVW    R27:R26, R21:R20
   \   00000048   9508               RET
   \   0000004A                      REQUIRE _A_UDR0
   \   0000004A                      REQUIRE _A_UCSR0A
    121          /**//*发送字符串*/

   \                                 In  segment CODE, align 2, keep-with-next
    122          void put_s(unsigned char *ptr)
   \                     put_s:
    123          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   C002               RJMP    ??put_s_0
    124          	//reception_buffer_clear();
    125          		//LLED_ON;
    126              while (*ptr)
    127              {
    128                  put_c(*ptr++);
   \                     ??put_s_1:
   \   00000008   910D               LD      R16, X+
   \   0000000A   ....               RCALL   put_c
    129              }
   \                     ??put_s_0:
   \   0000000C   910C               LD      R16, X
   \   0000000E   2300               TST     R16
   \   00000010   F7D9               BRNE    ??put_s_1
    130              //put_c(0x0D);
    131          		//LLED_OFF;
    132              //put_c(0x0A);  //结尾发送回车换行
    133          }
   \   00000012   91A9               LD      R26, Y+
   \   00000014   91B9               LD      R27, Y+
   \   00000016   9508               RET
    134          
    135          /**//*USART 初始化*/

   \                                 In  segment CODE, align 2, keep-with-next
    136          void init_USART0(void)
   \                     init_USART0:
    137          {
    138          	// USART0 initialization
    139          	// Communication Parameters: 8 Data, 1 Stop, No Parity
    140          	// USART0 Receiver: On
    141          	// USART0 Transmitter: On
    142          	// USART0 Mode: Asynchronous
    143          	// USART0 Baud Rate: 38400
    144          	
    145          	UCSR0A=0x00;
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     _A_UCSR0A, R16
    146          	UCSR0B=0xD8;
   \   00000006   ED08               LDI     R16, 216
   \   00000008   9300....           STS     _A_UCSR0B, R16
    147          	UCSR0C=0x06;
   \   0000000C   E006               LDI     R16, 6
   \   0000000E   9300....           STS     _A_UCSR0C, R16
    148          	UBRR0H=0x00;
   \   00000012   E000               LDI     R16, 0
   \   00000014   930000C5           STS     197, R16
    149          	UBRR0L=0x0B;
   \   00000018   E00B               LDI     R16, 11
   \   0000001A   9300....           STS     _A_UBRR0, R16
    150          	
    151          
    152          //test only for transmiter
    153          /*
    154          	UCSR0A=0x00;
    155          	UCSR0B=0x48;
    156          	UCSR0C=0x06;
    157          	UBRR0H=0x00;
    158          	UBRR0L=0x0B;
    159          */
    160          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_UBRR0
   \   00000020                      REQUIRE _A_UCSR0C
   \   00000020                      REQUIRE _A_UCSR0B
   \   00000020                      REQUIRE _A_UCSR0A

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??usart0_rx_ser??INTVEC 80`:
   \   00000050   ........           JMP     usart0_rx_ser

   \                                 In  segment INTVEC, offset 0x58, root
   \                     `??usart0_tx_ser??INTVEC 88`:
   \   00000058   ........           JMP     usart0_tx_ser

   Maximum stack usage in bytes:

     Function      CSTACK RSTACK
     --------      ------ ------
     init_USART0       0      2
     put_c             0      2
     put_s             2      2
       -> put_c        2      2
     usart0_rx_ser    18      4
       -> strcmp      18      2
     usart0_tx_ser     5      2


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     _A_UDR0                       1
     _A_UBRR0                      2
     _A_UCSR0C                     1
     _A_UCSR0B                     1
     _A_UCSR0A                     1
     rx_buffer                   200
     rx_wr_index                   1
     rx_rd_index                   1
     rx_counter                    1
     rx_buffer_overflow            1
     tx_buffer                    19
     tx_wr_index
     tx_rd_index
     tx_counter
     usart0_rx_ser               364
     usart0_tx_ser                84
     put_c                        74
     put_s                        24
     init_USART0                  32
     ??usart0_rx_ser??INTVEC 80    4
     ??usart0_tx_ser??INTVEC 88    4
      Others                       6

 
   6 bytes in segment ABSOLUTE
 578 bytes in segment CODE
   6 bytes in segment INITTAB
   8 bytes in segment INTVEC
 223 bytes in segment NEAR_Z
 
 578 bytes of CODE memory (+ 14 bytes shared)
 223 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

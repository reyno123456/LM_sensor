###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    11/Dec/2009  23:20:59 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\avr\LM_Finial_Test\PIR.c                              #
#    Command line =  D:\avr\LM_Finial_Test\PIR.c --cpu=m644p -ms -o           #
#                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018    #
#                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Lis #
#                    t\ -lA D:\avr\LM_Finial_Test\Release\List\               #
#                    --diag_suppress Pa082,Pe167,Pe186                        #
#                    --initializers_in_flash -z6 --no_inline --no_cross_call  #
#                    --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I "C:\Program     #
#                    Files\IAR Systems\Embedded Workbench 5.3\avr\INC\" -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\CLIB\" --eeprom_size 2048                    #
#    List file    =  D:\avr\LM_Finial_Test\Release\List\PIR.lst               #
#    Object file  =  D:\avr\LM_Finial_Test\Release\Obj\PIR.r90                #
#                                                                             #
#                                                                             #
###############################################################################

D:\avr\LM_Finial_Test\PIR.c
      1          #include <ioavr.h>
      2          #include <inavr.h>
      3          #include "PIR.h"
      4          #include "board.h"
      5          #include "moudle_SCS.h"
      6          #include "global_variable.h"
      7          #include "application.h"
      8          
      9          

   \                                 In  segment CODE, align 2, keep-with-next
     10          void PIR_SENSE_SET(void)
   \                     PIR_SENSE_SET:
     11          {
     12          		
     13          		switch(KO_conf.PirSens)	// the value of global variable "INDEX_PIR_SENSITIVITY" is decided by the user via SCS. 
   \   00000000   9100....           LDS     R16, (KO_conf + 20)
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F029               BREQ    ??PIR_SENSE_SET_0
   \   00000008   5002               SUBI    R16, 2
   \   0000000A   F049               BREQ    ??PIR_SENSE_SET_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F049               BREQ    ??PIR_SENSE_SET_2
   \   00000010   C002               RJMP    ??PIR_SENSE_SET_3
     14          		{
     15          			case 0:
     16          				pir.window = LOW_PIRSENSITIVITY;
   \                     ??PIR_SENSE_SET_0:
   \   00000012   E302               LDI     R16, 50
   \   00000014   C001               RJMP    ??PIR_SENSE_SET_4
     17          				break;
     18          			case 1:
     19          				pir.window = Medium_PIRSENSITIVITY;
   \                     ??PIR_SENSE_SET_3:
   \   00000016   E208               LDI     R16, 40
   \                     ??PIR_SENSE_SET_4:
   \   00000018   9300....           STS     (pir + 1), R16
   \   0000001C   9508               RET
     20          				break;
     21          			case 2:
     22          				pir.window = HIGH_PIRSENSITIVITY;
   \                     ??PIR_SENSE_SET_1:
   \   0000001E   E10A               LDI     R16, 26
   \   00000020   CFFB               RJMP    ??PIR_SENSE_SET_4
     23          				break;
     24          			case 3:
     25          				pir.window = MAX_PIRSENSITIVITY;
   \                     ??PIR_SENSE_SET_2:
   \   00000022   E102               LDI     R16, 18
   \   00000024   CFF9               RJMP    ??PIR_SENSE_SET_4
     26          				break;
     27          			default: 
     28          				pir.window = Medium_PIRSENSITIVITY;
     29          				break;
     30          		}
     31          }		 
     32          

   \                                 In  segment CODE, align 2, keep-with-next
     33          unsigned char PIR_detect(void)
   \                     PIR_detect:
     34          	{
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     35          		static unsigned int ucLastPIRSample = 0;
     36          		static unsigned int ucCurrentPIRSample = 0;
     37          		static unsigned int ucThreshHold=0;
     38          		static unsigned int ucLastLastHighLength = 0;
     39          		static unsigned int ucLastHighLength = 0;
     40          		static unsigned int ucCurHighLength = 0;
     41          		static unsigned int ucLastLowLength = 0;
     42          		static unsigned int ucCurLowLength = 0;
     43          
     44          		PIR_SENSE_SET();
   \   00000004   ....               RCALL   PIR_SENSE_SET
     45          /***************************************************
     46          **		for sensor without LM020
     47          **    add on 0525
     48          ***************************************************/	
     49          		if(1)//(pir.fPIRdetectionEnable == 1)    //the signal of Warm up
     50          		{
     51          		  pir.fPIROCCDetected = 0;
   \   00000006   ....               LDI     R30, LOW(pir)
   \   00000008   ....               LDI     R31, (pir) >> 8
   \   0000000A   8102               LDD     R16, Z+2
   \   0000000C   8113               LDD     R17, Z+3
   \   0000000E   7F0E               ANDI    R16, 0xFE
   \   00000010   8313               STD     Z+3, R17
   \   00000012   8302               STD     Z+2, R16
     52          		  ucThreshHold=pir.window;
   \   00000014   ....               LDI     R26, LOW(??ucLastPIRSample)
   \   00000016   ....               LDI     R27, (??ucLastPIRSample) >> 8
   \   00000018   9100....           LDS     R16, (pir + 1)
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8304               STD     Z+4, R16
   \   00000022   8315               STD     Z+5, R17
     53          		  ucLastPIRSample = ucCurrentPIRSample;
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   930D               ST      X+, R16
   \   0000002A   931C               ST      X, R17
   \   0000002C   9711               SBIW    R27:R26, 1
     54          		  ucCurrentPIRSample = read_adc8bit(PIR_SENSE);
   \   0000002E   E000               LDI     R16, 0
   \   00000030   ........           CALL    read_adc8bit
   \   00000034   E010               LDI     R17, 0
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   8302               STD     Z+2, R16
   \   0000003A   8313               STD     Z+3, R17
     55          			asm("nop");
   \   0000003C   0000               nop
     56          			ucCurrentPIRSample = read_adc8bit(PIR_SENSE);		// add 0603
   \   0000003E   E000               LDI     R16, 0
   \   00000040   ........           CALL    read_adc8bit
   \   00000044   E010               LDI     R17, 0
   \   00000046   01FD               MOVW    R31:R30, R27:R26
   \   00000048   8302               STD     Z+2, R16
   \   0000004A   8313               STD     Z+3, R17
     57          			
     58          		  if (ucCurrentPIRSample >= PIR_CENTER)
   \   0000004C   8122               LDD     R18, Z+2
   \   0000004E   8133               LDD     R19, Z+3
   \   00000050   3629               CPI     R18, 105
   \   00000052   0731               CPC     R19, R17
   \   00000054   F028               BRCS    ??PIR_detect_0
     59          				ucCurrentPIRSample -= PIR_CENTER;
   \   00000056   8102               LDD     R16, Z+2
   \   00000058   8113               LDD     R17, Z+3
   \   0000005A   5609               SUBI    R16, 105
   \   0000005C   4010               SBCI    R17, 0
   \   0000005E   C003               RJMP    ??PIR_detect_1
     60          		  else      
     61          				ucCurrentPIRSample = PIR_CENTER - ucCurrentPIRSample;
   \                     ??PIR_detect_0:
   \   00000060   E609               LDI     R16, 105
   \   00000062   1B02               SUB     R16, R18
   \   00000064   0B13               SBC     R17, R19
   \                     ??PIR_detect_1:
   \   00000066   8302               STD     Z+2, R16
   \   00000068   8313               STD     Z+3, R17
     62          				
     63          			if (ucCurrentPIRSample >= ucThreshHold)    			//当前PIR信号大于设定值
   \   0000006A   8124               LDD     R18, Z+4
   \   0000006C   8135               LDD     R19, Z+5
   \   0000006E   8102               LDD     R16, Z+2
   \   00000070   8113               LDD     R17, Z+3
   \   00000072   1702               CP      R16, R18
   \   00000074   0713               CPC     R17, R19
   \   00000076   F170               BRCS    ??PIR_detect_2
     64          			{
     65          				if (ucLastPIRSample < ucThreshHold)  			//但前次信号小于设定值时，令当前信号高部分重新变为一
   \   00000078   8502               LDD     R16, Z+10
   \   0000007A   8513               LDD     R17, Z+11
   \   0000007C   914D               LD      R20, X+
   \   0000007E   915C               LD      R21, X
   \   00000080   9711               SBIW    R27:R26, 1
   \   00000082   1742               CP      R20, R18
   \   00000084   0753               CPC     R21, R19
   \   00000086   F458               BRCC    ??PIR_detect_3
     66          				{
     67          					ucLastLastHighLength = ucLastHighLength;
   \   00000088   8520               LDD     R18, Z+8
   \   0000008A   8531               LDD     R19, Z+9
   \   0000008C   8326               STD     Z+6, R18
   \   0000008E   8337               STD     Z+7, R19
     68          					ucLastHighLength = ucCurHighLength;
   \   00000090   8700               STD     Z+8, R16
   \   00000092   8711               STD     Z+9, R17
     69          					ucCurHighLength = 1;
   \   00000094   E001               LDI     R16, 1
   \   00000096   E010               LDI     R17, 0
   \   00000098   8702               STD     Z+10, R16
   \   0000009A   8713               STD     Z+11, R17
   \   0000009C   C086               RJMP    ??PIR_detect_4
     70          				}
     71          				else if (ucCurHighLength > 0)        		 	//当前PIR信号大于设定值，且前次信号也大于设定值，
   \                     ??PIR_detect_3:
   \   0000009E   2B01               OR      R16, R17
   \   000000A0   F409               BRNE    $+2+2
   \   000000A2   C083               RJMP    ??PIR_detect_4
     72          				{                                    			//且信号高部分大于零  
     73          					ucCurHighLength++;               		 		//自加35次，MID_WIDTH的值为35
   \   000000A4   8502               LDD     R16, Z+10
   \   000000A6   8513               LDD     R17, Z+11
   \   000000A8   5F0F               SUBI    R16, 255
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   8702               STD     Z+10, R16
   \   000000AE   8713               STD     Z+11, R17
     74          					if (ucCurHighLength >= MID_WIDTH)  			//且信号高部分持续时间大于设定的时间宽度时，PIR触发
   \   000000B0   8582               LDD     R24, Z+10
   \   000000B2   8593               LDD     R25, Z+11
   \   000000B4   3283               CPI     R24, 35
   \   000000B6   4090               SBCI    R25, 0
   \   000000B8   F408               BRCC    $+2+2
   \   000000BA   C077               RJMP    ??PIR_detect_4
     75          					{
     76          					  pir.fPIROCCDetected= 1;               	// alan debug  1;  
   \   000000BC   ....               LDI     R30, LOW(pir)
   \   000000BE   ....               LDI     R31, (pir) >> 8
   \   000000C0   8102               LDD     R16, Z+2
   \   000000C2   8113               LDD     R17, Z+3
   \   000000C4   6001               ORI     R16, 0x01
   \   000000C6   8313               STD     Z+3, R17
   \   000000C8   8302               STD     Z+2, R16
     77          					  ucCurHighLength = 0;
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   01FD               MOVW    R31:R30, R27:R26
   \                     ??PIR_detect_5:
   \   000000CE   8702               STD     Z+10, R16
   \   000000D0   8703               STD     Z+11, R16
   \   000000D2   C06B               RJMP    ??PIR_detect_4
     78          						//DLED_ON;
     79          						//delay_ms(200);
     80          						//DLED_OFF;
     81          					}
     82          				}
     83          			}
     84          			else                                      			//当前PIR信号小于设定值
     85          			{	
     86          				if (ucLastPIRSample >= ucThreshHold)   			//当前PIR信号小于设定值，但前次信号大于设定值时
   \                     ??PIR_detect_2:
   \   000000D4   910D               LD      R16, X+
   \   000000D6   911C               LD      R17, X
   \   000000D8   9711               SBIW    R27:R26, 1
   \   000000DA   1702               CP      R16, R18
   \   000000DC   0713               CPC     R17, R19
   \   000000DE   F408               BRCC    $+2+2
   \   000000E0   C051               RJMP    ??PIR_detect_6
     87          				{
     88          					if (((ucLastHighLength >= MIN_WIDTH) && (ucCurHighLength >= MIN_WIDTH) && ((ucLastHighLength >= MIN_SPACE) || (ucCurHighLength >= MIN_SPACE)) && (ucLastHighLength + ucCurLowLength + ucCurHighLength <= MAX_WIDTH)) 
     89          								|| ((ucLastLastHighLength >= MIN_WIDTH) && (ucLastHighLength >= MIN_WIDTH) && (ucCurHighLength >= MIN_WIDTH) && (ucLastLastHighLength + ucLastLowLength + ucLastHighLength + ucCurLowLength + ucCurHighLength <= MAX_WIDTH)))
   \   000000E2   8520               LDD     R18, Z+8
   \   000000E4   8531               LDD     R19, Z+9
   \   000000E6   3022               CPI     R18, 2
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   0730               CPC     R19, R16
   \   000000EC   F0B8               BRCS    ??PIR_detect_7
   \   000000EE   8502               LDD     R16, Z+10
   \   000000F0   8513               LDD     R17, Z+11
   \   000000F2   3002               CPI     R16, 2
   \   000000F4   E040               LDI     R20, 0
   \   000000F6   0714               CPC     R17, R20
   \   000000F8   F088               BRCS    ??PIR_detect_7
   \   000000FA   3025               CPI     R18, 5
   \   000000FC   0734               CPC     R19, R20
   \   000000FE   F418               BRCC    ??PIR_detect_8
   \   00000100   3005               CPI     R16, 5
   \   00000102   0714               CPC     R17, R20
   \   00000104   F058               BRCS    ??PIR_detect_7
   \                     ??PIR_detect_8:
   \   00000106   8546               LDD     R20, Z+14
   \   00000108   8557               LDD     R21, Z+15
   \   0000010A   01B9               MOVW    R23:R22, R19:R18
   \   0000010C   0F64               ADD     R22, R20
   \   0000010E   1F75               ADC     R23, R21
   \   00000110   0F60               ADD     R22, R16
   \   00000112   1F71               ADC     R23, R17
   \   00000114   386D               CPI     R22, 141
   \   00000116   E000               LDI     R16, 0
   \   00000118   0770               CPC     R23, R16
   \   0000011A   F0F8               BRCS    ??PIR_detect_9
   \                     ??PIR_detect_7:
   \   0000011C   8146               LDD     R20, Z+6
   \   0000011E   8157               LDD     R21, Z+7
   \   00000120   3042               CPI     R20, 2
   \   00000122   E000               LDI     R16, 0
   \   00000124   0750               CPC     R21, R16
   \   00000126   F128               BRCS    ??PIR_detect_10
   \   00000128   3022               CPI     R18, 2
   \   0000012A   0730               CPC     R19, R16
   \   0000012C   F110               BRCS    ??PIR_detect_10
   \   0000012E   8502               LDD     R16, Z+10
   \   00000130   8513               LDD     R17, Z+11
   \   00000132   3002               CPI     R16, 2
   \   00000134   E060               LDI     R22, 0
   \   00000136   0716               CPC     R17, R22
   \   00000138   F0E0               BRCS    ??PIR_detect_10
   \   0000013A   8564               LDD     R22, Z+12
   \   0000013C   8575               LDD     R23, Z+13
   \   0000013E   0F46               ADD     R20, R22
   \   00000140   1F57               ADC     R21, R23
   \   00000142   0F42               ADD     R20, R18
   \   00000144   1F53               ADC     R21, R19
   \   00000146   8526               LDD     R18, Z+14
   \   00000148   8537               LDD     R19, Z+15
   \   0000014A   0F42               ADD     R20, R18
   \   0000014C   1F53               ADC     R21, R19
   \   0000014E   0F40               ADD     R20, R16
   \   00000150   1F51               ADC     R21, R17
   \   00000152   384D               CPI     R20, 141
   \   00000154   E000               LDI     R16, 0
   \   00000156   0750               CPC     R21, R16
   \   00000158   F460               BRCC    ??PIR_detect_10
     90          					{
     91          					      pir.fPIROCCDetected= 1;		// alan debug  1;  1;  
   \                     ??PIR_detect_9:
   \   0000015A   ....               LDI     R30, LOW(pir)
   \   0000015C   ....               LDI     R31, (pir) >> 8
   \   0000015E   8102               LDD     R16, Z+2
   \   00000160   8113               LDD     R17, Z+3
   \   00000162   6001               ORI     R16, 0x01
   \   00000164   8313               STD     Z+3, R17
   \   00000166   8302               STD     Z+2, R16
     92          					      ucCurLowLength = 0;
   \   00000168   E000               LDI     R16, 0
   \   0000016A   01FD               MOVW    R31:R30, R27:R26
   \   0000016C   8706               STD     Z+14, R16
   \   0000016E   8707               STD     Z+15, R16
     93          					      ucCurHighLength = 0;
   \   00000170   CFAE               RJMP    ??PIR_detect_5
     94          								//DLED_ON;
     95          								//delay_ms(200);
     96          								//DLED_OFF;
     97          					}
     98          					else
     99          					{
    100          							ucLastLowLength = ucCurLowLength;
   \                     ??PIR_detect_10:
   \   00000172   8506               LDD     R16, Z+14
   \   00000174   8517               LDD     R17, Z+15
   \   00000176   8704               STD     Z+12, R16
   \   00000178   8715               STD     Z+13, R17
    101          							ucCurLowLength = 1;
   \   0000017A   E001               LDI     R16, 1
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   8706               STD     Z+14, R16
   \   00000180   8717               STD     Z+15, R17
   \   00000182   C013               RJMP    ??PIR_detect_4
    102          					}
    103          				}
    104          				else if (ucCurLowLength > 0)      				//当前PIR信号小于设定值，且前次信号也小于设定值，且信号底部宽度大于零
   \                     ??PIR_detect_6:
   \   00000184   8506               LDD     R16, Z+14
   \   00000186   8517               LDD     R17, Z+15
   \   00000188   2F20               MOV     R18, R16
   \   0000018A   2B21               OR      R18, R17
   \   0000018C   F071               BREQ    ??PIR_detect_4
    105          					ucCurLowLength += (ucCurLowLength >= MAX_WIDTH) ? 0 : 1;
   \   0000018E   380C               CPI     R16, 140
   \   00000190   E020               LDI     R18, 0
   \   00000192   0712               CPC     R17, R18
   \   00000194   F010               BRCS    ??PIR_detect_11
   \   00000196   E000               LDI     R16, 0
   \   00000198   C001               RJMP    ??PIR_detect_12
   \                     ??PIR_detect_11:
   \   0000019A   E001               LDI     R16, 1
   \                     ??PIR_detect_12:
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   8526               LDD     R18, Z+14
   \   000001A0   8537               LDD     R19, Z+15
   \   000001A2   0F20               ADD     R18, R16
   \   000001A4   1F31               ADC     R19, R17
   \   000001A6   8726               STD     Z+14, R18
   \   000001A8   8737               STD     Z+15, R19
    106          				                                 
    107          			}
    108          		}
    109                          
    110              if(pir.fPIROCCDetected == 1)    
   \                     ??PIR_detect_4:
   \   000001AA   ....               LDI     R30, LOW(pir)
   \   000001AC   ....               LDI     R31, (pir) >> 8
   \   000001AE   8102               LDD     R16, Z+2
   \   000001B0   8113               LDD     R17, Z+3
   \   000001B2   FF00               SBRS    R16, 0
   \   000001B4   C003               RJMP    ??PIR_detect_13
    111          		{
    112          	  	PIR_detection_en = 1;     		// add by alan 20090409          
   \   000001B6   E001               LDI     R16, 1
   \   000001B8   9300....           STS     PIR_detection_en, R16
    113          			return pir.fPIROCCDetected; //reyno 20090527
    114          		}
    115          	
    116          	
    117          /***************************************************
    118          **		for LM020 PIR2			
    119          **    add on 0525
    120          ***************************************************/	
    121          #ifdef LM020					// 0525
    122          		
    123          		static unsigned int Pir2_ucLastPIRSample = 0;
    124          		static unsigned int Pir2_ucCurrentPIRSample = 0;
    125          		static unsigned int Pir2_ucThreshHold=0;
    126          		static unsigned int Pir2_ucLastLastHighLength = 0;
    127          		static unsigned int Pir2_ucLastHighLength = 0;
    128          		static unsigned int Pir2_ucCurHighLength = 0;
    129          		static unsigned int Pir2_ucLastLowLength = 0;
    130          		static unsigned int Pir2_ucCurLowLength = 0;
    131          		if(1)//(pir.fPIRdetectionEnable == 1)    //the signal of Warm up
    132          		{
    133          		  pir.fPIROCCDetected = 0;
    134          		  Pir2_ucThreshHold=pir.window;
    135          		  Pir2_ucLastPIRSample = Pir2_ucCurrentPIRSample;
    136          		  Pir2_ucCurrentPIRSample = read_adc8bit(PIR2_SENSE);
    137          
    138          		  if (Pir2_ucCurrentPIRSample >= PIR_CENTER)
    139          				Pir2_ucCurrentPIRSample -= PIR_CENTER;
    140          		  else      
    141          				Pir2_ucCurrentPIRSample = PIR_CENTER - Pir2_ucCurrentPIRSample;
    142          				
    143          			if (Pir2_ucCurrentPIRSample >= Pir2_ucThreshHold)    			
    144          			{
    145          				if (Pir2_ucLastPIRSample < Pir2_ucThreshHold)  			
    146          				{
    147          					Pir2_ucLastLastHighLength = Pir2_ucLastHighLength;
    148          					Pir2_ucLastHighLength = Pir2_ucCurHighLength;
    149          					Pir2_ucCurHighLength = 1;
    150          				}
    151          				else if (Pir2_ucCurHighLength > 0)        		 
    152          				{                                    			
    153          					Pir2_ucCurHighLength++;               		 		
    154          					if (Pir2_ucCurHighLength >= MID_WIDTH)  			
    155          					{
    156          					  pir.fPIROCCDetected= 1;               
    157          					  Pir2_ucCurHighLength = 0;
    158          					}
    159          				}
    160          			}
    161          			else                                      			//当前PIR信号小于设定值
    162          			{	
    163          				if (Pir2_ucLastPIRSample >= Pir2_ucThreshHold)   			
    164          				{
    165          					if (((Pir2_ucLastHighLength >= MIN_WIDTH) && (Pir2_ucCurHighLength >= MIN_WIDTH) && ((Pir2_ucLastHighLength >= MIN_SPACE) || (Pir2_ucCurHighLength >= MIN_SPACE)) && (Pir2_ucLastHighLength + Pir2_ucCurLowLength + Pir2_ucCurHighLength <= MAX_WIDTH)) 
    166          								|| ((Pir2_ucLastLastHighLength >= MIN_WIDTH) && (Pir2_ucLastHighLength >= MIN_WIDTH) && (Pir2_ucCurHighLength >= MIN_WIDTH) && (Pir2_ucLastLastHighLength + Pir2_ucLastLowLength + Pir2_ucLastHighLength + Pir2_ucCurLowLength + Pir2_ucCurHighLength <= MAX_WIDTH)))
    167          					{
    168          					      pir.fPIROCCDetected= 1;		
    169          					      Pir2_ucCurLowLength = 0;
    170          					      Pir2_ucCurHighLength = 0;
    171          					}
    172          					else
    173          					{
    174          							Pir2_ucLastLowLength = Pir2_ucCurLowLength;
    175          							Pir2_ucCurLowLength = 1;
    176          					}
    177          				}
    178          				else if (Pir2_ucCurLowLength > 0)      				
    179          					Pir2_ucCurLowLength += (Pir2_ucCurLowLength >= MAX_WIDTH) ? 0 : 1;                            
    180          			}
    181          		}
    182                          
    183               if(pir.fPIROCCDetected == 1)    
    184          		{
    185          	  	PIR_detection_en = 1;     		// add on 0525       
    186          		}
    187          		
    188          		
    189          #endif
    190          		return pir.fPIROCCDetected;
   \                     ??PIR_detect_13:
   \   000001BC   8102               LDD     R16, Z+2
   \   000001BE   8113               LDD     R17, Z+3
   \   000001C0   7001               ANDI    R16, 0x01
   \   000001C2   E0E4               LDI     R30, 4
   \   000001C4   ........           JMP     ?EPILOGUE_B4_L09
    191          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??ucLastPIRSample:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 2
   \   0000000A                      DS8 2
   \   0000000C                      DS8 2
   \   0000000E                      DS8 2

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     PIR_SENSE_SET          0      2
     PIR_detect             4      2
       -> PIR_SENSE_SET     4      2
       -> read_adc8bit      4      2
       -> read_adc8bit      4      2


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     PIR_SENSE_SET          38
     PIR_detect            456
     ucLastPIRSample        16
     ucCurrentPIRSample
     ucThreshHold
     ucLastLastHighLength
     ucLastHighLength
     ucCurHighLength
     ucLastLowLength
     ucCurLowLength
      Others                 6

 
 494 bytes in segment CODE
   6 bytes in segment INITTAB
  16 bytes in segment NEAR_Z
 
 494 bytes of CODE memory (+ 6 bytes shared)
  16 bytes of DATA memory

Errors: none
Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR   11/Dec/2009  23:21:45 /
// Copyright 1996-2009 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\avr\LM_Finial_Test\decode_scs.c                      /
//    Command line =  D:\avr\LM_Finial_Test\decode_scs.c --cpu=m644p -ms -o   /
//                    D:\avr\LM_Finial_Test\Release\Obj\ -D NDEBUG -D LM018   /
//                    -D FINAL_VERSION2 -lCN D:\avr\LM_Finial_Test\Release\Li /
//                    st\ -lA D:\avr\LM_Finial_Test\Release\List\             /
//                    --diag_suppress Pa082,Pe167,Pe186                       /
//                    --initializers_in_flash -z6 --no_inline                 /
//                    --no_cross_call --no_tbaa -DENABLE_BIT_DEFINITIONS -e   /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench     /
//                    5.3\avr\INC\" -I "C:\Program Files\IAR                  /
//                    Systems\Embedded Workbench 5.3\avr\INC\CLIB\"           /
//                    --eeprom_size 2048                                      /
//    List file    =  D:\avr\LM_Finial_Test\Release\List\decode_scs.s90       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME decode_scs

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega644P"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?CV_SWITCH_L06
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B8_L09
        EXTERN ?F_CMP_GE_L04
        EXTERN ?F_DIV_L04
        EXTERN ?F_MUL_L04
        EXTERN ?F_SUB_L04
        EXTERN ?L_EC_MUL_L03
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE8_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?S_EC_MUL_L02
        EXTERN ?UL2F_L04
        EXTERN ?UL_DIVMOD_L03
        EXTERN ?need_segment_init
        EXTERN __eeget16_16
        EXTERN __eeput16_16

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC application_decode_long
        FUNCTION application_decode_long,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC application_decode_short
        FUNCTION application_decode_short,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC calibration_decode
        FUNCTION calibration_decode,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC decode_SCS
        FUNCTION decode_SCS,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC decode_id
        FUNCTION decode_id,0a1203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC is_gateway_busy
        FUNCTION is_gateway_busy,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC reception_buffer_clear
        FUNCTION reception_buffer_clear,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC scs_calibration
        FUNCTION scs_calibration,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN StrToChar
        FUNCTION StrToChar,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN id_frame
        FUNCTION id_frame,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN send_frame_pp_ext_broad
        FUNCTION send_frame_pp_ext_broad,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN regulation_timer_initial
        FUNCTION regulation_timer_initial,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking
        FUNCTION led_blinking,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN led_blinking_disable
        FUNCTION led_blinking_disable,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN daylight_set_init
        FUNCTION daylight_set_init,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN buzzer_ms
        FUNCTION buzzer_ms,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN write_KO
        FUNCTION write_KO,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN write_ee_KO
        FUNCTION write_ee_KO,0202H
        ARGFRAME RSTACK, 0, STACK
        EXTERN DLL
        EXTERN KO_conf
        EXTERN SCS_received
        EXTERN Sensor_mode
        EXTERN Time_delay
        EXTERN ee_main_state
        EXTERN eep_setpoint
        EXTERN g_asc_reception_buffer
        EXTERN g_asc_short_buffer
        EXTERN g_reception_buffer
        EXTERN g_short_buffer
        EXTERN scs_frame
        EXTERN state

// D:\avr\LM_Finial_Test\decode_scs.c
//    1 #include <ioavr.h>
//    2 #include <stdio.h>
//    3 #include "usart.h"
//    4 #include "board.h"
//    5 #include "moudle_SCS.h"
//    6 #include "decode_scs.h"
//    7 #include "stdlib.h"
//    8 #include "global_variable.h"
//    9 #include "application.h"
//   10 #include "decode_scs_next.h"
//   11 #include "moudle_scs.h"
//   12 #include "application.h"
//   13 #include "string.h"
//   14 #include "configuration.h"
//   15 #include "function_service.h"
//   16 

        RSEG CODE:CODE:NOROOT(1)
//   17 void reception_buffer_clear(unsigned char temp)
reception_buffer_clear:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function reception_buffer_clear
//   18 {
//   19 #ifndef DEBUG
//   20 
//   21 	unsigned char i;
//   22 		
//   23 	for(i=0;i<8;i++)
        LDI     R16, 0
        RJMP    ??reception_buffer_clear_0
//   24 	{
//   25 		g_short_buffer[i] = 0;
??reception_buffer_clear_1:
        LDI     R18, 0
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(g_short_buffer) & 0xFFFF))
        SBCI    R31, (-(g_short_buffer) & 0xFFFF) >> 8
        ST      Z, R18
//   26 	}
        INC     R16
??reception_buffer_clear_0:
        CPI     R16, 8
        BRCS    ??reception_buffer_clear_1
//   27 
//   28 	for(i=0;i<4;i++)
        LDI     R16, 0
        RJMP    ??reception_buffer_clear_2
//   29 	{
//   30 		g_asc_short_buffer[i] = 0;
??reception_buffer_clear_3:
        LDI     R18, 0
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(g_asc_short_buffer) & 0xFFFF))
        SBCI    R31, (-(g_asc_short_buffer) & 0xFFFF) >> 8
        ST      Z, R18
//   31 	}
        INC     R16
??reception_buffer_clear_2:
        CPI     R16, 4
        BRCS    ??reception_buffer_clear_3
//   32 
//   33 	for(i=0;i<8;i++)
        LDI     R16, 0
        RJMP    ??reception_buffer_clear_4
//   34 	{
//   35 		g_asc_reception_buffer[i] = 0;
??reception_buffer_clear_5:
        LDI     R18, 0
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(g_asc_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_asc_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R18
//   36 	}
        INC     R16
??reception_buffer_clear_4:
        CPI     R16, 8
        BRCS    ??reception_buffer_clear_5
//   37 
//   38 	for(i=0;i<16;i++)
        LDI     R16, 0
        RJMP    ??reception_buffer_clear_6
//   39 	{
//   40 		g_reception_buffer[i] = 0;
??reception_buffer_clear_7:
        LDI     R18, 0
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R18
//   41 	}
        INC     R16
??reception_buffer_clear_6:
        CPI     R16, 16
        BRCS    ??reception_buffer_clear_7
//   42 	
//   43 #else
//   44 	extern unsigned char g_RxBuffer[];
//   45 	extern unsigned char RxNumber;
//   46 		
//   47 	for(i=0;i<RX_BUFFER_SIZE;i++)
//   48 	{
//   49 		g_RxBuffer[i] = 0;
//   50 	}
//   51 	RxNumber = 0;
//   52 
//   53 #endif
//   54 }
        RET
        CFI EndBlock cfiBlock0
//   55 

        RSEG CODE:CODE:NOROOT(1)
//   56 unsigned char decode_id(void)
decode_id:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function decode_id
//   57 {
        FUNCALL decode_id, StrToChar
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL decode_id, StrToChar
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL decode_id, id_frame
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL decode_id, send_frame_pp_ext_broad
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 4
        CFI CFA_Y Y+6
//   58 	unsigned char i;
//   59 	unsigned char buffer[3];
//   60 
//   61 	//static unsigned char ID_buffer[8];
//   62 	volatile unsigned char current = 0xFF;
        LDI     R16, 255
        ST      Y, R16
//   63 
//   64 	for(i=0;i<DEEP;i++)
        LDI     R24, 0
        RJMP    ??decode_id_0
??decode_id_1:
        INC     R24
??decode_id_0:
        CPI     R24, 35
        BRCC    ??decode_id_2
//   65 	{
//   66 		if(scs_frame[i].finished)
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        LDD     R16, Z+22
        TST     R16
        BREQ    ??decode_id_1
//   67 		{
//   68 			current = i;
        ST      Y, R20
//   69 			break;
//   70 		}
//   71 	}
//   72 
//   73 	if(scs_frame[current].finished && current != 0xFF)
??decode_id_2:
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        LDD     R16, Z+22
        TST     R16
        BRNE    $+2+2
        RJMP    ??decode_id_3
        LD      R16, Y
        CPI     R16, 255
        BRNE    $+2+2
        RJMP    ??decode_id_3
//   74 	{
//   75 		switch(StrToChar(&scs_frame[current].byte[1]))
        LDI     R18, LOW((scs_frame + 1))
        LDI     R19, HIGH((scs_frame + 1))
        LD      R20, Y
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R17:R16, R19:R18
        CALL    StrToChar
        CPI     R16, 24
        BREQ    $+2+2
        RJMP    ??decode_id_4
//   76 		{
//   77 			case 0x18:
//   78 				for(i=0;i<16;i++)
        LDI     R24, 0
        RJMP    ??decode_id_5
//   79 				{
//   80 					g_reception_buffer[i] = scs_frame[current].byte[i+3];
??decode_id_6:
        LDI     R30, LOW((scs_frame + 3))
        LDI     R31, HIGH((scs_frame + 3))
        LDI     R25, 0
        ADD     R30, R24
        ADC     R31, R25
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//   81 				}
        INC     R24
??decode_id_5:
        CPI     R24, 16
        BRCS    ??decode_id_6
//   82 				for(i=0;i<8;i++)
        LDI     R24, 0
        RJMP    ??decode_id_7
//   83 				{
//   84 					buffer[0] = g_reception_buffer[i * 2];
??decode_id_8:
        LDI     R16, 2
        MUL     R24, R16
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        ADD     R30, R0
        ADC     R31, R1
        LD      R16, Z
        STD     Y+1, R16
//   85 					buffer[1] = g_reception_buffer[i * 2 + 1];
        LDD     R16, Z+1
        STD     Y+2, R16
//   86 					buffer[2] = 0;
        LDI     R16, 0
        STD     Y+3, R16
//   87 					g_asc_reception_buffer[i] = StrToChar(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 255
        SBCI    R17, 255
        CALL    StrToChar
        LDI     R25, 0
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_asc_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_asc_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//   88 				}
        INC     R24
??decode_id_7:
        CPI     R24, 8
        BRCS    ??decode_id_8
//   89 
//   90 				switch(g_asc_reception_buffer[0])
        LDS     R16, g_asc_reception_buffer
        CPI     R16, 208
        BRNE    ??decode_id_3
//   91 				{
//   92 					case 0xD0:
//   93             if(g_reception_buffer[6] == '0' || g_reception_buffer[6] == 'F')
        LDS     R16, (g_reception_buffer + 6)
        CPI     R16, 48
        BREQ    ??decode_id_9
        LDS     R16, (g_reception_buffer + 6)
        CPI     R16, 70
        BRNE    ??decode_id_3
//   94 						  id_frame();
??decode_id_9:
        CALL    id_frame
//   95 					break;
//   96 
//   97 					default:break;
//   98 				}
//   99 			break;
//  100 
//  101 			default:
//  102 				scs_frame[current].finished = 0;	
//  103         if(state.id_setting == 1)
//  104 	      {
//  105 		      if( Time_delay.timer_flex.time_out == 1 )
//  106 		      {
//  107 			      state.id_setting = 0;
//  108 			      send_frame_pp_ext_broad("D000010E00000000",TRANS_DELAY);
//  109 			      asm("nop");
//  110 		      }
//  111 	      }
//  112 			return 1;
//  113 		}
//  114 	}
//  115 	scs_frame[current].finished = 0;
??decode_id_3:
        LDI     R18, 0
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        STD     Z+22, R18
//  116 	return 0;
        LDI     R16, 0
??decode_id_10:
        ADIW    R29:R28, 4
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI R24 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+6
??decode_id_4:
        LDI     R18, 0
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        STD     Z+22, R18
        LDI     R30, LOW(state)
        LDI     R31, (state) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SBRS    R16, 7
        RJMP    ??decode_id_11
        LDS     R16, (Time_delay + 157)
        CPI     R16, 1
        BRNE    ??decode_id_11
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0x7F
        STD     Z+1, R17
        ST      Z, R16
        LDI     R18, 50
        LDI     R19, 0
        LDI     R16, LOW(`?<Constant "D000010E00000000">`)
        LDI     R17, (`?<Constant "D000010E00000000">`) >> 8
        CALL    send_frame_pp_ext_broad
        nop
??decode_id_11:
        LDI     R16, 1
        RJMP    ??decode_id_10
        CFI EndBlock cfiBlock1
//  117 }
//  118 

        RSEG CODE:CODE:NOROOT(1)
//  119 unsigned char decode_SCS(void)
decode_SCS:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function decode_SCS
//  120 {
        FUNCALL decode_SCS, StrToChar
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL decode_SCS, StrToChar
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL decode_SCS, StrToChar
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        SBIW    R29:R28, 4
        CFI CFA_Y Y+6
//  121 	volatile unsigned char current = 0xFF;
        LDI     R16, 255
        ST      Y, R16
//  122 	unsigned char i;
//  123 	unsigned char buffer[3];
//  124 	//unsigned char current;
//  125 
//  126 	for(i=0;i<DEEP;i++)
        LDI     R24, 0
        RJMP    ??decode_SCS_0
??decode_SCS_1:
        INC     R24
??decode_SCS_0:
        CPI     R24, 35
        BRCC    ??decode_SCS_2
//  127 	{
//  128 		if(scs_frame[i].finished)
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        LDD     R16, Z+22
        TST     R16
        BREQ    ??decode_SCS_1
//  129 		{
//  130 			current = i;
        ST      Y, R20
//  131 			break;
//  132 		}
//  133 	}
//  134 
//  135 	if(scs_frame[current].finished && current != 0xFF)
??decode_SCS_2:
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        LDD     R16, Z+22
        TST     R16
        BRNE    $+2+2
        RJMP    ??decode_SCS_3
        LD      R16, Y
        CPI     R16, 255
        BRNE    $+2+2
        RJMP    ??decode_SCS_3
//  136 	{
//  137 		switch(StrToChar(&scs_frame[current].byte[1]))
        LDI     R18, LOW((scs_frame + 1))
        LDI     R19, HIGH((scs_frame + 1))
        LD      R20, Y
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R18, R16
        ADC     R19, R17
        MOVW    R17:R16, R19:R18
        CALL    StrToChar
        SUBI    R16, 0
        BRNE    $+2+2
        RJMP    ??decode_SCS_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??decode_SCS_3
        SUBI    R16, 6
        BRNE    $+2+2
        RJMP    ??decode_SCS_3
        SUBI    R16, 16
        BREQ    ??decode_SCS_4
        DEC     R16
        BREQ    ??decode_SCS_5
        RJMP    ??decode_SCS_6
//  138 		{
//  139     	case 0x00:
//  140       break;
//  141 
//  142     	case 0x01:
//  143       break;
//  144 
//  145     	case 0x07:
//  146       break;
//  147 
//  148 			case 0x17:
//  149 				for(i=0;i<8;i++)
??decode_SCS_4:
        LDI     R24, 0
        RJMP    ??decode_SCS_7
//  150 				{
//  151 					g_short_buffer[i] = scs_frame[current].byte[i+3];
??decode_SCS_8:
        LDI     R30, LOW((scs_frame + 3))
        LDI     R31, HIGH((scs_frame + 3))
        LDI     R25, 0
        ADD     R30, R24
        ADC     R31, R25
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_short_buffer) & 0xFFFF))
        SBCI    R31, (-(g_short_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//  152 				}
        INC     R24
??decode_SCS_7:
        CPI     R24, 8
        BRCS    ??decode_SCS_8
//  153 				
//  154 				for(i=0;i<4;i++)
        LDI     R24, 0
??decode_SCS_9:
        CPI     R24, 4
        BRCS    $+2+2
        RJMP    ??decode_SCS_3
//  155 				{	
//  156 					buffer[0] = g_short_buffer[i * 2];
        LDI     R16, 2
        MUL     R24, R16
        LDI     R30, LOW(g_short_buffer)
        LDI     R31, (g_short_buffer) >> 8
        ADD     R30, R0
        ADC     R31, R1
        LD      R16, Z
        STD     Y+1, R16
//  157 					buffer[1] = g_short_buffer[i * 2 + 1];
        LDD     R16, Z+1
        STD     Y+2, R16
//  158 					buffer[2] = 0;
        LDI     R16, 0
        STD     Y+3, R16
//  159 					g_asc_short_buffer[i] = StrToChar(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 255
        SBCI    R17, 255
        CALL    StrToChar
        LDI     R25, 0
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_asc_short_buffer) & 0xFFFF))
        SBCI    R31, (-(g_asc_short_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//  160 				}
        INC     R24
        RJMP    ??decode_SCS_9
//  161 			break;
//  162 
//  163 			case 0x18:
//  164 				for(i=0;i<16;i++)
??decode_SCS_5:
        LDI     R24, 0
        RJMP    ??decode_SCS_10
//  165 				{
//  166 					g_reception_buffer[i] = scs_frame[current].byte[i+3];
??decode_SCS_11:
        LDI     R30, LOW((scs_frame + 3))
        LDI     R31, HIGH((scs_frame + 3))
        LDI     R25, 0
        ADD     R30, R24
        ADC     R31, R25
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//  167 				}
        INC     R24
??decode_SCS_10:
        CPI     R24, 16
        BRCS    ??decode_SCS_11
//  168 
//  169 				for(i=0;i<8;i++)
        LDI     R24, 0
??decode_SCS_12:
        CPI     R24, 8
        BRCC    ??decode_SCS_3
//  170 				{
//  171 					buffer[0] = g_reception_buffer[i * 2];
        LDI     R16, 2
        MUL     R24, R16
        LDI     R30, LOW(g_reception_buffer)
        LDI     R31, (g_reception_buffer) >> 8
        ADD     R30, R0
        ADC     R31, R1
        LD      R16, Z
        STD     Y+1, R16
//  172 					buffer[1] = g_reception_buffer[i * 2 + 1];
        LDD     R16, Z+1
        STD     Y+2, R16
//  173 					buffer[2] = 0;
        LDI     R16, 0
        STD     Y+3, R16
//  174 					g_asc_reception_buffer[i] = StrToChar(buffer);
        MOVW    R17:R16, R29:R28
        SUBI    R16, 255
        SBCI    R17, 255
        CALL    StrToChar
        LDI     R25, 0
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(g_asc_reception_buffer) & 0xFFFF))
        SBCI    R31, (-(g_asc_reception_buffer) & 0xFFFF) >> 8
        ST      Z, R16
//  175 				}
        INC     R24
        RJMP    ??decode_SCS_12
//  176 			break;
//  177 
//  178 			default:
//  179 				scs_frame[current].finished = 0;		
??decode_SCS_6:
        LDI     R18, 0
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        STD     Z+22, R18
//  180 			return 1;
        LDI     R16, 1
        RJMP    ??decode_SCS_13
//  181 		}
//  182 	}
//  183 	scs_frame[current].finished = 0;
??decode_SCS_3:
        LDI     R18, 0
        LD      R20, Y
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(scs_frame) & 0xFFFF))
        SBCI    R31, (-(scs_frame) & 0xFFFF) >> 8
        STD     Z+22, R18
//  184 	return 0;
        LDI     R16, 0
??decode_SCS_13:
        ADIW    R29:R28, 4
        CFI CFA_Y Y+2
        LD      R24, Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
        LD      R25, Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock2
//  185 }
//  186 

        RSEG CODE:CODE:NOROOT(1)
//  187 unsigned char is_gateway_busy(void)
is_gateway_busy:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function is_gateway_busy
//  188 {
        FUNCALL is_gateway_busy, StrToChar
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL is_gateway_busy, StrToChar
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL is_gateway_busy, StrToChar
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
//  189 	unsigned char i;
//  190 	//unsigned char current;
//  191 
//  192 	for(i=0;i<DEEP;i++)
        LDI     R24, 0
        RJMP    ??is_gateway_busy_0
??is_gateway_busy_1:
        INC     R24
??is_gateway_busy_0:
        CPI     R24, 35
        BRCC    ??is_gateway_busy_2
//  193 	{
//  194 		if(scs_frame[i].finished)
        MOV     R20, R24
        LDI     R21, 0
        LDI     R16, 24
        LDI     R17, 0
        CALL    ?S_EC_MUL_L02
        LDI     R26, LOW(scs_frame)
        LDI     R27, (scs_frame) >> 8
        ADD     R26, R16
        ADC     R27, R17
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+22
        TST     R16
        BREQ    ??is_gateway_busy_1
//  195 		{
//  196       scs_frame[i].finished = 0;
        STD     Z+22, R21
//  197       switch(StrToChar(&scs_frame[i].byte[1]))
        MOVW    R17:R16, R27:R26
        SUBI    R16, 255
        SBCI    R17, 255
        CALL    StrToChar
        SUBI    R16, 0
        BREQ    ??is_gateway_busy_3
        DEC     R16
        BREQ    ??is_gateway_busy_4
        SUBI    R16, 6
        BREQ    ??is_gateway_busy_5
        DEC     R16
        BREQ    ??is_gateway_busy_6
        SUBI    R16, 11
        BREQ    ??is_gateway_busy_7
        SUBI    R16, 15
        BREQ    ??is_gateway_busy_4
        RJMP    ??is_gateway_busy_1
//  198 		  {
//  199         case 0x00:
//  200           //scs_frame[current].finished = 0;
//  201           return 0x02;
??is_gateway_busy_3:
        LDI     R16, 2
        RJMP    ??is_gateway_busy_8
//  202 
//  203         case 0x01:
//  204          return 0x01;
//  205 
//  206         case 0x07:
//  207           return 0x07;
??is_gateway_busy_5:
        LDI     R16, 7
        RJMP    ??is_gateway_busy_8
//  208 
//  209         case 0x08:
//  210           if(StrToChar(&scs_frame[i].byte[3]) == 2 || StrToChar(&scs_frame[i].byte[3]) == 3)
??is_gateway_busy_6:
        MOVW    R17:R16, R27:R26
        SUBI    R16, 253
        SBCI    R17, 255
        CALL    StrToChar
        CPI     R16, 2
        BREQ    ??is_gateway_busy_4
        ADIW    R27:R26, 3
        MOVW    R17:R16, R27:R26
        CALL    StrToChar
        CPI     R16, 3
        BRNE    ??is_gateway_busy_1
??is_gateway_busy_4:
        LDI     R16, 1
        RJMP    ??is_gateway_busy_8
//  211             return 1;
//  212         break;
//  213 
//  214 				case 0x13:
//  215 					return 0x13;
??is_gateway_busy_7:
        LDI     R16, 19
        RJMP    ??is_gateway_busy_8
//  216 				
//  217         case 0x22:
//  218           return 1;
//  219 
//  220 			  default: break;
//  221 		  }
//  222 		}
//  223 	}
//  224   return 0;
??is_gateway_busy_2:
        LDI     R16, 0
??is_gateway_busy_8:
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock3
//  225 }
//  226 
//  227 //SCS_received.presence GR presence
//  228 //SCS_received.GS_presence GS presence

        RSEG CODE:CODE:NOROOT(1)
//  229 void application_decode_short(void)
application_decode_short:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function application_decode_short
//  230 {	
        FUNCALL application_decode_short, regulation_timer_initial
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
//  231 	if(KO_conf.AddressType == GROUP)
        LDI     R26, LOW(KO_conf)
        LDI     R27, (KO_conf) >> 8
        LDS     R16, (KO_conf + 1)
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??application_decode_short_0
        LDS     R16, g_asc_short_buffer
        LDS     R17, (KO_conf + 5)
        CP      R16, R17
        BRNE    ??application_decode_short_1
//  232 	{
//  233 		if(g_asc_short_buffer[0] == KO_conf.Reference)		//APL\00\12\00
//  234 		{
//  235 			if(g_asc_short_buffer[2] == 0x12 && g_asc_short_buffer[3] == 0x00 )
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 18
        BRNE    ??application_decode_short_1
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_1
//  236 				SCS_received.GR_ON = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x08
        ST      Z, R16
//  237 		}
//  238 		
//  239 		if(g_asc_short_buffer[0] == 0xB5)
??application_decode_short_1:
        LDS     R16, g_asc_short_buffer
        CPI     R16, 181
        BREQ    $+2+2
        RJMP    ??application_decode_short_0
//  240 		{
//  241 			if(g_asc_short_buffer[1] == KO_conf.GR)
        LDS     R16, (g_asc_short_buffer + 1)
        LDS     R17, (KO_conf + 6)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??application_decode_short_2
//  242 			{
//  243 				if(g_asc_short_buffer[2] == 0x1D)
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 29
        BRNE    ??application_decode_short_3
//  244 				{
//  245 					if(g_asc_short_buffer[3] == 0x00)	
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_4
//  246 						SCS_received.presence = 1;	// B|5 G|G 1|D 0|0  "presence"
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x01
        RJMP    ??application_decode_short_5
//  247 					else if(g_asc_short_buffer[3] == 0x01)	
??application_decode_short_4:
        LDS     R16, (g_asc_short_buffer + 3)
        CPI     R16, 1
        BRNE    ??application_decode_short_3
//  248 						SCS_received.no_presence = 1;	// B|5 G|G 1|D 0|1 "no presence"
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x02
??application_decode_short_5:
        ST      Z, R16
//  249 				}
//  250 				
//  251 				if(g_asc_short_buffer[2] == 0x12)
??application_decode_short_3:
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 18
        BRNE    ??application_decode_short_2
//  252 				{
//  253 					if(g_asc_short_buffer[3] == 0x00)
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_6
//  254 						SCS_received.GR_ON = 1;		//B|5 G|G 1|2 0|0   "Group frame ON"
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x08
        ST      Z, R16
//  255 					
//  256 					if(g_asc_short_buffer[3] == 0x01)	
??application_decode_short_6:
        LDS     R16, (g_asc_short_buffer + 3)
        CPI     R16, 1
        BRNE    ??application_decode_short_7
//  257 						SCS_received.GR_OFF = 1;	// B|5 G|G 1|2 0|1  "group frame OFF"
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x10
        ST      Z, R16
??application_decode_short_7:
        LDS     R16, (g_short_buffer + 7)
        CPI     R16, 68
        BRNE    ??application_decode_short_2
//  258 					
//  259 					if(g_short_buffer[7] == 'D')			// dimmer	0526
//  260 					{
//  261 						if(g_short_buffer[6] == '0')
        LDS     R16, (g_short_buffer + 6)
        CPI     R16, 48
        BRNE    ??application_decode_short_8
//  262 							SCS_received.GR_OFF = 1;	
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x10
        RJMP    ??application_decode_short_9
//  263 						else if(g_short_buffer[6] <= '9')
??application_decode_short_8:
        LDS     R16, (g_short_buffer + 6)
        CPI     R16, 58
        BRCC    ??application_decode_short_2
//  264 							SCS_received.GR_ON = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x08
??application_decode_short_9:
        ST      Z, R16
//  265 					}
//  266 				}							
//  267 			}
//  268 				
//  269 			if(((KO_conf.GS1 != 0)||(KO_conf.GS2 != 0)) && (g_asc_short_buffer[1] != 0))
??application_decode_short_2:
        LDS     R16, (KO_conf + 7)
        TST     R16
        BRNE    ??application_decode_short_10
        LDS     R16, (KO_conf + 8)
        TST     R16
        BREQ    ??application_decode_short_0
??application_decode_short_10:
        LDS     R16, (g_asc_short_buffer + 1)
        TST     R16
        BREQ    ??application_decode_short_0
//  270 			{
//  271 				if((g_asc_short_buffer[1] == KO_conf.GS1)||(g_asc_short_buffer[1] == KO_conf.GS2))				
        LDS     R16, (g_asc_short_buffer + 1)
        LDS     R17, (KO_conf + 7)
        CP      R16, R17
        BREQ    ??application_decode_short_11
        LDS     R16, (g_asc_short_buffer + 1)
        LDS     R17, (KO_conf + 8)
        CP      R16, R17
        BRNE    ??application_decode_short_0
//  272 				{
//  273 					if(g_asc_short_buffer[2] == 0x1D)
??application_decode_short_11:
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 29
        BRNE    ??application_decode_short_0
//  274 					{
//  275 						if(g_asc_short_buffer[3] == 0)	
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_0
//  276 						{
//  277 							if(Time_delay.GS_wait_22s ==0)
        LDS     R16, (Time_delay + 10)
        TST     R16
        BRNE    ??application_decode_short_0
//  278 									SCS_received.GS_presence = 1;									
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x04
        ST      Z, R16
//  279 						}
//  280 						// B|5 G|S 1|D 0|0  "presence" send by GS
//  281 					}
//  282 				}		
//  283 			}
//  284 		}	
//  285 	}
//  286 	
//  287 	if(((KO_conf.AddressType == GROUP)&&(KO_conf.Reference == g_asc_short_buffer[1]))||((KO_conf.AddressType == PP)&&(KO_conf.DesAdd == g_asc_short_buffer[1])))
??application_decode_short_0:
        LDS     R16, (KO_conf + 1)
        CPI     R16, 2
        BRNE    ??application_decode_short_12
        LDS     R16, (KO_conf + 5)
        LDS     R17, (g_asc_short_buffer + 1)
        CP      R16, R17
        BREQ    ??application_decode_short_13
??application_decode_short_12:
        LDS     R16, (KO_conf + 1)
        TST     R16
        BREQ    $+2+2
        RJMP    ??application_decode_short_14
        LDS     R16, (KO_conf + 2)
        LDS     R17, (g_asc_short_buffer + 1)
        CP      R16, R17
        BREQ    $+2+2
        RJMP    ??application_decode_short_14
??application_decode_short_13:
        LDS     R16, g_asc_short_buffer
        CPI     R16, 184
        BREQ    $+2+2
        RJMP    ??application_decode_short_15
//  288 	{		
//  289 		if(g_asc_short_buffer[0] == 0xB8)	// frame B8						// B|8 G|G 1|2 0|1
//  290 		{
//  291 			if(g_asc_short_buffer[2] == 0x12)
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 18
        BREQ    $+2+2
        RJMP    ??application_decode_short_16
//  292 			{
//  293 				if(Time_delay.regulation.time_out == 0)			// received a single update frame,200ms after received a ON before
        LDS     R16, (Time_delay + 278)
        TST     R16
        LDI     R30, LOW(DLL)
        LDI     R31, (DLL) >> 8
        LDD     R16, Z+54
        BRNE    ??application_decode_short_17
//  294 				{			
//  295 					DLL.start_regulation = 1;				// ALAN 0729, Start to regulation when received update ON of its own GR
        ORI     R16, 0x01
        STD     Z+54, R16
//  296 					SetBit(KO_conf.status[0],Status_Regulationing);
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+45
        ORI     R16, 0x40
        RJMP    ??application_decode_short_18
//  297 				}
//  298 				else
//  299 				{
//  300 					//DLL.start_regulation = 0;				
//  301 					//ClrBit(KO_conf.status[0],Status_Regulationing);
//  302 					DLL.start_regulation = 0;				// ALAN 0729, Start to regulation when received update ON of its own GR
??application_decode_short_17:
        ANDI    R16, 0xFE
        STD     Z+54, R16
//  303 					ClrBit(KO_conf.status[0],Status_Regulationing);
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+45
        ANDI    R16, 0xBF
??application_decode_short_18:
        STD     Z+45, R16
        LDS     R16, (g_short_buffer + 7)
        SUBI    R16, 48
        BREQ    ??application_decode_short_19
        DEC     R16
        BREQ    ??application_decode_short_20
        SUBI    R16, 19
        BREQ    ??application_decode_short_21
        RJMP    ??application_decode_short_16
//  304 				}
//  305 
//  306 				switch(g_short_buffer[7])
//  307 				{
//  308 					case '0':
//  309 						Sensor_mode.power_on_flag = 1;
??application_decode_short_19:
        LDI     R30, LOW(Sensor_mode)
        LDI     R31, (Sensor_mode) >> 8
        LDD     R16, Z+7
        ORI     R16, 0x20
        STD     Z+7, R16
//  310 						KO_conf.status[1] = Status_ON;		//reyno 0616
        LDI     R16, 100
        STS     (KO_conf + 46), R16
//  311 						SCS_received.update_state_ON = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x80
        ST      Z, R16
        RJMP    ??application_decode_short_16
//  312 						break;
//  313 					case '1':
//  314 						Sensor_mode.power_on_flag = 0;
??application_decode_short_20:
        LDI     R30, LOW(Sensor_mode)
        LDI     R31, (Sensor_mode) >> 8
        LDD     R16, Z+7
        ANDI    R16, 0xDF
        STD     Z+7, R16
//  315 						KO_conf.status[1] = Status_OFF;		//reyno 0616
        LDI     R16, 0
        STS     (KO_conf + 46), R16
//  316 						SCS_received.update_state_OFF = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+1
        ORI     R16, 0x01
        STD     Z+1, R16
        RJMP    ??application_decode_short_16
//  317 						break;
//  318 					case 'D':
//  319 						Sensor_mode.power_on_flag = 1;
??application_decode_short_21:
        LDI     R30, LOW(Sensor_mode)
        LDI     R31, (Sensor_mode) >> 8
        LDD     R16, Z+7
        ORI     R16, 0x20
        STD     Z+7, R16
//  320 						SCS_received.update_state_LEVEL = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+1
        ORI     R16, 0x02
        STD     Z+1, R16
//  321 						SCS_received.P2P_dimmer_flag = 1;			// dimmer,used for regulation
        LDD     R16, Z+2
        ORI     R16, 0x02
        STD     Z+2, R16
//  322 						SCS_received.P2P_actuator_flag = 0;
        LDD     R16, Z+2
        ANDI    R16, 0xFE
        STD     Z+2, R16
//  323 						
//  324 						switch (g_short_buffer[6])
        LDS     R16, (g_short_buffer + 6)
        LDI     R30, LOW(`?<Jumptable for application_decode_short>_0`)
        LDI     R31, (`?<Jumptable for application_decode_short>_0`) >> 8
        JMP     ?CV_SWITCH_L06
//  325 						{
//  326 							case '1':
//  327 							KO_conf.status[1]=1;
??application_decode_short_22:
        LDI     R16, 1
        RJMP    ??application_decode_short_23
//  328 							break;
//  329 							
//  330 							case '2':
//  331 							KO_conf.status[1]=10;
??application_decode_short_24:
        LDI     R16, 10
        RJMP    ??application_decode_short_23
//  332 							break;
//  333 							
//  334 							case '3':
//  335 							KO_conf.status[1]=20;
??application_decode_short_25:
        LDI     R16, 20
        RJMP    ??application_decode_short_23
//  336 							break;
//  337 							
//  338 							case '4':
//  339 							KO_conf.status[1]=30;
??application_decode_short_26:
        LDI     R16, 30
        RJMP    ??application_decode_short_23
//  340 							break;
//  341 							
//  342 							case '5':
//  343 							KO_conf.status[1]=40;
??application_decode_short_27:
        LDI     R16, 40
        RJMP    ??application_decode_short_23
//  344 							break;
//  345 							
//  346 							case '6':
//  347 							KO_conf.status[1]=50;
??application_decode_short_28:
        LDI     R16, 50
        RJMP    ??application_decode_short_23
//  348 							break;
//  349 							
//  350 							case '7':
//  351 							KO_conf.status[1]=60;
??application_decode_short_29:
        LDI     R16, 60
        RJMP    ??application_decode_short_23
//  352 							break;
//  353 							
//  354 							case '8':
//  355 								KO_conf.status[1]=75;
??application_decode_short_30:
        LDI     R16, 75
        RJMP    ??application_decode_short_23
//  356 							break;
//  357 							
//  358 							case '9':
//  359 								KO_conf.status[1]=Status_ON;
??application_decode_short_31:
        LDI     R16, 100
??application_decode_short_23:
        STS     (KO_conf + 46), R16
//  360 							break;
//  361 							
//  362 							default:break;
//  363 						}
//  364 						break;
//  365 						default:	break;	
//  366 					}
//  367 			}
//  368 			
//  369 			if(g_asc_short_buffer[2] == 0x1D)
??application_decode_short_16:
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 29
        BRNE    ??application_decode_short_15
//  370 			{
//  371 				if(KO_conf.AddressType == PP)
        LDS     R16, (KO_conf + 1)
        TST     R16
        BRNE    ??application_decode_short_15
//  372 				{
//  373 					if(g_asc_short_buffer[3] == 0x00)
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_32
//  374 						SCS_received.presence = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x01
        RJMP    ??application_decode_short_33
//  375 					else if(g_asc_short_buffer[3] == 0x01)
??application_decode_short_32:
        LDS     R16, (g_asc_short_buffer + 3)
        CPI     R16, 1
        BRNE    ??application_decode_short_15
//  376 						SCS_received.no_presence = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x02
??application_decode_short_33:
        ST      Z, R16
//  377 				}
//  378 			}
//  379 		}
//  380 		
//  381 		if(KO_conf.AddressType == PP)
??application_decode_short_15:
        LDS     R16, (KO_conf + 1)
        TST     R16
        BRNE    ??application_decode_short_14
//  382 		{
//  383 			switch(g_asc_short_buffer[2])
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 18
        BRNE    ??application_decode_short_14
//  384 			{
//  385 				case 0x12:
//  386 					/*
//  387 					if(KO_conf.LightReg == 1)
//  388 					{	
//  389 						DLL.start_regulation = 1;
//  390 						SetBit(KO_conf.status[0],Status_Regulationing);
//  391 						regulation_timer_initial();
//  392 					}
//  393 					*/
//  394 					if(g_asc_short_buffer[3] == 0x00)
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_34
//  395 						SCS_received.GR_ON = 1;         // 0714 alan in order to compatible with GR, P2P and GR use the same flag SCS_received.GR_ON
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x08
        RJMP    ??application_decode_short_35
//  396 					else if(g_asc_short_buffer[3] == 0x01)
??application_decode_short_34:
        LDS     R16, (g_asc_short_buffer + 3)
        CPI     R16, 1
        BRNE    ??application_decode_short_14
//  397 						SCS_received.GR_OFF = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x10
??application_decode_short_35:
        ST      Z, R16
??application_decode_short_14:
        LDS     R16, g_asc_short_buffer
        LDS     R17, (KO_conf + 2)
        CP      R16, R17
        BRNE    ??application_decode_short_36
//  398 				break;
//  399 				default:break;
//  400 			}
//  401 		}	
//  402 	}
//  403 	
//  404 	//receive APL XX 12 00
//  405 	if(g_asc_short_buffer[0] == KO_conf.DesAdd)
//  406 	{
//  407 		switch(g_asc_short_buffer[2])
        LDS     R16, (g_asc_short_buffer + 2)
        CPI     R16, 18
        BRNE    ??application_decode_short_36
//  408 		{
//  409 			case 0x12:
//  410 				if(g_asc_short_buffer[3] == 0x00)
        LDS     R16, (g_asc_short_buffer + 3)
        TST     R16
        BRNE    ??application_decode_short_37
//  411 				{
//  412 					SCS_received.GR_ON = 1;         // 0714 alan in order to compatible with GR, P2P and GR use the same flag SCS_received.GR_ON
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x08
        ST      Z, R16
//  413 					if(KO_conf.LightReg == 1)
        LDS     R16, (KO_conf + 28)
        CPI     R16, 1
        BRNE    ??application_decode_short_36
//  414 					{	
//  415 						DLL.start_regulation = 1;
        LDI     R30, LOW(DLL)
        LDI     R31, (DLL) >> 8
        LDD     R16, Z+54
        ORI     R16, 0x01
        STD     Z+54, R16
//  416 						SetBit(KO_conf.status[0],Status_Regulationing);
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+45
        ORI     R16, 0x40
        STD     Z+45, R16
//  417 						regulation_timer_initial();
        CALL    regulation_timer_initial
        RJMP    ??application_decode_short_36
//  418 					}
//  419 				}
//  420 				else if(g_asc_short_buffer[3] == 0x01)
??application_decode_short_37:
        LDS     R16, (g_asc_short_buffer + 3)
        CPI     R16, 1
        BRNE    ??application_decode_short_36
//  421 					SCS_received.GR_OFF = 1;
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LD      R16, Z
        ORI     R16, 0x10
        ST      Z, R16
//  422 			break;
//  423 			default:break;
//  424 		}
//  425 	}
//  426 	
//  427 }
??application_decode_short_36:
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock4
//  428 

        RSEG CODE:CODE:NOROOT(1)
//  429 void application_decode_long(void)
application_decode_long:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function application_decode_long
//  430 {
        MOVW    R21:R20, R27:R26
//  431 	if((g_asc_reception_buffer[1] == KO_conf.DesAdd && KO_conf.AddressType == PP) || (g_asc_reception_buffer[1] == KO_conf.Reference && KO_conf.AddressType == GROUP) || (g_asc_reception_buffer[1] == KO_conf.GR && KO_conf.AddressType == GROUP))
        LDI     R16, LOW(KO_conf)
        LDI     R17, (KO_conf) >> 8
        LDI     R30, LOW(g_asc_reception_buffer)
        LDI     R31, (g_asc_reception_buffer) >> 8
        LDD     R18, Z+1
        LDS     R19, (KO_conf + 2)
        CP      R18, R19
        BRNE    ??application_decode_long_0
        LDS     R18, (KO_conf + 1)
        TST     R18
        BREQ    ??application_decode_long_1
??application_decode_long_0:
        LDD     R18, Z+1
        LDS     R19, (KO_conf + 5)
        CP      R18, R19
        BRNE    ??application_decode_long_2
        LDS     R18, (KO_conf + 1)
        CPI     R18, 2
        BREQ    ??application_decode_long_1
??application_decode_long_2:
        LDD     R18, Z+1
        LDS     R19, (KO_conf + 6)
        CP      R18, R19
        BRNE    ??application_decode_long_3
        LDS     R18, (KO_conf + 1)
        CPI     R18, 2
        BRNE    ??application_decode_long_3
//  432 	{
//  433 		if(g_asc_reception_buffer[5] == 0x0D)
??application_decode_long_1:
        LDD     R18, Z+5
        CPI     R18, 13
        BRNE    ??application_decode_long_4
//  434 		{
//  435 			SCS_received.P2P_dimmer_flag = 1;			// dimmer,used for regulation
        LDI     R26, LOW((SCS_received + 2))
        LDI     R27, HIGH((SCS_received + 2))
        LD      R18, X
        ORI     R18, 0x02
        ST      X, R18
//  436 			SCS_received.P2P_actuator_flag = 0;
        LD      R18, X
        ANDI    R18, 0xFE
        ST      X, R18
//  437 			
//  438 			KO_conf.status[1] = g_asc_reception_buffer[5];
        LDD     R18, Z+5
        STS     (KO_conf + 46), R18
//  439 		}
//  440 		
//  441 		//D2 A|Pl 0|1 3|4 0|D X|X X|X X|X		Extended state update frame
//  442 		if((g_asc_reception_buffer[0]==0xD2)&&(g_asc_reception_buffer[3]==0x34)&&(g_asc_reception_buffer[4]==0x0D))//&&(g_reception_buffer[11]=='0'||g_reception_buffer[11]=='D'))
??application_decode_long_4:
        LD      R18, Z
        CPI     R18, 210
        BRNE    ??application_decode_long_3
        LDD     R18, Z+3
        CPI     R18, 52
        BRNE    ??application_decode_long_3
        LDD     R18, Z+4
        CPI     R18, 13
        BRNE    ??application_decode_long_3
//  443 		{
//  444 			if(Time_delay.regulation.time_out == 0)			// received a single update frame,200ms after received a ON before
        LDS     R18, (Time_delay + 278)
        TST     R18
        LDI     R30, LOW(DLL)
        LDI     R31, (DLL) >> 8
        LDD     R18, Z+54
        BRNE    ??application_decode_long_5
//  445 			{			
//  446 				DLL.start_regulation = 1;									// ALAN 0729, Start to regulation when received update ON of its own GR
        ORI     R18, 0x01
        STD     Z+54, R18
//  447 				SetBit(KO_conf.status[0],Status_Regulationing);
        MOVW    R31:R30, R17:R16
        LDD     R16, Z+45
        ORI     R16, 0x40
        RJMP    ??application_decode_long_6
//  448 				//DLL.start_regulation = 0;				
//  449 				//ClrBit(KO_conf.status[0],Status_Regulationing);
//  450 			}
//  451 			else
//  452 			{
//  453 				DLL.start_regulation = 0;				
??application_decode_long_5:
        ANDI    R18, 0xFE
        STD     Z+54, R18
//  454 				ClrBit(KO_conf.status[0],Status_Regulationing);
        MOVW    R31:R30, R17:R16
        LDD     R16, Z+45
        ANDI    R16, 0xBF
??application_decode_long_6:
        STD     Z+45, R16
//  455 				//DLL.start_regulation = 1;									// ALAN 0729, Start to regulation when received update ON of its own GR
//  456 				//SetBit(KO_conf.status[0],Status_Regulationing);
//  457 			}
//  458 		}
//  459 	}
//  460 }
??application_decode_long_3:
        MOVW    R27:R26, R21:R20
        RET
        CFI EndBlock cfiBlock5
//  461 

        RSEG CODE:CODE:NOROOT(1)
//  462 void calibration_decode(void)
calibration_decode:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function calibration_decode
//  463 {
        FUNCALL calibration_decode, led_blinking
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL calibration_decode, led_blinking_disable
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL calibration_decode, daylight_set_init
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL calibration_decode, buzzer_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        ST      -Y, R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        LDS     R16, (g_asc_reception_buffer + 3)
        CPI     R16, 66
        BREQ    $+2+2
        RJMP    ??calibration_decode_0
//  464 	// add 0519
//  465 	// Enter calibration waiting mode	D1 01 01 42 14 00 00 00
//  466 	// Exit calibration waiting mode	D1 01 01 42 14 00 00 FF
//  467 	// Sent calibration lux				D1 01 01 42 10 0X XX XX
//  468 	// change by reyno May30
//  469 	if(g_asc_reception_buffer[3] == 0x42)       	// D5 LOC 01 42 14 XX XX XX 0519
//  470 	{
//  471 		if(g_asc_reception_buffer[4] == 0x14 )
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 20
        BRNE    ??calibration_decode_1
//  472 		{
//  473 			if(g_asc_reception_buffer[7] ==0x00)
        LDS     R16, (g_asc_reception_buffer + 7)
        TST     R16
        BRNE    ??calibration_decode_2
//  474 			{
//  475 				SCS_received.calib_wait = 1;    	// D1 LOC 01 42 14 XX XX 00
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        ORI     R16, 0x01
        STD     Z+4, R16
//  476 		  	led_blinking(250,250);
        LDI     R20, 250
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 250
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        CALL    led_blinking
//  477 				state.main_state = CALIBRATION;
        LDI     R16, 51
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??calibration_decode_1
//  478 			}
//  479 			else if(g_asc_reception_buffer[7] == 0xFF)
??calibration_decode_2:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 255
        BRNE    ??calibration_decode_1
//  480 			{
//  481 				SCS_received.calib_wait = 0; 		//SCS_received.calib_exit = 1; 		// D1 LOC 01 42 14 XX XX FF
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        ANDI    R16, 0xFE
        STD     Z+4, R16
//  482 		 		led_blinking_disable(0);
        LDI     R16, 0
        CALL    led_blinking_disable
//  483 				state.main_state = NORMAL;
        LDI     R16, 0
        STS     (state + 2), R16
        STS     (state + 3), R16
//  484 			}
//  485 		}
//  486 		
//  487 		if(g_asc_reception_buffer[4] == 0x10)
??calibration_decode_1:
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 16
        BRNE    ??calibration_decode_0
//  488 		{
//  489 			if(SCS_received.calib_wait == 1)
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        SBRS    R16, 0
        RJMP    ??calibration_decode_0
//  490 			{
//  491 				unsigned long int temp_lux;
//  492 				temp_lux = g_asc_reception_buffer[5]&0x0F;
        LDS     R16, (g_asc_reception_buffer + 5)
        ANDI    R16, 0x0F
//  493 				temp_lux <<= 8;
//  494 				temp_lux += g_asc_reception_buffer[6];
        MOV     R17, R16
        LDI     R16, 0
        LDS     R20, (g_asc_reception_buffer + 6)
        LDI     R21, 0
        LDI     R22, 0
        ADD     R16, R20
//  495 				temp_lux <<= 8;
//  496 				temp_lux += g_asc_reception_buffer[7];
        LDI     R19, 0
        MOV     R18, R17
        MOV     R17, R16
        LDI     R16, 0
        LDS     R20, (g_asc_reception_buffer + 7)
        LDI     R23, 0
        ADD     R16, R20
//  497 			
//  498 				DLL.setpoint_M = temp_lux*10/DLL.day_level;
        LDI     R26, LOW(DLL)
        LDI     R27, (DLL) >> 8
        LDI     R20, 10
        CALL    ?L_EC_MUL_L03
        ADIW    R27:R26, 6
        LD      R20, X+
        LD      R21, X
        SBIW    R27:R26, 7
        CALL    ?UL_DIVMOD_L03
        ADIW    R27:R26, 28
        ST      X+, R16
        ST      X, R17
        SBIW    R27:R26, 29
//  499 				eep_setpoint[2] = DLL.setpoint_M;
        ADIW    R27:R26, 28
        LD      R16, X+
        LD      R17, X
        LDI     R20, LOW((eep_setpoint + 4))
        LDI     R21, HIGH((eep_setpoint + 4))
        CALL    __eeput16_16
//  500 				daylight_set_init();
        CALL    daylight_set_init
//  501 				buzzer_ms(500);	
        LDI     R16, 244
        LDI     R17, 1
        CALL    buzzer_ms
//  502 			}
//  503 		}
//  504 	}
//  505 }
??calibration_decode_0:
        LD      R26, Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
        LD      R27, Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
        RET
        CFI EndBlock cfiBlock6
//  506 
//  507 //reyno 0602

        RSEG CODE:CODE:NOROOT(1)
//  508 void scs_calibration(void)
scs_calibration:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function scs_calibration
//  509 {								
        FUNCALL scs_calibration, led_blinking
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, buzzer_ms
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, led_blinking_disable
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, led_blinking_disable
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, write_KO
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, write_ee_KO
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, write_KO
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, write_ee_KO
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        FUNCALL scs_calibration, buzzer_ms
        LOCFRAME CSTACK, 8, STACK
        LOCFRAME RSTACK, 2, STACK
        ARGFRAME RSTACK, 0, STACK
        CALL    ?PROLOGUE8_L09
        CFI R7 Frame(CFA_Y, -1)
        CFI R6 Frame(CFA_Y, -2)
        CFI R5 Frame(CFA_Y, -3)
        CFI R4 Frame(CFA_Y, -4)
        CFI R27 Frame(CFA_Y, -5)
        CFI R26 Frame(CFA_Y, -6)
        CFI R25 Frame(CFA_Y, -7)
        CFI R24 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        LDS     R16, (g_asc_reception_buffer + 3)
        CPI     R16, 66
        BREQ    $+2+2
        RJMP    ??scs_calibration_0
//  510 	if(g_asc_reception_buffer[3] == 0x42)       	// D5 LOC 01 42 14 XX XX XX 0519
//  511 	{
//  512 		if(g_asc_reception_buffer[4] == 0x14 )
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 20
        BREQ    $+2+2
        RJMP    ??scs_calibration_1
//  513 		{
//  514 			if(g_asc_reception_buffer[7] ==0x00)
        LDS     R16, (g_asc_reception_buffer + 7)
        TST     R16
        BRNE    ??scs_calibration_2
//  515 			{
//  516 				SCS_received.calib_wait = 1;    	// D1 LOC 01 42 14 XX XX 00
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        ORI     R16, 0x01
        STD     Z+4, R16
//  517 		  	led_blinking(250,250);
        LDI     R20, 250
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R16, 250
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        CALL    led_blinking
//  518 				state.main_state = CALIBRATION;
        LDI     R16, 51
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
        RJMP    ??scs_calibration_1
//  519 			}
//  520 			else if(g_asc_reception_buffer[7] ==0x01)
??scs_calibration_2:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 1
        BRNE    ??scs_calibration_3
//  521 			{
//  522 				state.main_state = FACTORY_CALIBRATION;
        LDI     R16, 68
        LDI     R17, 144
        STS     (state + 2), R16
        STS     (state + 3), R17
//  523 				buzzer_ms(500);
        LDI     R16, 244
        LDI     R17, 1
        CALL    buzzer_ms
//  524 				led_blinking_disable(0);
        LDI     R16, 0
        CALL    led_blinking_disable
        RJMP    ??scs_calibration_1
//  525 			}
//  526 			else if(g_asc_reception_buffer[7] == 0xFF)
??scs_calibration_3:
        LDS     R16, (g_asc_reception_buffer + 7)
        CPI     R16, 255
        BRNE    ??scs_calibration_1
//  527 			{
//  528 				SCS_received.calib_wait = 0; 		//SCS_received.calib_exit = 1; 		// D1 LOC 01 42 14 XX XX FF
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        ANDI    R16, 0xFE
        STD     Z+4, R16
//  529 		 		led_blinking_disable(0);
        LDI     R16, 0
        CALL    led_blinking_disable
//  530 				state.main_state = NORMAL;
        LDI     R16, 0
        STS     (state + 2), R16
        STS     (state + 3), R16
//  531 				if(ee_main_state == FACTORY_CALIBRATION_STEP1)
        LDI     R20, LOW(ee_main_state)
        LDI     R21, (ee_main_state) >> 8
        CALL    __eeget16_16
        CPI     R16, 69
        LDI     R18, 144
        CPC     R17, R18
        BRNE    ??scs_calibration_1
//  532 					ee_main_state = NORMAL;
        LDI     R16, 0
        LDI     R17, 0
        LDI     R20, LOW(ee_main_state)
        LDI     R21, (ee_main_state) >> 8
        CALL    __eeput16_16
//  533 			}
//  534 		}
//  535 		
//  536 		if(g_asc_reception_buffer[4] == 0x10)
??scs_calibration_1:
        LDS     R16, (g_asc_reception_buffer + 4)
        CPI     R16, 16
        BREQ    $+2+2
        RJMP    ??scs_calibration_0
//  537 		{
//  538 			if(SCS_received.calib_wait == 1)
        LDI     R30, LOW(SCS_received)
        LDI     R31, (SCS_received) >> 8
        LDD     R16, Z+4
        SBRS    R16, 0
        RJMP    ??scs_calibration_0
//  539 			{
//  540 				unsigned long int temp = 0;				// add by alan
//  541 				float f_temp;
//  542 				temp = g_asc_reception_buffer[5];
        LDS     R24, (g_asc_reception_buffer + 5)
//  543 				temp = temp<<8;
//  544 				temp += g_asc_reception_buffer[6];
        MOV     R25, R24
        LDI     R24, 0
        LDS     R16, (g_asc_reception_buffer + 6)
        ADD     R24, R16
//  545 				temp = temp<<8;
//  546 				temp += g_asc_reception_buffer[7];
        LDI     R27, 0
        MOV     R26, R25
        MOV     R25, R24
        LDI     R24, 0
        LDS     R16, (g_asc_reception_buffer + 7)
        ADD     R24, R16
//  547 				temp &= 0xFFFFF;
        ANDI    R26, 0x0F
//  548 				if(Sensor_mode.power_on_flag)
        MOVW    R17:R16, R25:R24
        MOVW    R19:R18, R27:R26
        CALL    ?UL2F_L04
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 32
        LDI     R23, 65
        CALL    ?F_MUL_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
        LDI     R16, 10
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        MOVW    R21:R20, R25:R24
        MOVW    R23:R22, R27:R26
        CALL    ?L_EC_MUL_L03
        LDI     R26, LOW(KO_conf)
        LDI     R27, (KO_conf) >> 8
        LDI     R30, LOW(Sensor_mode)
        LDI     R31, (Sensor_mode) >> 8
        LDD     R20, Z+7
        SBRS    R20, 5
        RJMP    ??scs_calibration_4
//  549 				{	
//  550 					KO_conf.DF = temp*10/ DLL.calc_level;			//0526
        LDS     R20, (DLL + 18)
        LDS     R21, (DLL + 19)
        LDI     R22, 0
        CALL    ?UL_DIVMOD_L03
        STS     (KO_conf + 22), R16
//  551 					f_temp = (float)temp*10/ (float)DLL.calc_level;
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        LDI     R18, 0
        LDI     R19, 0
        CALL    ?UL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_DIV_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  552 					if((f_temp - KO_conf.DF >= 0.5) && (KO_conf.DF != 255))
        LDS     R16, (KO_conf + 22)
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        CALL    ?UL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_SUB_L04
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 63
        CALL    ?F_CMP_GE_L04
        BRCC    ??scs_calibration_5
        LDS     R16, (KO_conf + 22)
        CPI     R16, 255
        BREQ    ??scs_calibration_5
//  553 						KO_conf.DF++;
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+22
        INC     R16
        STD     Z+22, R16
//  554 					write_KO(22,KO_conf.DF); //reyno 0602
??scs_calibration_5:
        LDS     R17, (KO_conf + 22)
        LDI     R16, 22
        CALL    write_KO
//  555 					write_ee_KO(22,KO_conf.DF);
        LDS     R17, (KO_conf + 22)
        LDI     R16, 22
        RJMP    ??scs_calibration_6
//  556 				}
//  557 				else
//  558 				{
//  559 					KO_conf.NF = temp*10/ DLL.calc_level;			//0526
??scs_calibration_4:
        LDS     R20, (DLL + 18)
        LDS     R21, (DLL + 19)
        LDI     R22, 0
        CALL    ?UL_DIVMOD_L03
        STS     (KO_conf + 24), R16
//  560 					f_temp = (float)temp*10/ (float)DLL.calc_level;
        LDS     R16, (DLL + 18)
        LDS     R17, (DLL + 19)
        LDI     R18, 0
        LDI     R19, 0
        CALL    ?UL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_DIV_L04
        MOVW    R5:R4, R17:R16
        MOVW    R7:R6, R19:R18
//  561 					if((f_temp - KO_conf.NF >= 0.5) && (KO_conf.NF != 255))
        LDS     R16, (KO_conf + 24)
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        CALL    ?UL2F_L04
        MOVW    R21:R20, R17:R16
        MOVW    R23:R22, R19:R18
        MOVW    R17:R16, R5:R4
        MOVW    R19:R18, R7:R6
        CALL    ?F_SUB_L04
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 63
        CALL    ?F_CMP_GE_L04
        BRCC    ??scs_calibration_7
        LDS     R16, (KO_conf + 24)
        CPI     R16, 255
        BREQ    ??scs_calibration_7
//  562 						KO_conf.NF++;
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+24
        INC     R16
        STD     Z+24, R16
//  563 					write_KO(24,KO_conf.NF); //reyno 0602
??scs_calibration_7:
        LDS     R17, (KO_conf + 24)
        LDI     R16, 24
        CALL    write_KO
//  564 					write_ee_KO(24,KO_conf.NF);
        LDS     R17, (KO_conf + 24)
        LDI     R16, 24
??scs_calibration_6:
        CALL    write_ee_KO
//  565 				}
//  566 				buzzer_ms(500);
        LDI     R16, 244
        LDI     R17, 1
        CALL    buzzer_ms
//  567 			}
//  568 		}
//  569 	}
//  570 }
??scs_calibration_0:
        LDI     R30, 8
        JMP     ?EPILOGUE_B8_L09
        CFI EndBlock cfiBlock7

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "D000010E00000000"`:
        DC8 "D000010E00000000"

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for application_decode_short>_0`:
        DB      49
        DB      0
        DW      (??application_decode_short_16) /2
        DW      9
        DW      (??application_decode_short_22) /2
        DW      (??application_decode_short_24) /2
        DW      (??application_decode_short_25) /2
        DW      (??application_decode_short_26) /2
        DW      (??application_decode_short_27) /2
        DW      (??application_decode_short_28) /2
        DW      (??application_decode_short_29) /2
        DW      (??application_decode_short_30) /2
        DW      (??application_decode_short_31) /2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "D000010E00000000">`:
        DS8 17
        REQUIRE `?<Initializer for <Constant "D000010E00000000"`

        END
// 
// 2 620 bytes in segment CODE
//     6 bytes in segment INITTAB
//    17 bytes in segment NEAR_I
//    17 bytes in segment NEAR_ID
//    24 bytes in segment SWITCH
// 
// 2 661 bytes of CODE memory (+ 6 bytes shared)
//    17 bytes of DATA memory
//
//Errors: none
//Warnings: none
